// File: src/App.tsx

import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ThemeProvider } from '@/components/ThemeProvider';
import { Toaster } from '@/components/ui/toaster';
import { AuthProvider } from '@/contexts/AuthContext';
import { LanguageProvider } from '@/contexts/LanguageContext';
import Routes from './Routes';
import './App.css';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 1,
    },
  },
});

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <LanguageProvider>
          <ThemeProvider>
            <BrowserRouter>
              <Routes />
              <Toaster />
            </BrowserRouter>
          </ThemeProvider>
        </LanguageProvider>
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;

// File: src/Routes.tsx

import { Routes as RouterRoutes, Route } from 'react-router-dom';
import Index from '@/pages/Index';
import Auth from '@/pages/Auth';
import CreateThesis from '@/pages/CreateThesis';
import AdminPanel from '@/pages/AdminPanel';
import LandingPage from '@/pages/LandingPage';
import { useAuth } from '@/contexts/AuthContext';
import { ThesisEditor } from '@/components/ThesisEditor';

const Routes = () => {
  const { isAuthenticated, loading } = useAuth();
  
  console.log('üîê Auth state:', { isAuthenticated, loading });

  if (loading) {
    return (
      <div className="min-h-screen bg-[#1A1F2C] flex items-center justify-center">
        <p className="text-white">Loading...</p>
      </div>
    );
  }

  return (
    <RouterRoutes>
      {isAuthenticated ? (
        <>
          <Route path="/" element={<Index />} />
          <Route path="/create-thesis" element={<CreateThesis />} />
          <Route path="/admin" element={<AdminPanel />} />
          <Route path="/thesis/:thesisId" element={<ThesisEditor />} />
          <Route path="*" element={<Index />} />
        </>
      ) : (
        <>
          <Route path="/" element={<LandingPage />} />
          <Route path="/auth" element={<Auth />} />
          <Route path="*" element={<LandingPage />} />
        </>
      )}
    </RouterRoutes>
  );
};

export default Routes;

// File: src/components/ChapterManager.tsx

import React from 'react';
import { Chapter } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { BookOpen, PlusCircle, Trash2 } from 'lucide-react';
import { ChapterItem } from './editor/chapters/ChapterItem';
import { useToast } from '@/hooks/use-toast';
import { ChapterCreationDialog } from './editor/chapters/ChapterCreationDialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface ChapterManagerProps {
  chapters: Chapter[];
  onUpdateChapter: (chapter: Chapter) => void;
  onAddChapter: (chapter: Chapter) => void;
  onRemoveChapter?: (chapterId: string) => void;
}

export const ChapterManager: React.FC<ChapterManagerProps> = ({
  chapters,
  onUpdateChapter,
  onAddChapter,
  onRemoveChapter
}) => {
  const [openChapters, setOpenChapters] = React.useState<string[]>([]);
  const [showCreateDialog, setShowCreateDialog] = React.useState(false);
  const [chaptersToDelete, setChaptersToDelete] = React.useState<string[]>([]);
  const { toast } = useToast();

  const toggleChapter = (chapterId: string) => {
    setOpenChapters(prev => 
      prev.includes(chapterId) 
        ? prev.filter(id => id !== chapterId)
        : [...prev, chapterId]
    );
  };

  const toggleChapterSelection = (chapterId: string) => {
    setChaptersToDelete(prev =>
      prev.includes(chapterId)
        ? prev.filter(id => id !== chapterId)
        : [...prev, chapterId]
    );
  };

  const handleCreateChapter = (chapter: Chapter) => {
    console.log('Handling chapter creation:', chapter);
    onAddChapter(chapter);
    toast({
      title: "Chapter Added",
      description: "New chapter has been created successfully",
    });
  };

  const handleDeleteChapters = () => {
    if (onRemoveChapter && chaptersToDelete.length > 0) {
      console.log('Deleting chapters:', chaptersToDelete);
      chaptersToDelete.forEach(chapterId => {
        onRemoveChapter(chapterId);
      });
      setChaptersToDelete([]);
      toast({
        title: "Chapters Deleted",
        description: `${chaptersToDelete.length} chapter(s) have been removed successfully`,
      });
    }
  };

  return (
    <div className="space-y-6 animate-fade-in">
      <div className="flex justify-between items-center bg-editor-bg p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-full">
            <BookOpen className="w-6 h-6 text-primary" />
          </div>
          <h2 className="text-2xl font-serif font-semibold text-editor-text">Chapters</h2>
        </div>
        <div className="flex items-center gap-2">
          {chaptersToDelete.length > 0 && (
            <Button 
              onClick={() => setChaptersToDelete([])}
              variant="ghost"
              className="text-muted-foreground"
            >
              Clear Selection ({chaptersToDelete.length})
            </Button>
          )}
          <Button 
            onClick={() => setShowCreateDialog(true)} 
            className="flex items-center gap-2 bg-primary hover:bg-primary/90 text-white transition-colors duration-200 px-6 py-2 rounded-lg shadow-sm hover:shadow-md"
          >
            <PlusCircle className="w-5 h-5" />
            Add Chapter
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        {chapters.map((chapter) => (
          <ChapterItem
            key={chapter.id}
            chapter={chapter}
            chapterNumber={chapters.findIndex(c => c.id === chapter.id) + 1}
            isOpen={openChapters.includes(chapter.id)}
            onToggle={() => toggleChapter(chapter.id)}
            onUpdateChapter={onUpdateChapter}
            isSelected={chaptersToDelete.includes(chapter.id)}
            onSelect={() => toggleChapterSelection(chapter.id)}
          />
        ))}
      </div>

      {chaptersToDelete.length > 0 && (
        <div className="fixed bottom-4 right-4 bg-background border rounded-lg shadow-lg p-4 animate-slide-in-right">
          <div className="flex items-center gap-4">
            <span className="text-sm font-medium">
              {chaptersToDelete.length} chapter(s) selected
            </span>
            <Button
              onClick={() => handleDeleteChapters()}
              variant="destructive"
              className="flex items-center gap-2"
            >
              <Trash2 className="w-4 h-4" />
              Delete Selected
            </Button>
          </div>
        </div>
      )}

      <ChapterCreationDialog
        open={showCreateDialog}
        onOpenChange={setShowCreateDialog}
        onChapterCreate={handleCreateChapter}
      />

      <AlertDialog open={chaptersToDelete.length > 0} onOpenChange={(open) => !open && setChaptersToDelete([])}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete {chaptersToDelete.length} chapter(s) and all their contents.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteChapters}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

// File: src/components/CitationManager.tsx

import React, { useState } from 'react';
import { Citation } from '@/types/thesis';
import { CitationSearch } from './citation/CitationSearch';
import { CitationList } from './citation/CitationList';
import { CitationPreview } from './citation/CitationPreview';
import { motion } from 'framer-motion';
import { Card } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BookOpen, Search, Clock } from 'lucide-react';

type CitationType = "article" | "book" | "conference" | "website" | "other" | "all";

interface CitationManagerProps {
  citations: Citation[];
  onCitationSelect?: (citation: Citation | null) => void;
  selectedCitation?: Citation | null;
  onCitationCreate?: (citation: Citation) => void;
  onCitationUpdate?: (citation: Citation) => void;
  onCitationDelete?: (citation: Citation) => void;
  thesisId: string;
}

export const CitationManager: React.FC<CitationManagerProps> = ({
  citations,
  onCitationSelect,
  selectedCitation,
  onCitationCreate,
  onCitationUpdate,
  onCitationDelete,
  thesisId
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<CitationType>('all');
  const [sortField, setSortField] = useState<keyof Citation>('created_at');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [activeTab, setActiveTab] = useState('all');

  // Filter and sort citations
  const filteredCitations = citations.filter(citation => {
    const matchesSearch = citation.text.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         citation.authors.some(author => author.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesType = filterType === 'all' || citation.type === filterType;
    return matchesSearch && matchesType;
  });

  const sortedCitations = [...filteredCitations].sort((a, b) => {
    const aValue = a[sortField];
    const bValue = b[sortField];
    
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      return sortDirection === 'asc' 
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    }
    return 0;
  });

  const handleCitationCreate = (citation: Omit<Citation, 'thesis_id'>) => {
    if (onCitationCreate) {
      onCitationCreate({
        ...citation,
        thesis_id: thesisId
      });
    }
  };

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Tabs defaultValue="all" className="w-full" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="all" className="flex items-center gap-2">
              <BookOpen className="w-4 h-4" />
              All Citations
            </TabsTrigger>
            <TabsTrigger value="recent" className="flex items-center gap-2">
              <Clock className="w-4 h-4" />
              Recent
            </TabsTrigger>
            <TabsTrigger value="search" className="flex items-center gap-2">
              <Search className="w-4 h-4" />
              Search
            </TabsTrigger>
          </TabsList>

          <TabsContent value="all">
            <CitationList
              citations={sortedCitations}
              onRemove={(id) => {
                const citation = citations.find(c => c.id === id);
                if (citation && onCitationDelete) onCitationDelete(citation);
              }}
              onUpdate={onCitationUpdate}
              onPreview={onCitationSelect}
            />
          </TabsContent>

          <TabsContent value="recent">
            <CitationList
              citations={sortedCitations.slice(0, 5)}
              onRemove={(id) => {
                const citation = citations.find(c => c.id === id);
                if (citation && onCitationDelete) onCitationDelete(citation);
              }}
              onUpdate={onCitationUpdate}
              onPreview={onCitationSelect}
            />
          </TabsContent>

          <TabsContent value="search">
            <div className="space-y-4">
              <CitationSearch
                onCitationSelect={handleCitationCreate}
              />
              <CitationList
                citations={sortedCitations}
                onRemove={(id) => {
                  const citation = citations.find(c => c.id === id);
                  if (citation && onCitationDelete) onCitationDelete(citation);
                }}
                onUpdate={onCitationUpdate}
                onPreview={onCitationSelect}
              />
            </div>
          </TabsContent>
        </Tabs>
      </motion.div>

      {selectedCitation && (
        <CitationPreview
          citation={selectedCitation}
          onEdit={onCitationUpdate}
          onDelete={onCitationDelete}
          onClose={() => onCitationSelect?.(null)}
        />
      )}
    </Card>
  );
};

// File: src/components/EditorSection.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { useToast } from '@/hooks/use-toast';
import { SectionHeader } from './editor/SectionHeader';
import { SectionContent } from './editor/SectionContent';
import { SectionManagers } from './editor/SectionManagers';
import { SectionProps } from '@/types/components';

export const EditorSection: React.FC<SectionProps> = ({
  section,
  isActive,
  onContentChange,
  onTitleChange
}) => {
  const { toast } = useToast();
  console.log('EditorSection rendering with section:', { 
    id: section.id, 
    title: section.title,
    isActive 
  });

  if (!isActive) return null;

    const handleSectionDataUpdate = (updatedSection: Section) => {
    console.log('Updating section:', updatedSection);
      onContentChange(updatedSection.id, updatedSection.content)
        onTitleChange(updatedSection.id, updatedSection.title)
       
    toast({
      title: "Success",
      description: "Section updated successfully",
    });
  };
   
    const handleSectionTaskUpdate = (updatedSection: Section) => {
        console.log('Updating section:', updatedSection);
       
       
        onContentChange(updatedSection.id, updatedSection.content)
        toast({
            title: "Success",
            description: "Section updated successfully",
        });
  };

  return (
    <div className="editor-section">
      <div className="space-y-6">
        <SectionHeader
          title={section.title}
          required={section.required}
          onTitleChange={(title) => onTitleChange(section.id, title)}
        />
        
        <SectionContent
          content={section.content}
          onContentChange={(content) => onContentChange(section.id, content)}
          section={section}
            isActive={isActive}
           onUpdateSectionData={handleSectionTaskUpdate}
        />

        <SectionManagers
          section={section}
          onSectionUpdate={handleSectionDataUpdate}
        />
      </div>
    </div>
  );
};

// File: src/components/ErrorBoundary.tsx

import React from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface Props {
  children: React.ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  async componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error);
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      const browserInfo = {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
      };

      const { error: dbError } = await supabase
        .from('app_issues')
        .insert([
          {
            user_id: user?.id,
            error_message: error.message,
            error_stack: error.stack,
            component_name: errorInfo.componentStack,
            route_path: window.location.pathname,
            browser_info: JSON.stringify(browserInfo),
          },
        ]);

      if (dbError) {
        console.error('Error saving issue:', dbError);
      }
    } catch (err) {
      console.error('Error in error boundary:', err);
    }
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-background">
          <div className="text-center p-8 rounded-lg border border-border">
            <h2 className="text-2xl font-bold mb-4">Something went wrong</h2>
            <p className="text-muted-foreground mb-4">
              We've logged this error and our team will look into it.
            </p>
            <button
              className="bg-primary text-primary-foreground px-4 py-2 rounded hover:bg-primary/90"
              onClick={() => window.location.reload()}
            >
              Refresh Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

// File: src/components/FigureManager.tsx

import React, { useState } from 'react';
import { Figure } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { PlusCircle, Image as ImageIcon } from 'lucide-react';
import { FigureList } from './editor/managers/FigureList';
import { FigureUpload } from './editor/managers/FigureUpload';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useToast } from '@/hooks/use-toast';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './ui/card';
import { ScrollArea } from './ui/scroll-area';

interface FigureManagerProps {
  figures: Figure[];
  onAddFigure: (figure: Figure) => void;
  onRemoveFigure: (id: string) => void;
  onUpdateFigure: (figure: Figure) => void;
}

export const FigureManager = ({
  figures,
  onAddFigure,
  onRemoveFigure,
  onUpdateFigure
}: FigureManagerProps) => {
  const [isAddingFigure, setIsAddingFigure] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const { toast } = useToast();

  console.log('Rendering FigureManager:', { figuresCount: figures?.length });

  const handleFileUpload = async (
    file: File,
    position: 'left' | 'center' | 'right' = 'center',
    customWidth?: number,
    customHeight?: number,
    border?: {
      style: 'single' | 'double' | 'thick' | 'none';
      size: number;
      color: string;
    }
  ) => {
    try {
      const reader = new FileReader();
      reader.onloadend = () => {
        const imageUrl = reader.result as string;
        
        const img = new Image();
        img.onload = () => {
          const newFigure: Figure = {
            id: Date.now().toString(),
            imageUrl,
            title: '',
            caption: '',
            altText: '',
            number: (figures?.length || 0) + 1,
            dimensions: {
              width: customWidth || img.width,
              height: customHeight || img.height
            },
            position,
            border,
          };
          
          console.log('Adding new figure:', newFigure);
          onAddFigure(newFigure);
          setIsAddingFigure(false);
          setPreviewImage(null);
          
          toast({
            title: "Figure Added",
            description: "New figure has been added successfully.",
          });
        };
        img.src = imageUrl;
        setPreviewImage(imageUrl);
      };
      reader.readAsDataURL(file);
    } catch (error) {
      console.error('Error uploading figure:', error);
      toast({
        title: "Error",
        description: "Failed to add figure. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handlePreview = (imageUrl: string) => {
    setSelectedImage(imageUrl);
  };

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className="flex justify-between items-center"
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-full">
            <ImageIcon className="w-5 h-5 text-primary" />
          </div>
          <h3 className="text-lg font-serif font-medium text-primary">Figures</h3>
        </div>
        <Dialog open={isAddingFigure} onOpenChange={setIsAddingFigure}>
          <DialogTrigger asChild>
            <Button
              onClick={() => setIsAddingFigure(true)} 
              variant="outline" 
              size="sm"
              className="gap-2 hover:bg-primary/10 transition-colors"
            >
              <PlusCircle className="w-4 h-4" />
              Add Figure
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Add Figure</DialogTitle>
            </DialogHeader>
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.2 }}
            >
              <FigureUpload
                onUpload={handleFileUpload}
                imageUrl={previewImage || undefined}
                altText="Preview"
              />
            </motion.div>
          </DialogContent>
        </Dialog>
      </motion.div>

      <Dialog open={!!selectedImage} onOpenChange={() => setSelectedImage(null)}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Figure Preview</DialogTitle>
          </DialogHeader>
          <AnimatePresence mode="wait">
            {selectedImage && (
              <motion.img
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.95 }}
                transition={{ duration: 0.2 }}
                src={selectedImage}
                alt="Preview"
                className="w-full h-auto rounded-lg shadow-lg"
              />
            )}
          </AnimatePresence>
        </DialogContent>
      </Dialog>

      <ScrollArea className="h-[600px] pr-4">
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <FigureList
              figures={figures || []}
              onRemove={onRemoveFigure}
              onUpdate={onUpdateFigure}
              onPreview={handlePreview}
            />
          </motion.div>
        </AnimatePresence>
      </ScrollArea>
    </Card>
  );
};

// File: src/components/LanguageSwitcher.tsx

import { Button } from "@/components/ui/button";
import { useLanguage } from "@/contexts/LanguageContext";

export function LanguageSwitcher() {
  const { language, setLanguage } = useLanguage();

  return (
    <div className="flex gap-2">
      <Button
        variant={language === 'en' ? "default" : "outline"}
        size="sm"
        onClick={() => setLanguage('en')}
      >
        EN
      </Button>
      <Button
        variant={language === 'fr' ? "default" : "outline"}
        size="sm"
        onClick={() => setLanguage('fr')}
      >
        FR
      </Button>
      <Button
        variant={language === 'ar' ? "default" : "outline"}
        size="sm"
        onClick={() => setLanguage('ar')}
      >
        ÿπÿ±ÿ®Ÿä
      </Button>
    </div>
  );
}

// File: src/components/MarkdownEditor.tsx

import React from 'react';
import MDEditor, { commands } from '@uiw/react-md-editor';
import { EditorProps } from '@/types/components';
import { Card } from './ui/card';
import { motion } from 'framer-motion';

export const MarkdownEditor: React.FC<EditorProps> = ({ 
  value, 
  onChange, 
  placeholder 
}) => {
  const headingCommands = [
    commands.title1,
    commands.title2,
    commands.title3,
    commands.title4,
    commands.title5,
    commands.title6,
  ];

  const customCommands = [
    ...headingCommands,
    commands.divider,
    commands.bold,
    commands.italic,
    commands.strikethrough,
    commands.hr,
    commands.divider,
    commands.link,
    commands.quote,
    commands.code,
    commands.divider,
    commands.unorderedListCommand,
    commands.orderedListCommand,
    commands.checkedListCommand,
  ];

  console.log('MarkdownEditor rendering with value length:', value?.length);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="overflow-hidden bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl" data-color-mode="light">
        <MDEditor
          value={value}
          onChange={(val) => onChange(val || '')}
          preview="edit"
          height={400}
          className="border-none bg-transparent"
          hideToolbar={false}
          commands={customCommands}
          textareaProps={{
            placeholder,
            className: "focus:outline-none focus:ring-2 focus:ring-primary/20 rounded-md p-4 bg-editor-bg/50",
          }}
          previewOptions={{
            className: "prose prose-sm max-w-none prose-headings:font-serif prose-headings:text-editor-text prose-p:text-editor-text p-4",
            skipHtml: false,
            rehypeRewrite: (node: any) => {
              if (node.type === 'element' && node.tagName === 'a') {
                node.properties = {
                  ...node.properties,
                  target: '_blank',
                  rel: 'noopener noreferrer',
                  className: 'text-primary hover:text-primary/80 transition-colors duration-200'
                };
              }
            }
          }}
        />
      </Card>
    </motion.div>
  );
};

// File: src/components/ReferenceManager.tsx

import React from 'react';
import { Reference } from '@/types/thesis';
import { ReferenceDialog } from './reference/ReferenceDialog';
import { ReferenceCard } from './reference/ReferenceCard';
import { ReferenceManagerProps } from '@/types/components';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './ui/card';
import { ScrollArea } from './ui/scroll-area';
import { BookOpen } from 'lucide-react';

export const ReferenceManager: React.FC<ReferenceManagerProps> = ({
  items,
  onAdd,
  onRemove,
  onUpdate
}) => {
  console.log('ReferenceManager rendering with items:', items);

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className="flex justify-between items-center"
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-full">
            <BookOpen className="w-5 h-5 text-primary" />
          </div>
          <h3 className="text-lg font-serif font-medium text-primary">References</h3>
        </div>
        <ReferenceDialog onAddReference={onAdd} />
      </motion.div>

      <ScrollArea className="h-[600px] pr-4">
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="grid grid-cols-1 md:grid-cols-2 gap-4"
          >
            {items.map((reference, index) => (
              <motion.div
                key={reference.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                transition={{ duration: 0.2, delay: index * 0.1 }}
              >
                <ReferenceCard
                  reference={reference}
                  onRemove={onRemove}
                  onUpdate={onUpdate}
                />
              </motion.div>
            ))}
          </motion.div>
        </AnimatePresence>
      </ScrollArea>
    </Card>
  );
};

// File: src/components/TableManager.tsx

import React from 'react';
import { Table } from '@/types/thesis';
import { TableDialog } from './table/TableDialog';
import { TableCard } from './table/TableCard';
import { ScrollArea } from './ui/scroll-area';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './ui/card';
import { Table as TableIcon } from 'lucide-react';

interface TableManagerProps {
  tables: Table[];
  onUpdateTable: (table: Table) => void;
  onRemoveTable: (id: string) => void;
  onAddTable: (table: Table) => void;
}

export const TableManager: React.FC<TableManagerProps> = ({
  tables,
  onUpdateTable,
  onRemoveTable,
  onAddTable,
}) => {
  console.log('Rendering TableManager with tables:', tables);

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className="flex justify-between items-center"
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-full">
            <TableIcon className="w-5 h-5 text-primary" />
          </div>
          <h3 className="text-lg font-serif font-medium text-primary">Tables</h3>
        </div>
        <TableDialog onAddTable={onAddTable} />
      </motion.div>

      <ScrollArea className="h-[600px] pr-4">
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="grid grid-cols-1 gap-6"
          >
            {tables.map((table, index) => (
              <motion.div
                key={table.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                transition={{ duration: 0.2, delay: index * 0.1 }}
              >
                <TableCard
                  table={table}
                  onUpdate={onUpdateTable}
                  onRemove={onRemoveTable}
                />
              </motion.div>
            ))}
          </motion.div>
        </AnimatePresence>
      </ScrollArea>
    </Card>
  );
};

// File: src/components/ThemeProvider.tsx

import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType>({
  theme: 'light',
  toggleTheme: () => {},
});

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') as Theme || 'light';
    }
    return 'light';
  });

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// File: src/components/ThemeToggle.tsx

import { Moon, Sun } from 'lucide-react';
import { Button } from './ui/button';
import { useTheme } from './ThemeProvider';

export const ThemeToggle = () => {
  const { theme, toggleTheme } = useTheme();

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={toggleTheme}
      className="w-9 h-9 transition-colors"
    >
      {theme === 'light' ? (
        <Moon className="h-4 w-4" />
      ) : (
        <Sun className="h-4 w-4" />
      )}
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
};

// File: src/components/ThesisEditor.tsx

import React, { useState, useRef } from 'react';
import { ThesisSidebar } from './ThesisSidebar';
import { Chapter, Section, Thesis } from '@/types/thesis';
import { useThesisAutosave } from '@/hooks/useThesisAutosave';
import { useThesisInitialization } from '@/hooks/useThesisInitialization';
import { useParams } from 'react-router-dom';
import { ThesisCreationModal } from './thesis/ThesisCreationModal';
import { ThesisList } from './thesis/ThesisList';
import { useThesisData } from '@/hooks/useThesisData';
import { Skeleton } from './ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { ThesisEditorHeader } from './thesis/editor/ThesisEditorHeader';
import { ThesisEditorMain } from './thesis/editor/ThesisEditorMain';
import { ThesisEditorStatus } from './thesis/editor/ThesisEditorStatus';
import { useThesisRealtime } from '@/hooks/useThesisRealtime';
import { ChatMessages } from './collaboration/ChatMessages';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from './ui/collapsible';
import { Button } from './ui/button';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { v4 as uuidv4 } from 'uuid';

interface ThesisEditorProps {
  thesisId?: string;
}

export const ThesisEditor: React.FC<ThesisEditorProps> = ({ thesisId: propsThesisId }) => {
  const { thesisId: routeThesisId } = useParams();
  const currentThesisId = propsThesisId || routeThesisId;
  const { toast } = useToast();
  
  const { thesis, setThesis, isLoading, error } = useThesisData(currentThesisId);
  const [activeSection, setActiveSection] = useState<string>('');
  const [showPreview, setShowPreview] = useState(false);
  const [showChat, setShowChat] = useState(true);
  const [showTracker, setShowTracker] = useState(true);
  const previewRef = useRef<HTMLDivElement>(null);

  useThesisAutosave(thesis);
  useThesisInitialization(thesis);
  useThesisRealtime(currentThesisId, thesis, setThesis);

  const handleContentChange = (id: string, content: string) => {
    if (!thesis) return;
    
    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === id ? { ...section, content } : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === id ? { ...section, content } : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === id ? { ...section, content } : section
      )
    }));
  };

  const handleTitleChange = (id: string, title: string) => {
    if (!thesis) return;

    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === id ? { ...section, title } : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === id ? { ...section, title } : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === id ? { ...section, title } : section
      )
    }));
  };

  const handleUpdateSectionData = (updatedSection: Section) => {
    if (!thesis) return;
    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === updatedSection.id ? updatedSection : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === updatedSection.id ? updatedSection : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === updatedSection.id ? updatedSection : section
      )
    }));
  };

  const handleAddSectionTask = (sectionId: string) => {
    if (!thesis) return;
    const newTask = {
      id: uuidv4(),
      description: 'New Task',
      status: 'pending' as const,
      priority: 'medium' as const
    };

    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === sectionId ? { ...section, tasks: [...(section.tasks || []), newTask] } : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === sectionId ? { ...section, tasks: [...(section.tasks || []), newTask] } : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === sectionId ? { ...section, tasks: [...(section.tasks || []), newTask] } : section
      )
    }));
  };

  const handleUpdateSectionTask = (sectionId: string, taskId: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => {
    if (!thesis) return;
    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === sectionId ? {
          ...section,
          tasks: section.tasks.map(task =>
            task.id === taskId ? { ...task, status } : task
          )
        } : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === sectionId ? {
            ...section,
            tasks: section.tasks.map(task =>
              task.id === taskId ? { ...task, status } : task
            )
          } : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === sectionId ? {
          ...section,
          tasks: section.tasks.map(task =>
            task.id === taskId ? { ...task, status } : task
          )
        } : section
      )
    }));
  };

  const handleChangeSectionTaskDescription = (sectionId: string, taskId: string, newDescription: string) => {
    if (!thesis) return;
    setThesis(prevThesis => ({
      ...prevThesis!,
      frontMatter: prevThesis!.frontMatter.map(section =>
        section.id === sectionId ? {
          ...section,
          tasks: section.tasks.map(task =>
            task.id === taskId ? { ...task, description: newDescription } : task
          )
        } : section
      ),
      chapters: prevThesis!.chapters.map(chapter => ({
        ...chapter,
        sections: chapter.sections.map(section =>
          section.id === sectionId ? {
            ...section,
            tasks: section.tasks.map(task =>
              task.id === taskId ? { ...task, description: newDescription } : task
            )
          } : section
        )
      })),
      backMatter: prevThesis!.backMatter.map(section =>
        section.id === sectionId ? {
          ...section,
          tasks: section.tasks.map(task =>
            task.id === taskId ? { ...task, description: newDescription } : task
          )
        } : section
      )
    }));
  };

  const calculateProgress = () => {
    if (!thesis) return 0;
    const allSections = [
      ...thesis.frontMatter,
      ...thesis.chapters.flatMap(chapter => chapter.sections),
      ...thesis.backMatter
    ];
    
    const completedSections = allSections.filter(section => 
      section.content && section.content.trim().length > 0
    ).length;
    
    return Math.round((completedSections / allSections.length) * 100);
  };

  const progress = calculateProgress();

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background p-8">
        <div className="max-w-4xl mx-auto space-y-6">
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-64 w-full" />
          <Skeleton className="h-32 w-full" />
        </div>
      </div>
    );
  }

  if (error || (!thesis && currentThesisId)) {
    console.error('Error loading thesis:', error);
    toast({
      title: "Error Loading Thesis",
      description: error?.message || "Could not load thesis. Please try again.",
      variant: "destructive",
    });
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center space-y-4">
          <h2 className="text-2xl font-semibold text-destructive">Error Loading Thesis</h2>
          <p className="text-muted-foreground">{error?.message || "Thesis not found"}</p>
        </div>
      </div>
    );
  }

  if (!thesis && !currentThesisId) {
    return (
      <div className="flex flex-col h-full">
        <div className="flex justify-between p-4 items-center">
          <ThesisCreationModal onThesisCreated={() => {}} />
          <ThesisList />
        </div>
        <div className="flex flex-1 items-center justify-center">
          <p className="text-muted-foreground text-lg">No thesis loaded</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background flex">
      <ThesisSidebar
        sections={[
          ...(thesis?.frontMatter || []),
          ...(thesis?.chapters || []).flatMap(chapter => chapter.sections),
          ...(thesis?.backMatter || [])
        ]}
        activeSection={activeSection}
        onSectionSelect={setActiveSection}
        thesisId={currentThesisId!}
        onUpdateSectionData={handleUpdateSectionData}
        onAddSectionTask={handleAddSectionTask}
        onUpdateSectionTask={handleUpdateSectionTask}
        onChangeSectionTaskDescription={handleChangeSectionTaskDescription}
      />
      
      <div className="flex-1 flex flex-col">
        <ThesisEditorHeader
          thesis={thesis}
          showPreview={showPreview}
          onTogglePreview={() => setShowPreview(!showPreview)}
        />
        
        <div className="px-8 py-4">
          <ThesisEditorStatus
            thesis={thesis}
            thesisId={currentThesisId!}
            progress={progress}
            showTracker={showTracker}
            setShowTracker={setShowTracker}
          />
        </div>

        <ThesisEditorMain
          thesis={thesis}
          activeSection={activeSection}
          showPreview={showPreview}
          previewRef={previewRef}
          onContentChange={handleContentChange}
          onTitleChange={handleTitleChange}
          onUpdateChapter={(chapter: Chapter) => {
            setThesis(prev => ({
              ...prev!,
              chapters: prev!.chapters.map(c =>
                c.id === chapter.id ? chapter : c
              )
            }));
          }}
          onAddChapter={(chapter) => {
            setThesis(prev => ({
              ...prev!,
              chapters: [...(prev?.chapters || []), chapter]
            }));
          }}
        />
      </div>

      <Collapsible
        open={showChat}
        onOpenChange={setShowChat}
        className="fixed bottom-4 right-4 w-[400px] z-50"
      >
        <CollapsibleTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="absolute -top-10 right-0 bg-background shadow-md"
          >
            {showChat ? (
              <ChevronDown className="h-4 w-4" />
            ) : (
              <ChevronUp className="h-4 w-4" />
            )}
          </Button>
        </CollapsibleTrigger>
        <CollapsibleContent>
          {currentThesisId && <ChatMessages thesisId={currentThesisId} />}
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
};

// File: src/components/ThesisPreview.tsx

import React, { useState } from 'react';
import { ScrollArea } from './ui/scroll-area';
import { TitlePage } from './thesis/preview/TitlePage';
import { FrenchTitlePage } from './thesis/preview/FrenchTitlePage';
import { AbstractSection } from './thesis/preview/AbstractSection';
import { ContentSection } from './thesis/preview/ContentSection';
import { Button } from './ui/button';
import { FileDown, Maximize2, Minimize2, ZoomIn, ZoomOut } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { usePDF } from 'react-to-pdf';
import { cn } from '@/lib/utils';
import { Slider } from './ui/slider';

interface ThesisPreviewProps {
  thesis: any;
  language?: 'en' | 'fr';
}

export const ThesisPreview: React.FC<ThesisPreviewProps> = ({ thesis, language = 'en' }) => {
  const { toast } = useToast();
  const { toPDF, targetRef } = usePDF({
    filename: `${thesis.frontMatter[0]?.title || 'thesis'}.pdf`,
    page: { 
      margin: 20,
      format: 'a4',
    }
  });
  const [isFullScreen, setIsFullScreen] = React.useState(false);
  const [previewWidth, setPreviewWidth] = useState(210); // Default A4 width in mm

  const handleExport = async () => {
    try {
      await toPDF();
      toast({
        title: "Success",
        description: "PDF exported successfully",
      });
    } catch (error) {
      console.error('PDF export error:', error);
      toast({
        title: "Error",
        description: "Failed to export PDF",
        variant: "destructive",
      });
    }
  };

  const toggleFullScreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen().catch((err) => {
        console.error(`Error attempting to enable full-screen mode: ${err.message}`);
      });
      setIsFullScreen(true);
    } else {
      document.exitFullscreen();
      setIsFullScreen(false);
    }
  };

  React.useEffect(() => {
    const handleFullScreenChange = () => {
      setIsFullScreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullScreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullScreenChange);
  }, []);

  const handleWidthChange = (value: number[]) => {
    setPreviewWidth(value[0]);
  };

  const adjustWidth = (increment: boolean) => {
    setPreviewWidth(prev => {
      const newWidth = increment ? prev + 10 : prev - 10;
      return Math.min(Math.max(newWidth, 150), 300); // Min 150mm, Max 300mm
    });
  };

  return (
    <div className="relative bg-background min-h-screen">
      <div className="sticky top-0 z-10 bg-background p-4 border-b shadow-sm">
        <div className="flex justify-between items-center mb-4">
          <Button onClick={handleExport} className="w-full sm:w-auto">
            <FileDown className="w-4 h-4 mr-2" />
            Export to PDF
          </Button>
          <div className="flex items-center gap-2">
            <Button onClick={() => adjustWidth(false)} variant="outline" size="icon">
              <ZoomOut className="h-4 w-4" />
            </Button>
            <Button onClick={() => adjustWidth(true)} variant="outline" size="icon">
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button onClick={toggleFullScreen} variant="outline" size="icon">
              {isFullScreen ? (
                <Minimize2 className="h-4 w-4" />
              ) : (
                <Maximize2 className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
        <div className="flex items-center gap-4 px-4">
          <span className="text-sm text-muted-foreground w-16">Width: {previewWidth}mm</span>
          <Slider
            value={[previewWidth]}
            onValueChange={handleWidthChange}
            min={150}
            max={300}
            step={5}
            className="w-full max-w-xs"
          />
        </div>
      </div>
      
      <ScrollArea className="h-[calc(100vh-8rem)]">
        <div 
          ref={targetRef} 
          className={cn(
            "thesis-preview mx-auto py-8 px-4",
            "bg-white shadow-md"
          )}
          style={{ width: `${previewWidth}mm` }}
        >
          {/* Title Page */}
          <div className="mb-8 bg-white rounded-lg overflow-hidden thesis-page">
            {language === 'en' ? (
              <TitlePage metadata={thesis.metadata} titleSection={thesis.frontMatter[0]} />
            ) : (
              <FrenchTitlePage thesis={thesis} titleSection={thesis.frontMatter[0]} />
            )}
          </div>
          
          {/* Front Matter */}
          {thesis.frontMatter.map((section: any, index: number) => (
            <div 
              key={section.id} 
              className="thesis-page"
            >
              {section.type === 'abstract' ? (
                <AbstractSection abstractSection={section} />
              ) : (
                <ContentSection 
                  section={section}
                  elementPositions={[]}
                  onElementClick={() => {}}
                  onPositionChange={() => {}}
                />
              )}
            </div>
          ))}
          
          {/* Chapters */}
          {thesis.chapters.map((chapter: any) => (
            <React.Fragment key={chapter.id}>
              {chapter.sections.map((section: any) => (
                <div 
                  key={section.id} 
                  className="thesis-page"
                >
                  <ContentSection
                    section={section}
                    chapterTitle={chapter.title}
                    elementPositions={[]}
                    onElementClick={() => {}}
                    onPositionChange={() => {}}
                  />
                </div>
              ))}
            </React.Fragment>
          ))}
          
          {/* Back Matter */}
          {thesis.backMatter.map((section: any) => (
            <div 
              key={section.id} 
              className="thesis-page"
            >
              <ContentSection
                section={section}
                elementPositions={[]}
                onElementClick={() => {}}
                onPositionChange={() => {}}
              />
            </div>
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};

// File: src/components/ThesisSidebar.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { TableOfContents } from '@/components/thesis/sidebar/TableOfContents';
import { cn } from '@/lib/utils';
import { supabase } from '@/integrations/supabase/client';
import { ThesisPlan } from './sidebar/ThesisPlan';
import { Button } from './ui/button';

interface ThesisSidebarProps {
  sections: Section[];
  activeSection: string;
  onSectionSelect: (id: string) => void;
  thesisId: string;
  onUpdateSectionData: (section: Section) => void;
  onAddSectionTask: (sectionId: string) => void;
  onUpdateSectionTask: (sectionId: string, taskId: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => void;
  onChangeSectionTaskDescription: (sectionId: string, taskId: string, newDescription: string) => void;
}

export const ThesisSidebar: React.FC<ThesisSidebarProps> = ({
  sections = [],
  activeSection,
  onSectionSelect,
  thesisId,
  onUpdateSectionData,
  onAddSectionTask,
  onUpdateSectionTask,
  onChangeSectionTaskDescription,
}) => {
  const [openSections, setOpenSections] = React.useState<string[]>(['frontMatter', 'mainContent', 'backMatter', 'figures', 'tables']);
  const [collaboratorLocations, setCollaboratorLocations] = React.useState<Record<string, any>>({});
    const [activeTab, setActiveTab] = React.useState('content');
  const presenceChannel = React.useRef<any>(null);

  React.useEffect(() => {
    if (!thesisId) return;

    // Set up presence channel
    presenceChannel.current = supabase.channel(`thesis:${thesisId}`);
    
    presenceChannel.current
      .on('presence', { event: 'sync' }, () => {
        const state = presenceChannel.current?.presenceState() || {};
        console.log('Presence state updated:', state);
        setCollaboratorLocations(state);
      })
      .on('presence', { event: 'join' }, ({ key, newPresences }) => {
        console.log('User joined:', key, newPresences);
      })
      .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
        console.log('User left:', key, leftPresences);
      })
      .subscribe(async (status: string) => {
        if (status === 'SUBSCRIBED') {
          const { data: { user } } = await supabase.auth.getUser();
          if (!user) return;

          // Track user's current section
          await presenceChannel.current?.track({
            user_id: user.id,
            email: user.email,
            section_id: activeSection,
            online_at: new Date().toISOString(),
          });
        }
      });

    return () => {
      if (presenceChannel.current) {
        supabase.removeChannel(presenceChannel.current);
      }
    };
  }, [thesisId]);

  // Update presence when active section changes
  React.useEffect(() => {
    const updatePresence = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user || !presenceChannel.current) return;

      await presenceChannel.current?.track({
        user_id: user.id,
        email: user.email,
        section_id: activeSection,
        online_at: new Date().toISOString(),
      });
    };

    updatePresence();
  }, [activeSection]);

  // Group sections by type
  const validSections = Array.isArray(sections) ? sections.filter(section => 
    section && typeof section === 'object' && 'id' in section && 'title' in section
  ) : [];

  return (
    <aside className="w-64 h-full bg-editor-bg border-r border-editor-border">
      <div className="sticky top-0 z-10 bg-editor-bg border-b border-editor-border p-4">
        <h2 className="text-lg font-serif font-medium text-editor-text">Contents</h2>
      </div>
      <div className="p-4 space-y-4">
        <div className="flex gap-2">
          <Button 
            variant={activeTab === 'content' ? 'default' : 'outline'} 
            size="sm" 
            onClick={() => setActiveTab('content')}
          >
            Contents
          </Button>
          <Button 
            variant={activeTab === 'plan' ? 'default' : 'outline'} 
            size="sm" 
            onClick={() => setActiveTab('plan')}
          >
            Plan
          </Button>
        </div>
        {activeTab === 'content' && (
          <TableOfContents
            sections={validSections}
            activeSection={activeSection}
            onSectionSelect={onSectionSelect}
            thesisId={thesisId}
            onUpdateSectionData={onUpdateSectionData}
            onAddSectionTask={onAddSectionTask}
            onUpdateSectionTask={onUpdateSectionTask}
            onChangeSectionTaskDescription={onChangeSectionTaskDescription}
          />
        )}
        {activeTab === 'plan' && (
          <ThesisPlan
            sections={validSections}
            activeSection={activeSection}
            onSectionSelect={onSectionSelect}
            onUpdateSectionData={onUpdateSectionData}
          />
        )}
      </div>
    </aside>
  );
};


// File: src/components/admin/ActivityLog.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
} from 'recharts';
import { Users, MessageSquare, BookOpen, Activity, MousePointer, ScrollText } from 'lucide-react';

export const ActivityLog = () => {
  // Query for activity metrics
  const { data: metrics, isLoading: metricsLoading } = useQuery({
    queryKey: ['activity-metrics'],
    queryFn: async () => {
      console.log('Fetching activity metrics...');
      
      // Get total users
      const { count: totalUsers } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });

      // Get active users (users with activity in the last 7 days)
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      const { count: activeUsers } = await supabase
        .from('active_sessions')
        .select('*', { count: 'exact', head: true })
        .gt('last_seen', sevenDaysAgo.toISOString());

      // Get total messages
      const { count: totalMessages } = await supabase
        .from('chat_messages')
        .select('*', { count: 'exact', head: true });

      // Get total clicks
      const { count: totalClicks } = await supabase
        .from('user_interactions')
        .select('*', { count: 'exact', head: true })
        .eq('event_type', 'click');

      // Get total page visits
      const { count: totalPageVisits } = await supabase
        .from('user_interactions')
        .select('*', { count: 'exact', head: true })
        .eq('event_type', 'page_visit');

      // Get total scrolls
      const { count: totalScrolls } = await supabase
        .from('user_interactions')
        .select('*', { count: 'exact', head: true })
        .eq('event_type', 'scroll');

      return {
        totalUsers: totalUsers || 0,
        activeUsers: activeUsers || 0,
        totalMessages: totalMessages || 0,
        totalClicks: totalClicks || 0,
        totalPageVisits: totalPageVisits || 0,
        totalScrolls: totalScrolls || 0,
        engagementRate: totalUsers ? Math.round((activeUsers / totalUsers) * 100) : 0
      };
    },
    refetchInterval: 300000, // Refresh every 5 minutes
  });

  // Query for page visits data
  const { data: pageVisitsData } = useQuery({
    queryKey: ['page-visits'],
    queryFn: async () => {
      const { data } = await supabase
        .from('user_interactions')
        .select('page_path, count')
        .eq('event_type', 'page_visit')
        .select('page_path, created_at');

      // Process data to get visits per page
      const pageVisits = (data || []).reduce((acc: {[key: string]: number}, item) => {
        acc[item.page_path] = (acc[item.page_path] || 0) + 1;
        return acc;
      }, {});

      return Object.entries(pageVisits).map(([page, visits]) => ({
        page,
        visits
      }));
    }
  });

  // Query for click heatmap data
  const { data: clickData } = useQuery({
    queryKey: ['click-data'],
    queryFn: async () => {
      const { data } = await supabase
        .from('user_interactions')
        .select('x_position, y_position')
        .eq('event_type', 'click');

      return data || [];
    }
  });

  if (metricsLoading) {
    return <div>Loading activity data...</div>;
  }

  return (
    <div className="space-y-6">
      {/* Metric Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-blue-100 rounded-full">
              <Users className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Total Users</p>
              <h3 className="text-2xl font-bold">{metrics?.totalUsers}</h3>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-green-100 rounded-full">
              <Activity className="w-6 h-6 text-green-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Active Users (7d)</p>
              <h3 className="text-2xl font-bold">{metrics?.activeUsers}</h3>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-purple-100 rounded-full">
              <MessageSquare className="w-6 h-6 text-purple-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Total Messages</p>
              <h3 className="text-2xl font-bold">{metrics?.totalMessages}</h3>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-yellow-100 rounded-full">
              <MousePointer className="w-6 h-6 text-yellow-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Total Clicks</p>
              <h3 className="text-2xl font-bold">{metrics?.totalClicks}</h3>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-red-100 rounded-full">
              <ScrollText className="w-6 h-6 text-red-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Total Scrolls</p>
              <h3 className="text-2xl font-bold">{metrics?.totalScrolls}</h3>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-orange-100 rounded-full">
              <BookOpen className="w-6 h-6 text-orange-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-muted-foreground">Page Visits</p>
              <h3 className="text-2xl font-bold">{metrics?.totalPageVisits}</h3>
            </div>
          </div>
        </Card>
      </div>

      {/* Page Visits Chart */}
      <Card className="p-6">
        <h2 className="text-2xl font-bold mb-4">Page Visits</h2>
        <div className="h-[300px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={pageVisitsData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="page" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="visits" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card>

      {/* Activity Chart */}
      <Card className="p-6">
        <h2 className="text-2xl font-bold mb-4">System Activity</h2>
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={[]} // Keep existing chart data
              margin={{
                top: 5,
                right: 30,
                left: 20,
                bottom: 5,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey="messages"
                stroke="#8884d8"
                name="Messages"
              />
              <Line
                type="monotone"
                dataKey="thesisActions"
                stroke="#82ca9d"
                name="Thesis Actions"
              />
              <Line
                type="monotone"
                dataKey="feedback"
                stroke="#ffc658"
                name="Feedback"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </Card>
    </div>
  );
};

// File: src/components/admin/AdminDashboard.tsx

import React from 'react';
import { SystemStats } from './SystemStats';
import { SystemTest } from '../testing/SystemTest';
import { FeatureManagement } from './FeatureManagement';
import { UserManagement } from './UserManagement';
import { ThesisManagement } from './ThesisManagement';
import { IssueManagement } from './IssueManagement';
import { FeedbackManagement } from './feedback/FeedbackManagement';
import { ActivityLog } from './ActivityLog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Activity, AlertTriangle, Users, FileText, Bug, Settings, MessageSquare } from 'lucide-react';

export const AdminDashboard = () => {
  console.log('Rendering AdminDashboard');
  
  return (
    <div className="container mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
      
      <SystemStats />
      
      <Tabs defaultValue="features" className="space-y-4">
        <TabsList className="grid grid-cols-7 w-full">
          <TabsTrigger value="features" className="flex items-center gap-2">
            <Settings className="w-4 h-4" />
            Features
          </TabsTrigger>
          <TabsTrigger value="users" className="flex items-center gap-2">
            <Users className="w-4 h-4" />
            Users
          </TabsTrigger>
          <TabsTrigger value="theses" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Theses
          </TabsTrigger>
          <TabsTrigger value="issues" className="flex items-center gap-2">
            <Bug className="w-4 h-4" />
            Issues
          </TabsTrigger>
          <TabsTrigger value="tests" className="flex items-center gap-2">
            <AlertTriangle className="w-4 h-4" />
            System Tests
          </TabsTrigger>
          <TabsTrigger value="activity" className="flex items-center gap-2">
            <Activity className="w-4 h-4" />
            Activity
          </TabsTrigger>
          <TabsTrigger value="feedback" className="flex items-center gap-2">
            <MessageSquare className="w-4 h-4" />
            Feedback
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="features">
          <FeatureManagement />
        </TabsContent>
        
        <TabsContent value="users">
          <UserManagement />
        </TabsContent>
        
        <TabsContent value="theses">
          <ThesisManagement />
        </TabsContent>
        
        <TabsContent value="issues">
          <IssueManagement />
        </TabsContent>
        
        <TabsContent value="tests">
          <SystemTest />
        </TabsContent>
        
        <TabsContent value="activity">
          <ActivityLog />
        </TabsContent>

        <TabsContent value="feedback">
          <FeedbackManagement />
        </TabsContent>
      </Tabs>
    </div>
  );
};

// File: src/components/admin/FeatureManagement.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import {
  Table,
  TableBody,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Settings, Loader2, Clock } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { FeatureDialog } from './features/FeatureDialog';
import { FeatureRow } from './features/FeatureRow';
import { FeaturePricingDialog } from './features/FeaturePricingDialog';
import { TrialSettingsDialog } from './features/TrialSettingsDialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export const FeatureManagement = () => {
  const { toast } = useToast();
  const [selectedFeature, setSelectedFeature] = useState<any>(null);
  const [selectedPricingFeature, setSelectedPricingFeature] = useState<any>(null);
  const [isTrialDialogOpen, setIsTrialDialogOpen] = useState(false);
  const [expandedFeatures, setExpandedFeatures] = useState<Set<string>>(new Set());

  const { data: features, isLoading: featuresLoading, error: featuresError, refetch: refetchFeatures } = useQuery({
    queryKey: ['features'],
    queryFn: async () => {
      console.log('Fetching features from Supabase...');
      const { data, error } = await supabase
        .from('features')
        .select('*')
        .order('name');

      if (error) throw error;
      return data;
    }
  });

  const { data: trialSettings, isLoading: trialLoading, refetch: refetchTrial } = useQuery({
    queryKey: ['trial-settings'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('trial_settings')
        .select('*')
        .single();

      if (error) throw error;
      return data;
    }
  });

  const toggleFeature = async (featureId: string, currentStatus: string) => {
    try {
      const newStatus = currentStatus === 'Active' ? 'Inactive' : 'Active';
      const { error } = await supabase
        .from('features')
        .update({ 
          status: newStatus,
          last_updated: new Date().toISOString()
        })
        .eq('id', featureId);

      if (error) throw error;

      await refetchFeatures();
      
      toast({
        title: "Feature Updated",
        description: `Feature status has been updated to ${newStatus}`,
      });
    } catch (error) {
      console.error('Error updating feature:', error);
      toast({
        title: "Error",
        description: "Failed to update feature status",
        variant: "destructive",
      });
    }
  };

  const updateFeaturePricing = async (featureId: string, pricingTier: string, trialDays?: number) => {
    try {
      console.log('Updating feature pricing:', { featureId, pricingTier, trialDays });
      
      const { error } = await supabase
        .from('features')
        .update({ 
          pricing_tier: pricingTier,
          trial_days: trialDays,
          last_updated: new Date().toISOString()
        })
        .eq('id', featureId);

      if (error) throw error;

      await refetchFeatures();
      
      toast({
        title: "Feature Updated",
        description: `Feature pricing tier has been updated to ${pricingTier}${trialDays ? ` with ${trialDays} days trial` : ''}`,
      });
    } catch (error) {
      console.error('Error updating feature pricing:', error);
      toast({
        title: "Error",
        description: "Failed to update feature pricing",
        variant: "destructive",
      });
    }
  };

  const toggleExpand = (featureId: string) => {
    setExpandedFeatures(prev => {
      const next = new Set(prev);
      if (next.has(featureId)) {
        next.delete(featureId);
      } else {
        next.add(featureId);
      }
      return next;
    });
  };

  if (featuresLoading || trialLoading) {
    return (
      <Card className="w-full h-[400px] flex items-center justify-center">
        <CardContent className="flex flex-col items-center gap-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="text-muted-foreground">Loading...</p>
        </CardContent>
      </Card>
    );
  }

  if (featuresError) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-destructive">Error Loading Features</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            {featuresError instanceof Error ? featuresError.message : 'Failed to load features'}
          </p>
          <Button 
            onClick={() => refetchFeatures()} 
            variant="outline" 
            className="mt-4"
          >
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  const organizedFeatures = features?.reduce((acc: any, feature: any) => {
    if (!feature.parent_id) {
      if (!acc.main) acc.main = [];
      acc.main.push(feature);
    } else {
      if (!acc.sub) acc.sub = {};
      if (!acc.sub[feature.parent_id]) acc.sub[feature.parent_id] = [];
      acc.sub[feature.parent_id].push(feature);
    }
    return acc;
  }, { main: [], sub: {} });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-admin-accent-tertiary">Feature Management</h2>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            className="gap-2 text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
            onClick={() => setIsTrialDialogOpen(true)}
          >
            <Clock className="w-4 h-4" />
            Trial Settings ({trialSettings?.trial_days} days)
          </Button>
          <Button 
            variant="outline" 
            className="gap-2 text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Button>
        </div>
      </div>

      <div className="rounded-lg border border-admin-accent-secondary/30">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="text-admin-accent-tertiary">Feature Name</TableHead>
              <TableHead className="text-admin-accent-tertiary">Status</TableHead>
              <TableHead className="text-admin-accent-tertiary">Health</TableHead>
              <TableHead className="text-admin-accent-tertiary">Usage</TableHead>
              <TableHead className="text-admin-accent-tertiary">Last Updated</TableHead>
              <TableHead className="text-admin-accent-tertiary">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {organizedFeatures?.main.map((feature: any) => (
              <FeatureRow
                key={feature.id}
                feature={feature}
                subFeatures={organizedFeatures.sub[feature.id] || []}
                onToggleFeature={toggleFeature}
                onOpenDialog={setSelectedFeature}
                onOpenPricingDialog={setSelectedPricingFeature}
                expanded={expandedFeatures.has(feature.id)}
                onToggleExpand={() => toggleExpand(feature.id)}
              />
            ))}
          </TableBody>
        </Table>
      </div>

      {selectedFeature && (
        <FeatureDialog
          feature={selectedFeature}
          open={!!selectedFeature}
          onOpenChange={(open) => !open && setSelectedFeature(null)}
        />
      )}

      {selectedPricingFeature && (
        <FeaturePricingDialog
          feature={selectedPricingFeature}
          open={!!selectedPricingFeature}
          onOpenChange={(open) => !open && setSelectedPricingFeature(null)}
          onUpdatePricing={updateFeaturePricing}
        />
      )}

      {isTrialDialogOpen && (
        <TrialSettingsDialog
          open={isTrialDialogOpen}
          onOpenChange={setIsTrialDialogOpen}
          currentTrialDays={trialSettings?.trial_days || 14}
          onUpdate={() => refetchTrial()}
        />
      )}
    </div>
  );
};


// File: src/components/admin/IssueManagement.tsx

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Loader2, RefreshCw } from 'lucide-react';

export const IssueManagement = () => {
  const { data: issues, isLoading, error, refetch } = useQuery({
    queryKey: ['app-issues'],
    queryFn: async () => {
      console.log('Fetching app issues...');
      const { data, error } = await supabase
        .from('app_issues')
        .select(`
          *,
          profiles (
            email
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;
      return data;
    }
  });

  if (isLoading) {
    return (
      <Card className="w-full h-[400px] flex items-center justify-center">
        <CardContent className="flex flex-col items-center gap-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="text-muted-foreground">Loading issues...</p>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-destructive">Error Loading Issues</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            {error instanceof Error ? error.message : 'Failed to load issues'}
          </p>
          <Button 
            onClick={() => refetch()} 
            variant="outline" 
            className="mt-4"
          >
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Application Issues</h2>
        <Button 
          onClick={() => refetch()} 
          variant="outline" 
          className="gap-2"
        >
          <RefreshCw className="w-4 h-4" />
          Refresh
        </Button>
      </div>

      <div className="rounded-lg border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Component</TableHead>
              <TableHead>Error Message</TableHead>
              <TableHead>User</TableHead>
              <TableHead>Browser</TableHead>
              <TableHead>Created At</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {issues?.map((issue) => (
              <TableRow key={issue.id}>
                <TableCell>
                  <Badge variant="outline">
                    {issue.component_name || 'Unknown'}
                  </Badge>
                </TableCell>
                <TableCell className="max-w-md truncate">
                  {issue.error_message}
                </TableCell>
                <TableCell>{issue.profiles?.email || 'Anonymous'}</TableCell>
                <TableCell className="max-w-xs truncate">
                  {issue.browser_info}
                </TableCell>
                <TableCell>
                  {new Date(issue.created_at).toLocaleString()}
                </TableCell>
              </TableRow>
            ))}
            {!issues?.length && (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-8">
                  No issues found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

// File: src/components/admin/SystemStats.tsx

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Users, FileText, AlertTriangle, Activity, Loader2, MessageSquare, MousePointer } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';

export const SystemStats = () => {
  const { data: stats, isLoading, error, refetch } = useQuery({
    queryKey: ['system-stats'],
    queryFn: async () => {
      console.log('Fetching system statistics...');
      
      try {
        // Get total users count
        const { count: usersCount, error: usersError } = await supabase
          .from('profiles')
          .select('*', { count: 'exact', head: true });

        if (usersError) {
          console.error('Error fetching users count:', usersError);
          throw usersError;
        }

        // Get total theses count
        const { count: thesesCount, error: thesesError } = await supabase
          .from('theses')
          .select('*', { count: 'exact', head: true });

        if (thesesError) {
          console.error('Error fetching theses count:', thesesError);
          throw thesesError;
        }

        // Get system issues count
        const { count: issuesCount, error: issuesError } = await supabase
          .from('app_issues')
          .select('*', { count: 'exact', head: true });

        if (issuesError) {
          console.error('Error fetching issues count:', issuesError);
          throw issuesError;
        }

        // Get total feedback count
        const { count: feedbackCount, error: feedbackError } = await supabase
          .from('user_feedback')
          .select('*', { count: 'exact', head: true });

        if (feedbackError) {
          console.error('Error fetching feedback count:', feedbackError);
          throw feedbackError;
        }

        // Get active sessions count
        const { count: activeSessionsCount, error: sessionsError } = await supabase
          .from('active_sessions')
          .select('*', { count: 'exact', head: true });

        if (sessionsError) {
          console.error('Error fetching sessions count:', sessionsError);
          throw sessionsError;
        }

        // Get total chat messages count
        const { count: messagesCount, error: messagesError } = await supabase
          .from('chat_messages')
          .select('*', { count: 'exact', head: true });

        if (messagesError) {
          console.error('Error fetching messages count:', messagesError);
          throw messagesError;
        }

        // Calculate system health (example metric: 100 - (issues/users * 100))
        const healthPercentage = usersCount 
          ? Math.max(0, Math.min(100, 100 - (issuesCount / usersCount * 100)))
          : 100;

        // Calculate engagement rate (messages per user)
        const engagementRate = usersCount 
          ? (messagesCount / usersCount).toFixed(1)
          : '0';

        console.log('System statistics fetched:', {
          usersCount,
          thesesCount,
          issuesCount,
          healthPercentage,
          activeSessionsCount,
          messagesCount,
          engagementRate
        });

        return {
          users: usersCount || 0,
          theses: thesesCount || 0,
          issues: issuesCount || 0,
          health: healthPercentage.toFixed(1),
          activeSessions: activeSessionsCount || 0,
          messages: messagesCount || 0,
          engagement: engagementRate,
          feedback: feedbackCount || 0
        };
      } catch (error) {
        console.error('Error fetching system stats:', error);
        throw error;
      }
    },
    refetchInterval: 30000, // Refresh every 30 seconds
    retry: 3,
    staleTime: 10000,
  });

  if (error) {
    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card className="col-span-full">
          <CardContent className="pt-6">
            <div className="text-center text-destructive">
              <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
              <p>Error loading system statistics</p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => refetch()}
                className="mt-2"
              >
                Retry
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  const StatCard = ({ 
    title, 
    value, 
    description, 
    icon: Icon 
  }: { 
    title: string;
    value: string | number;
    description: string;
    icon: React.ElementType;
  }) => (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">
          {title}
        </CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">
          {isLoading ? (
            <div className="flex items-center space-x-2">
              <Loader2 className="h-4 w-4 animate-spin" />
              <span className="text-muted">Loading...</span>
            </div>
          ) : value}
        </div>
        <p className="text-xs text-muted-foreground">
          {description}
        </p>
      </CardContent>
    </Card>
  );

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <StatCard
        title="Total Users"
        value={stats?.users || 0}
        description="Active system users"
        icon={Users}
      />
      <StatCard
        title="Active Sessions"
        value={stats?.activeSessions || 0}
        description="Currently active users"
        icon={MousePointer}
      />
      <StatCard
        title="Messages"
        value={stats?.messages || 0}
        description={`${stats?.engagement || 0} msgs/user`}
        icon={MessageSquare}
      />
      <StatCard
        title="System Health"
        value={`${stats?.health || 0}%`}
        description="Overall system status"
        icon={Activity}
      />
      <StatCard
        title="Total Theses"
        value={stats?.theses || 0}
        description="Total theses in system"
        icon={FileText}
      />
      <StatCard
        title="System Issues"
        value={stats?.issues || 0}
        description="Reported issues"
        icon={AlertTriangle}
      />
      <StatCard
        title="User Feedback"
        value={stats?.feedback || 0}
        description="Feedback submissions"
        icon={MessageSquare}
      />
      <StatCard
        title="Engagement Rate"
        value={`${stats?.engagement || 0}`}
        description="Messages per user"
        icon={Activity}
      />
    </div>
  );
};

// File: src/components/admin/ThesisManagement.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Eye, Trash2 } from 'lucide-react';

export const ThesisManagement = () => {
  const [theses, setTheses] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    fetchTheses();
  }, []);

  const fetchTheses = async () => {
    try {
      const { data, error } = await supabase
        .from('theses')
        .select(`
          *,
          thesis_collaborators (
            user_id,
            role,
            profiles (
              email
            )
          )
        `);

      if (error) throw error;
      setTheses(data || []);
    } catch (error: any) {
      console.error('Error fetching theses:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch theses',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (thesisId: string) => {
    try {
      const { error } = await supabase
        .from('theses')
        .delete()
        .eq('id', thesisId);

      if (error) throw error;

      toast({
        title: 'Success',
        description: 'Thesis deleted successfully',
      });
      fetchTheses();
    } catch (error: any) {
      console.error('Error deleting thesis:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete thesis',
        variant: 'destructive',
      });
    }
  };

  const viewThesis = (thesisId: string) => {
    navigate(`/thesis/${thesisId}`);
  };

  if (loading) {
    return <div>Loading theses...</div>;
  }

  return (
    <div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Title</TableHead>
            <TableHead>Owner</TableHead>
            <TableHead>Created At</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {theses.map((thesis) => (
            <TableRow key={thesis.id}>
              <TableCell>{thesis.title}</TableCell>
              <TableCell>
                {thesis.thesis_collaborators?.find((tc: any) => tc.role === 'owner')?.profiles?.email || 'No owner'}
              </TableCell>
              <TableCell>
                {new Date(thesis.created_at).toLocaleDateString()}
              </TableCell>
              <TableCell className="space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => viewThesis(thesis.id)}
                >
                  <Eye className="w-4 h-4" />
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => handleDelete(thesis.id)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

// File: src/components/admin/UserManagement.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from '@/components/ui/badge';
import { Shield, ShieldCheck, User, Settings, UserPlus } from 'lucide-react';

export const UserManagement = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [roles, setRoles] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    fetchUsers();
    fetchRoles();
  }, []);

  const fetchRoles = async () => {
    try {
      const { data, error } = await supabase
        .from('roles')
        .select('*');

      if (error) throw error;
      setRoles(data || []);
    } catch (error: any) {
      console.error('Error fetching roles:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch roles',
        variant: 'destructive',
      });
    }
  };

  const fetchUsers = async () => {
    try {
      console.log('Fetching users...');
      const { data, error } = await supabase
        .from('profiles')
        .select(`
          *,
          roles (
            name
          )
        `);

      if (error) throw error;
      console.log('Users fetched:', data);
      setUsers(data || []);
    } catch (error: any) {
      console.error('Error fetching users:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch users',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const updateUserRole = async (userId: string, roleId: string) => {
    try {
      console.log('Updating user role...', { userId, roleId });
      const { error } = await supabase
        .from('profiles')
        .update({ role_id: roleId })
        .eq('id', userId);

      if (error) throw error;

      toast({
        title: 'Success',
        description: 'User role updated successfully',
      });
      fetchUsers();
    } catch (error: any) {
      console.error('Error updating user role:', error);
      toast({
        title: 'Error',
        description: 'Failed to update user role',
        variant: 'destructive',
      });
    }
  };

  const getRoleBadgeColor = (roleName: string) => {
    switch (roleName) {
      case 'admin':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'user':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center p-8">Loading users...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-admin-accent-tertiary">User Management</h2>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            className="gap-2 text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
          >
            <UserPlus className="w-4 h-4" />
            Add User
          </Button>
          <Button 
            variant="outline" 
            className="gap-2 text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Button>
        </div>
      </div>
      
      <div className="rounded-md border border-admin-accent-secondary/30">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="text-admin-accent-tertiary">User</TableHead>
              <TableHead className="text-admin-accent-tertiary">Current Role</TableHead>
              <TableHead className="text-admin-accent-tertiary">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id} className="hover:bg-muted/50">
                <TableCell className="font-medium">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-admin-accent-primary" />
                    {user.email}
                  </div>
                </TableCell>
                <TableCell>
                  <Badge 
                    variant="secondary"
                    className={`${getRoleBadgeColor(user.roles?.name)} flex w-fit items-center gap-1`}
                  >
                    {user.roles?.name === 'admin' ? (
                      <ShieldCheck className="h-3 w-3" />
                    ) : (
                      <Shield className="h-3 w-3" />
                    )}
                    {user.roles?.name || 'No role'}
                  </Badge>
                </TableCell>
                <TableCell>
                  <Select
                    onValueChange={(value) => updateUserRole(user.id, value)}
                    defaultValue={user.role_id || ''}
                  >
                    <SelectTrigger className="w-[180px] border-admin-accent-primary/20 text-admin-accent-primary">
                      <SelectValue placeholder="Select a role" />
                    </SelectTrigger>
                    <SelectContent>
                      {roles.map((role) => (
                        <SelectItem key={role.id} value={role.id}>
                          {role.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

// File: src/components/admin/features/FeatureDialog.tsx

import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";

interface FeatureDialogProps {
  feature: {
    name: string;
    description: string | null;
    status: string;
    health: string;
    usage_data: Record<string, string | number>;
    is_sub_feature: boolean;
  };
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const FeatureDialog = ({ feature, open, onOpenChange }: FeatureDialogProps) => {
  const formatUsageData = (data: Record<string, string | number> | null) => {
    if (!data) return null;
    return Object.entries(data).map(([key, value]) => (
      <div key={key} className="flex justify-between items-center py-1">
        <span className="text-sm font-medium capitalize">{key.replace(/_/g, ' ')}</span>
        <Badge variant="secondary">{value}</Badge>
      </div>
    ));
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <div className="flex items-center gap-2">
            <DialogTitle>{feature.name}</DialogTitle>
            {feature.is_sub_feature && (
              <Badge variant="outline">Sub-feature</Badge>
            )}
          </div>
          <DialogDescription>
            {feature.description || 'No description available'}
          </DialogDescription>
        </DialogHeader>
        <ScrollArea className="max-h-[60vh]">
          <div className="space-y-4">
            <div>
              <h4 className="font-semibold mb-2">Status</h4>
              <Badge 
                variant={feature.status === 'Active' ? 'default' : 'secondary'}
              >
                {feature.status}
              </Badge>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Health</h4>
              <Badge 
                variant={feature.health === 'healthy' ? 'default' : 'destructive'}
              >
                {feature.health}
              </Badge>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Usage Statistics</h4>
              <div className="bg-muted rounded-lg p-3">
                {formatUsageData(feature.usage_data) || (
                  <p className="text-sm text-muted-foreground">No usage data available</p>
                )}
              </div>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/admin/features/FeaturePricingDialog.tsx

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { AlertTriangle, Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';

interface FeaturePricingDialogProps {
  feature: {
    id: string;
    name: string;
    pricing_tier: string;
    trial_days?: number;
  };
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onUpdatePricing: (featureId: string, pricingTier: string, trialDays?: number) => Promise<void>;
}

export const FeaturePricingDialog = ({ 
  feature, 
  open, 
  onOpenChange,
  onUpdatePricing 
}: FeaturePricingDialogProps) => {
  const [selectedTier, setSelectedTier] = useState(feature.pricing_tier);
  const [trialDays, setTrialDays] = useState<number>(feature.trial_days || 14);
  const [isUpdating, setIsUpdating] = useState(false);

  const handleUpdate = async () => {
    try {
      setIsUpdating(true);
      await onUpdatePricing(
        feature.id, 
        selectedTier, 
        selectedTier === 'trial' ? trialDays : undefined
      );
      onOpenChange(false);
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Update Feature Pricing</DialogTitle>
          <DialogDescription>
            Set the pricing tier for {feature.name}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          {selectedTier !== feature.pricing_tier && (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Changing pricing tier will affect all users' access to this feature.
                {selectedTier === 'paid' 
                  ? " Users will need to upgrade their subscription."
                  : " Feature will become available to all users."}
              </AlertDescription>
            </Alert>
          )}
          <RadioGroup
            value={selectedTier}
            onValueChange={setSelectedTier}
            className="grid gap-4"
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="free" id="free" />
              <Label htmlFor="free">Free Tier</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="paid" id="paid" />
              <Label htmlFor="paid">Paid Tier</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="trial" id="trial" />
              <Label htmlFor="trial">Trial</Label>
            </div>
          </RadioGroup>
          
          {selectedTier === 'trial' && (
            <div className="space-y-2">
              <Label htmlFor="trialDays">Trial Period (days)</Label>
              <Input
                id="trialDays"
                type="number"
                value={trialDays}
                onChange={(e) => setTrialDays(parseInt(e.target.value))}
                min={1}
                max={90}
              />
            </div>
          )}
        </div>
        <div className="flex justify-end gap-2">
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
          >
            Cancel
          </Button>
          <Button
            onClick={handleUpdate}
            disabled={isUpdating || selectedTier === feature.pricing_tier}
          >
            {isUpdating ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin mr-2" />
                Updating...
              </>
            ) : (
              'Update'
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/admin/features/FeatureRow.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { TableCell, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, CheckCircle, ChevronRight, ChevronDown, Loader2 } from 'lucide-react';

interface FeatureRowProps {
  feature: {
    id: string;
    name: string;
    description: string | null;
    status: string;
    health: string;
    usage_data: any;
    last_updated: string;
    is_sub_feature: boolean;
    pricing_tier: string;
  };
  subFeatures: any[];
  level?: number;
  onToggleFeature: (featureId: string, currentStatus: string) => Promise<void>;
  onOpenDialog: (feature: any) => void;
  onOpenPricingDialog: (feature: any) => void;
  expanded: boolean;
  onToggleExpand: () => void;
}

export const FeatureRow = ({
  feature,
  subFeatures,
  level = 0,
  onToggleFeature,
  onOpenDialog,
  onOpenPricingDialog,
  expanded,
  onToggleExpand,
}: FeatureRowProps) => {
  const [isUpdating, setIsUpdating] = useState(false);

  const getStatusBadge = (status: string) => {
    const variants: { [key: string]: string } = {
      'Active': 'bg-green-500',
      'In Development': 'bg-blue-500',
      'Beta': 'bg-yellow-500',
      'Inactive': 'bg-gray-500'
    };
    return (
      <Badge className={`${variants[status] || 'bg-gray-500'} text-white`}>
        {status}
      </Badge>
    );
  };

  const getHealthIcon = (health: string) => {
    if (health === 'healthy') {
      return <CheckCircle className="text-green-500 w-5 h-5" />;
    }
    return <AlertTriangle className="text-yellow-500 w-5 h-5" />;
  };

  const handleToggleFeature = async (featureId: string, currentStatus: string) => {
    try {
      setIsUpdating(true);
      await onToggleFeature(featureId, currentStatus);
    } finally {
      setIsUpdating(false);
    }
  };

  const formatUsageData = (usageData: any) => {
    if (!usageData) return 'N/A';
    
    const entries = Object.entries(usageData);
    for (const [key, value] of entries) {
      if (typeof value === 'number') {
        return value.toString();
      }
      if (typeof value === 'string' && value.includes('%')) {
        return value;
      }
    }
    
    return entries[0]?.[1]?.toString() || 'N/A';
  };

  const hasSubFeatures = subFeatures.length > 0;

  return (
    <>
      <TableRow className={level > 0 ? 'bg-gray-50' : ''}>
        <TableCell className="font-medium">
          <div className="flex items-center gap-2" style={{ paddingLeft: `${level * 20}px` }}>
            {hasSubFeatures && (
              <Button
                variant="ghost"
                size="sm"
                className="p-0 h-6 w-6 text-admin-accent-primary hover:text-admin-accent-secondary"
                onClick={onToggleExpand}
              >
                {expanded ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronRight className="h-4 w-4" />
                )}
              </Button>
            )}
            <Button 
              variant="link" 
              className="p-0 text-admin-accent-primary hover:text-admin-accent-secondary transition-colors"
              onClick={() => onOpenDialog(feature)}
            >
              {feature.name}
            </Button>
          </div>
        </TableCell>
        <TableCell>{getStatusBadge(feature.status)}</TableCell>
        <TableCell>{getHealthIcon(feature.health)}</TableCell>
        <TableCell>{formatUsageData(feature.usage_data)}</TableCell>
        <TableCell>{new Date(feature.last_updated).toLocaleDateString()}</TableCell>
        <TableCell>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleToggleFeature(feature.id, feature.status)}
              disabled={isUpdating}
              className="text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
            >
              {isUpdating ? (
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
              ) : null}
              Toggle Status
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onOpenPricingDialog(feature)}
              className="text-admin-accent-primary hover:text-admin-accent-secondary border-admin-accent-primary/20 hover:border-admin-accent-secondary/40"
            >
              {feature.pricing_tier === 'paid' ? 'üíé Paid' : 'üÜì Free'}
            </Button>
          </div>
        </TableCell>
      </TableRow>
      {expanded && hasSubFeatures && subFeatures.map((subFeature) => (
        <FeatureRow
          key={subFeature.id}
          feature={subFeature}
          subFeatures={[]}
          level={level + 1}
          onToggleFeature={onToggleFeature}
          onOpenDialog={onOpenDialog}
          onOpenPricingDialog={onOpenPricingDialog}
          expanded={false}
          onToggleExpand={() => {}}
        />
      ))}
    </>
  );
};

// File: src/components/admin/features/TrialSettingsDialog.tsx

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

interface TrialSettings {
  id: string;
  trial_days: number;
  created_at: string;
  updated_at: string;
}

interface TrialSettingsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  currentTrialDays: number;
  onUpdate: () => Promise<any>;
}

export const TrialSettingsDialog: React.FC<TrialSettingsDialogProps> = ({
  open,
  onOpenChange,
  currentTrialDays,
  onUpdate,
}) => {
  const [trialDays, setTrialDays] = useState<number>(currentTrialDays);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onUpdate();
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Update Trial Settings</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="trialDays" className="text-sm font-medium">
              Trial Days
            </label>
            <Input
              id="trialDays"
              type="number"
              value={trialDays}
              onChange={(e) => setTrialDays(Number(e.target.value))}
              min={1}
              max={90}
            />
          </div>
          <div className="flex justify-end gap-2">
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit">Update</Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/admin/feedback/FeedbackManagement.tsx

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card } from '@/components/ui/card';
import { Loader2 } from 'lucide-react';

export const FeedbackManagement = () => {
  const { data: feedback, isLoading } = useQuery({
    queryKey: ['feedback'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('user_feedback')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      return data;
    }
  });

  if (isLoading) {
    return (
      <Card className="w-full h-[400px] flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">User Feedback</h2>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Email</TableHead>
            <TableHead>Message</TableHead>
            <TableHead>Rating</TableHead>
            <TableHead>Date</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {feedback?.map((item) => (
            <TableRow key={item.id}>
              <TableCell>{item.email}</TableCell>
              <TableCell>{item.message}</TableCell>
              <TableCell>{item.rating ? `${item.rating}/5` : 'N/A'}</TableCell>
              <TableCell>
                {new Date(item.created_at).toLocaleDateString()}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

// File: src/components/admin/issues/IssueDetailsDialog.tsx

import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from '@/components/ui/button';

interface IssueDetailsDialogProps {
  issue: any;
}

export const IssueDetailsDialog = ({ issue }: IssueDetailsDialogProps) => {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          View Details
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Issue Details</DialogTitle>
        </DialogHeader>
        <ScrollArea className="h-[400px] w-full rounded-md border p-4">
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold">Error Message</h3>
              <p className="text-sm">{issue.error_message}</p>
            </div>
            {issue.error_stack && (
              <div>
                <h3 className="font-semibold">Stack Trace</h3>
                <pre className="text-sm bg-muted p-2 rounded overflow-x-auto">
                  {issue.error_stack}
                </pre>
              </div>
            )}
            {issue.component_name && (
              <div>
                <h3 className="font-semibold">Component</h3>
                <pre className="text-sm bg-muted p-2 rounded">
                  {issue.component_name}
                </pre>
              </div>
            )}
            {issue.browser_info && (
              <div>
                <h3 className="font-semibold">Browser Information</h3>
                <pre className="text-sm bg-muted p-2 rounded overflow-x-auto">
                  {JSON.stringify(JSON.parse(issue.browser_info), null, 2)}
                </pre>
              </div>
            )}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/admin/issues/IssueTable.tsx

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { IssueDetailsDialog } from './IssueDetailsDialog';

interface IssueTableProps {
  issues: any[];
  formatDate: (date: string) => string;
}

export const IssueTable = ({ issues, formatDate }: IssueTableProps) => {
  const getStatusBadge = (error: any) => {
    if (error.error_stack?.includes('TypeError')) {
      return <Badge variant="destructive">Type Error</Badge>;
    }
    if (error.error_stack?.includes('ReferenceError')) {
      return <Badge variant="destructive">Reference Error</Badge>;
    }
    if (error.error_stack?.includes('SyntaxError')) {
      return <Badge variant="destructive">Syntax Error</Badge>;
    }
    return <Badge variant="secondary">Runtime Error</Badge>;
  };

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Status</TableHead>
          <TableHead>User</TableHead>
          <TableHead>Error Message</TableHead>
          <TableHead>Component</TableHead>
          <TableHead>Route</TableHead>
          <TableHead>Date</TableHead>
          <TableHead>Details</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {issues.map((issue) => (
          <TableRow key={issue.id}>
            <TableCell>{getStatusBadge(issue)}</TableCell>
            <TableCell>{issue.profiles?.email || 'Anonymous'}</TableCell>
            <TableCell className="max-w-[300px] truncate">
              {issue.error_message}
            </TableCell>
            <TableCell>{issue.component_name || 'N/A'}</TableCell>
            <TableCell>{issue.route_path || 'N/A'}</TableCell>
            <TableCell>{formatDate(issue.created_at)}</TableCell>
            <TableCell>
              <IssueDetailsDialog issue={issue} />
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

// File: src/components/auth/EmailAuthForm.tsx

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { supabase } from '@/integrations/supabase/client';
import { AuthError } from '@supabase/supabase-js';
import { Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface EmailAuthFormProps {
  mode: 'signin' | 'signup';
  onModeChange: () => void;
  onError: (error: AuthError) => void;
}

export const EmailAuthForm = ({ mode, onModeChange, onError }: EmailAuthFormProps) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [userType, setUserType] = useState<'student' | 'supervisor'>('student');
  const [loading, setLoading] = useState(false);
  const [lastAttempt, setLastAttempt] = useState(0);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      toast({
        title: "Invalid Email",
        description: "Please enter a valid email address",
        variant: "destructive",
      });
      return;
    }

    if (password.length < 6) {
      toast({
        title: "Invalid Password",
        description: "Password must be at least 6 characters long",
        variant: "destructive",
      });
      return;
    }
    
    const now = Date.now();
    if (now - lastAttempt < 3000) {
      toast({
        title: "Please wait",
        description: "Please wait a few seconds before trying again",
        variant: "destructive",
      });
      return;
    }
    
    setLastAttempt(now);
    setLoading(true);

    try {
      console.log('üîê Attempting auth:', mode, { email });
      
      if (mode === 'signin') {
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
      } else {
        const { error } = await supabase.auth.signUp({ 
          email, 
          password,
          options: {
            data: {
              user_type: userType
            }
          }
        });
        
        if (error) throw error;
        
        toast({
          title: "Registration Successful",
          description: "Please check your email to verify your account before signing in.",
        });
      }
      
      console.log('‚úÖ Auth successful');
      
    } catch (error) {
      console.error('‚ùå Auth error:', error);
      if (error instanceof Error) {
        if (error.message.includes('rate limit')) {
          toast({
            title: "Too many attempts",
            description: "Please wait a moment before trying again",
            variant: "destructive",
          });
        } else if (error.message.includes('Invalid login credentials')) {
          toast({
            title: "Authentication Failed",
            description: mode === 'signin' 
              ? "Invalid email or password. Please check your credentials and try again."
              : "Unable to create account. Please try again.",
            variant: "destructive",
          });
        } else {
          onError(error as AuthError);
        }
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          className="bg-gray-800/50 border-gray-700 text-white placeholder:text-gray-400"
          disabled={loading}
        />
      </div>
      <div>
        <Input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
          className="bg-gray-800/50 border-gray-700 text-white placeholder:text-gray-400"
          disabled={loading}
        />
      </div>
      
      {mode === 'signup' && (
        <div>
          <Select 
            value={userType} 
            onValueChange={(value: 'student' | 'supervisor') => setUserType(value)}
            disabled={loading}
          >
            <SelectTrigger className="bg-gray-800/50 border-gray-700 text-white">
              <SelectValue placeholder="Select user type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="student">Student</SelectItem>
              <SelectItem value="supervisor">Supervisor</SelectItem>
            </SelectContent>
          </Select>
        </div>
      )}

      <Button
        type="submit"
        className="w-full"
        disabled={loading}
      >
        {loading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            {mode === 'signin' ? 'Signing in...' : 'Signing up...'}
          </>
        ) : (
          mode === 'signin' ? 'Sign In' : 'Sign Up'
        )}
      </Button>
      <div className="text-center">
        <Button
          type="button"
          variant="link"
          className="text-[#9b87f5]"
          onClick={onModeChange}
          disabled={loading}
        >
          {mode === 'signin'
            ? "Don't have an account? Sign up"
            : 'Already have an account? Sign in'}
        </Button>
      </div>
    </form>
  );
};

// File: src/components/auth/SocialAuth.tsx

import { Button } from '@/components/ui/button';
import { supabase } from '@/integrations/supabase/client';
import { AuthError, Provider } from '@supabase/supabase-js';
import { Github, Loader2 } from 'lucide-react';

interface SocialAuthProps {
  isLoading: boolean;
  setLoading: (loading: boolean) => void;
  onError: (error: AuthError) => void;
  mode: 'signin' | 'signup';
  userType: 'student' | 'supervisor';
}

export const SocialAuth = ({ isLoading, setLoading, onError, mode, userType }: SocialAuthProps) => {
  const handleSocialLogin = async (provider: Provider) => {
    try {
      console.log('üîë Initiating social login with:', provider);
      setLoading(true);
      const { error } = await supabase.auth.signInWithOAuth({
        provider,
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
          queryParams: {
            ...provider === 'google' ? {
              access_type: 'offline',
              prompt: 'consent',
            } : {},
            // Only include user_type during signup
            ...(mode === 'signup' ? { user_type: userType } : {})
          }
        }
      });

      if (error) {
        console.error('‚ùå Social auth error:', error);
        onError(error);
      }
    } catch (err) {
      if (err instanceof Error) {
        console.error('‚ùå Social auth error:', err);
        onError(err as AuthError);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-2">
      <Button
        type="button"
        variant="outline"
        className="w-full bg-gray-800/50 border-gray-700 text-white hover:bg-gray-700/50"
        onClick={() => handleSocialLogin('github')}
        disabled={isLoading}
      >
        {isLoading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <Github className="mr-2 h-4 w-4" />
        )}
        Continue with GitHub
      </Button>

      <Button
        type="button"
        variant="outline"
        className="w-full bg-white/10 border-gray-700 text-white hover:bg-white/20"
        onClick={() => handleSocialLogin('google')}
        disabled={isLoading}
      >
        {isLoading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
            />
            <path
              fill="currentColor"
              d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
            />
            <path
              fill="currentColor"
              d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
            />
            <path
              fill="currentColor"
              d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
            />
          </svg>
        )}
        Continue with Google
      </Button>
    </div>
  );
};

// File: src/components/citation/CitationCard.tsx

import React, { useState } from 'react';
import { Citation } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { X, Quote, Edit2, Eye } from 'lucide-react';
import { TagInput } from '@/components/ui/tag-input';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface CitationCardProps {
  citation: Citation;
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview?: () => void;
}

export const CitationCard = ({ citation, onRemove, onUpdate, onPreview }: CitationCardProps) => {
  const [isEditing, setIsEditing] = useState(false);
  const [authors, setAuthors] = useState(citation.authors);
  const { toast } = useToast();

  const handleRemove = async () => {
    try {
      const { error } = await supabase
        .from('citations')
        .delete()
        .eq('id', citation.id);

      if (error) throw error;

      onRemove(citation.id);
      toast({
        title: "Success",
        description: "Citation removed successfully",
      });
    } catch (error: any) {
      console.error('Error removing citation:', error);
      toast({
        title: "Error",
        description: "Failed to remove citation: " + error.message,
        variant: "destructive",
      });
    }
  };

  const handleUpdate = async (updatedFields: Partial<Citation>) => {
    try {
      const updatedCitation = { ...citation, ...updatedFields };
      
      const { error } = await supabase
        .from('citations')
        .update(updatedCitation)
        .eq('id', citation.id);

      if (error) throw error;

      onUpdate(updatedCitation);
      toast({
        title: "Success",
        description: "Citation updated successfully",
      });
    } catch (error: any) {
      console.error('Error updating citation:', error);
      toast({
        title: "Error",
        description: "Failed to update citation: " + error.message,
        variant: "destructive",
      });
    }
  };

  const handleAuthorChange = (tags: string[]) => {
    setAuthors(tags);
    handleUpdate({ authors: tags });
  };

  return (
    <Card className="group relative border-2 border-editor-border transition-all duration-200 hover:shadow-lg">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">
          <Quote className="w-4 h-4 inline mr-2" />
          {citation.type.charAt(0).toUpperCase() + citation.type.slice(1)} Citation
        </CardTitle>
        <div className="flex gap-2 opacity-0 transition-opacity group-hover:opacity-100">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsEditing(!isEditing)}
            className="h-8 w-8 p-0"
          >
            <Edit2 className="h-4 w-4" />
          </Button>
          {onPreview && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onPreview}
              className="h-8 w-8 p-0"
            >
              <Eye className="h-4 w-4" />
            </Button>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleRemove}
            className="h-8 w-8 p-0"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        <Select
          value={citation.type}
          onValueChange={(value: 'book' | 'article' | 'conference' | 'website' | 'other') =>
            handleUpdate({ type: value })
          }
        >
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="book">Book</SelectItem>
            <SelectItem value="article">Article</SelectItem>
            <SelectItem value="conference">Conference</SelectItem>
            <SelectItem value="website">Website</SelectItem>
            <SelectItem value="other">Other</SelectItem>
          </SelectContent>
        </Select>
        <Input
          placeholder="Text"
          value={citation.text}
          onChange={(e) =>
            handleUpdate({ text: e.target.value })
          }
          className="mb-2"
        />
        <Input
          placeholder="Source"
          value={citation.source}
          onChange={(e) =>
            handleUpdate({ source: e.target.value })
          }
          className="mb-2"
        />
        <TagInput
          placeholder="Authors (comma-separated)"
          tags={authors}
          onChange={handleAuthorChange}
        />
        <Input
          placeholder="Year"
          value={citation.year}
          onChange={(e) =>
            handleUpdate({ year: e.target.value })
          }
        />
        {citation.type === 'article' && (
          <div className="space-y-2 animate-fade-in">
            <Input
              placeholder="Journal"
              value={citation.journal}
              onChange={(e) =>
                handleUpdate({ journal: e.target.value })
              }
            />
            <div className="grid grid-cols-3 gap-2">
              <Input
                placeholder="Volume"
                value={citation.volume}
                onChange={(e) =>
                  handleUpdate({ volume: e.target.value })
                }
              />
              <Input
                placeholder="Issue"
                value={citation.issue}
                onChange={(e) =>
                  handleUpdate({ issue: e.target.value })
                }
              />
              <Input
                placeholder="Pages"
                value={citation.pages}
                onChange={(e) =>
                  handleUpdate({ pages: e.target.value })
                }
              />
            </div>
          </div>
        )}
        {citation.type === 'book' && (
          <Input
            placeholder="Publisher"
            value={citation.publisher}
            onChange={(e) =>
              handleUpdate({ publisher: e.target.value })
            }
            className="animate-fade-in"
          />
        )}
        {(citation.type === 'website' || citation.type === 'other') && (
          <Input
            placeholder="URL"
            value={citation.url}
            onChange={(e) =>
              handleUpdate({ url: e.target.value })
            }
            className="animate-fade-in"
          />
        )}
      </CardContent>
    </Card>
  );
};

// File: src/components/citation/CitationFilters.tsx

import React from 'react';
import { Search, Filter, SortAsc, SortDesc } from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from '@/components/ui/button';

interface CitationFiltersProps {
  searchTerm: string;
  onSearchChange: (value: string) => void;
  filterType: string;
  onFilterChange: (value: string) => void;
  sortField: 'year' | 'author' | 'title';
  onSortFieldChange: (field: 'year' | 'author' | 'title') => void;
  sortDirection: 'asc' | 'desc';
  onSortDirectionChange: (direction: 'asc' | 'desc') => void;
}

export const CitationFilters = ({
  searchTerm,
  onSearchChange,
  filterType,
  onFilterChange,
  sortField,
  onSortFieldChange,
  sortDirection,
  onSortDirectionChange
}: CitationFiltersProps) => {
  return (
    <div className="flex gap-4 items-center">
      <div className="flex-1">
        <Input
          placeholder="Search citations..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="max-w-sm"
          leftIcon={<Search className="w-4 h-4" />}
        />
      </div>
      <Select value={filterType} onValueChange={onFilterChange}>
        <SelectTrigger className="w-[180px]">
          <Filter className="w-4 h-4 mr-2" />
          <SelectValue placeholder="Filter by type" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All Types</SelectItem>
          <SelectItem value="article">Articles</SelectItem>
          <SelectItem value="book">Books</SelectItem>
          <SelectItem value="conference">Conference Papers</SelectItem>
          <SelectItem value="website">Websites</SelectItem>
          <SelectItem value="other">Other</SelectItem>
        </SelectContent>
      </Select>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="sm" className="gap-2">
            {sortDirection === 'asc' ? <SortAsc className="w-4 h-4" /> : <SortDesc className="w-4 h-4" />}
            Sort by
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={() => onSortFieldChange('year')}>
            Year {sortField === 'year' && '‚úì'}
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => onSortFieldChange('author')}>
            Author {sortField === 'author' && '‚úì'}
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => onSortFieldChange('title')}>
            Title {sortField === 'title' && '‚úì'}
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => onSortDirectionChange(sortDirection === 'asc' ? 'desc' : 'asc')}>
            {sortDirection === 'asc' ? 'Ascending' : 'Descending'}
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

// File: src/components/citation/CitationHeader.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { PlusCircle } from 'lucide-react';
import { CitationStats } from './CitationStats';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CitationSearch } from './CitationSearch';

interface CitationHeaderProps {
  citations: Citation[];
  onAddCitation: (citation: Citation) => void;
  searchDialogOpen: boolean;
  setSearchDialogOpen: (open: boolean) => void;
  handleAddCitation: () => void;
  handleSearchResult: (citation: Omit<Citation, "thesis_id">) => void;
}

export const CitationHeader = ({
  citations,
  searchDialogOpen,
  setSearchDialogOpen,
  handleAddCitation,
  handleSearchResult
}: CitationHeaderProps) => {
  return (
    <div className="flex justify-between items-center">
      <CitationStats citations={citations} />
      <div className="flex gap-2">
        <Dialog open={searchDialogOpen} onOpenChange={setSearchDialogOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" size="sm">
              Search Citations
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-3xl">
            <DialogHeader>
              <DialogTitle>Search Citations</DialogTitle>
            </DialogHeader>
            <CitationSearch onCitationSelect={handleSearchResult} />
          </DialogContent>
        </Dialog>
        <Button onClick={handleAddCitation} variant="outline" size="sm" className="gap-2">
          <PlusCircle className="w-4 h-4" />
          Add Citation
        </Button>
      </div>
    </div>
  );
};

// File: src/components/citation/CitationList.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { CitationCard } from './CitationCard';

interface CitationListProps {
  citations: Citation[];
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation) => void;
}

export const CitationList = ({
  citations,
  onRemove,
  onUpdate,
  onPreview
}: CitationListProps) => {
  if (citations.length === 0) {
    return (
      <div className="col-span-2 text-center py-8 text-muted-foreground">
        No citations found. Try adjusting your filters or add a new citation.
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {citations.map((citation) => (
        <CitationCard
          key={citation.id}
          citation={citation}
          onRemove={onRemove}
          onUpdate={onUpdate}
          onPreview={() => onPreview(citation)}
        />
      ))}
    </div>
  );
};

// File: src/components/citation/CitationPreview.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { Card } from '@/components/ui/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";

interface CitationPreviewProps {
  citation: Citation;
  onEdit?: (citation: Citation) => void;
  onDelete?: (citation: Citation) => void;
  onClose?: () => void;
}

export const CitationPreview: React.FC<CitationPreviewProps> = ({ 
  citation,
  onEdit,
  onDelete,
  onClose
}) => {
  const formatAPA = () => {
    const authors = citation.authors
      .map((author, index) => {
        const names = author.split(' ');
        const lastName = names.pop();
        const initials = names.map(name => `${name[0]}.`).join(' ');
        return index === citation.authors.length - 1
          ? `${lastName}, ${initials}`
          : `${lastName}, ${initials},`;
      })
      .join(' ');

    let result = `${authors} (${citation.year}). ${citation.text}`;

    if (citation.type === 'article' && citation.journal) {
      result += `. ${citation.journal}`;
      if (citation.volume) result += `, ${citation.volume}`;
      if (citation.issue) result += `(${citation.issue})`;
      if (citation.pages) result += `, ${citation.pages}`;
    } else if (citation.type === 'book' && citation.publisher) {
      result += `. ${citation.publisher}`;
    }

    if (citation.doi) result += `. https://doi.org/${citation.doi}`;
    return result;
  };

  const formatMLA = () => {
    const authors = citation.authors
      .map((author, index) => {
        const names = author.split(' ');
        const lastName = names.pop();
        const firstName = names.join(' ');
        return index === 0
          ? `${lastName}, ${firstName}`
          : `${firstName} ${lastName}`;
      })
      .join(', ');

    let result = `${authors}. "${citation.text}." `;

    if (citation.type === 'article' && citation.journal) {
      result += `${citation.journal}`;
      if (citation.volume) result += ` ${citation.volume}`;
      if (citation.issue) result += `.${citation.issue}`;
      if (citation.year) result += ` (${citation.year})`;
      if (citation.pages) result += `: ${citation.pages}`;
    } else if (citation.type === 'book' && citation.publisher) {
      result += `${citation.publisher}, ${citation.year}`;
    }

    return result;
  };

  const formatChicago = () => {
    const authors = citation.authors
      .map((author, index) => {
        const names = author.split(' ');
        const lastName = names.pop();
        const firstName = names.join(' ');
        return index === 0
          ? `${lastName}, ${firstName}`
          : `${firstName} ${lastName}`;
      })
      .join(', ');

    let result = `${authors}. `;

    if (citation.type === 'article' && citation.journal) {
      result += `"${citation.text}." ${citation.journal}`;
      if (citation.volume) result += ` ${citation.volume}`;
      if (citation.issue) result += `, no. ${citation.issue}`;
      if (citation.year) result += ` (${citation.year})`;
      if (citation.pages) result += `: ${citation.pages}`;
    } else if (citation.type === 'book' && citation.publisher) {
      result += `${citation.text}. ${citation.publisher}, ${citation.year}`;
    }

    return result;
  };

  return (
    <Tabs defaultValue="apa" className="w-full">
      <TabsList className="grid w-full grid-cols-3">
        <TabsTrigger value="apa">APA</TabsTrigger>
        <TabsTrigger value="mla">MLA</TabsTrigger>
        <TabsTrigger value="chicago">Chicago</TabsTrigger>
      </TabsList>
      <TabsContent value="apa">
        <Card className="p-4">
          <p className="text-sm">{formatAPA()}</p>
        </Card>
      </TabsContent>
      <TabsContent value="mla">
        <Card className="p-4">
          <p className="text-sm">{formatMLA()}</p>
        </Card>
      </TabsContent>
      <TabsContent value="chicago">
        <Card className="p-4">
          <p className="text-sm">{formatChicago()}</p>
        </Card>
      </TabsContent>
    </Tabs>
  );
};


// File: src/components/citation/CitationSearch.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { useToast } from '@/hooks/use-toast';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Search } from 'lucide-react';

interface CitationSearchProps {
  onCitationSelect: (citation: Omit<Citation, "thesis_id">) => void;
}

export const CitationSearch: React.FC<CitationSearchProps> = ({ onCitationSelect }) => {
  const [query, setQuery] = React.useState('');
  const { toast } = useToast();

  const searchCitations = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch(`https://api.crossref.org/works?query=${encodeURIComponent(query)}`);
      const data = await response.json();
      
      if (data.message?.items?.length > 0) {
        const citation = formatCitation(data.message.items[0]);
        onCitationSelect(citation);
        setQuery('');
      } else {
        toast({
          title: "No Results",
          description: "No citations found for your search query.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error searching citations:', error);
      toast({
        title: "Error",
        description: "Failed to search citations. Please try again.",
        variant: "destructive",
      });
    }
  };

  const formatCitation = (result: any): Omit<Citation, "thesis_id"> => {
    const now = new Date().toISOString();
    return {
      id: crypto.randomUUID(),
      text: result.title?.[0] || '',
      source: result.publisher || '',
      authors: result.author?.map((a: any) => `${a.given} ${a.family}`) || [],
      year: result.published?.['date-parts']?.[0]?.[0]?.toString() || '',
      type: 'article' as const,
      doi: result.DOI,
      url: result.URL,
      journal: result['container-title']?.[0],
      volume: result.volume,
      issue: result.issue,
      pages: result.page,
      publisher: result.publisher,
      created_at: now,
      updated_at: now
    };
  };

  return (
    <form onSubmit={searchCitations} className="flex gap-2">
      <Input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search for citations..."
        className="flex-1"
      />
      <Button type="submit" variant="outline">
        <Search className="h-4 w-4" />
      </Button>
    </form>
  );
};

// File: src/components/citation/CitationStats.tsx

import React from 'react';
import { Citation } from '@/types/thesis';

interface CitationStatsProps {
  citations: Citation[];
}

export const CitationStats = ({ citations }: CitationStatsProps) => {
  const stats = {
    total: citations.length,
    articles: citations.filter(c => c.type === 'article').length,
    books: citations.filter(c => c.type === 'book').length,
    others: citations.filter(c => !['article', 'book'].includes(c.type)).length
  };

  return (
    <div className="space-y-1">
      <h3 className="text-lg font-serif font-medium text-primary">Citations</h3>
      <p className="text-sm text-muted-foreground">
        {stats.total} citations ({stats.articles} articles, {stats.books} books, {stats.others} others)
      </p>
    </div>
  );
};

// File: src/components/citation/tabs/AllCitationsTab.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { ScrollArea } from '@/components/ui/scroll-area';
import { CitationList } from '../CitationList';
import { motion, AnimatePresence } from 'framer-motion';

interface AllCitationsTabProps {
  citations: Citation[];
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation | null) => void;
}

export const AllCitationsTab = ({
  citations,
  onRemove,
  onUpdate,
  onPreview
}: AllCitationsTabProps) => {
  return (
    <ScrollArea className="h-[600px] pr-4">
      <AnimatePresence mode="wait">
        <motion.div
          key="all-citations"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 20 }}
          transition={{ duration: 0.2 }}
        >
          <CitationList
            citations={citations}
            onRemove={onRemove}
            onUpdate={onUpdate}
            onPreview={onPreview}
          />
        </motion.div>
      </AnimatePresence>
    </ScrollArea>
  );
};

// File: src/components/citation/tabs/CitationTabs.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BookOpen, Search, Clock } from 'lucide-react';
import { AllCitationsTab } from './AllCitationsTab';
import { SearchCitationsTab } from './SearchCitationsTab';
import { RecentCitationsTab } from './RecentCitationsTab';

interface CitationTabsProps {
  citations: Citation[];
  filteredCitations: Citation[];
  searchTerm: string;
  filterType: string;
  sortField: 'year' | 'author' | 'title';
  sortDirection: 'asc' | 'desc';
  onSearchChange: (value: string) => void;
  onFilterChange: (value: string) => void;
  onSortFieldChange: (field: 'year' | 'author' | 'title') => void;
  onSortDirectionChange: (direction: 'asc' | 'desc') => void;
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation | null) => void;
}

export const CitationTabs = ({
  citations,
  filteredCitations,
  searchTerm,
  filterType,
  sortField,
  sortDirection,
  onSearchChange,
  onFilterChange,
  onSortFieldChange,
  onSortDirectionChange,
  onRemove,
  onUpdate,
  onPreview
}: CitationTabsProps) => {
  const recentCitations = React.useMemo(() => 
    [...citations]
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
      .slice(0, 5),
    [citations]
  );

  return (
    <Tabs defaultValue="all" className="w-full">
      <TabsList className="grid w-full grid-cols-3 mb-4">
        <TabsTrigger value="all" className="flex items-center gap-2">
          <BookOpen className="w-4 h-4" />
          All Citations
        </TabsTrigger>
        <TabsTrigger value="search" className="flex items-center gap-2">
          <Search className="w-4 h-4" />
          Search & Filter
        </TabsTrigger>
        <TabsTrigger value="recent" className="flex items-center gap-2">
          <Clock className="w-4 h-4" />
          Recent
        </TabsTrigger>
      </TabsList>

      <TabsContent value="all">
        <AllCitationsTab
          citations={citations}
          onRemove={onRemove}
          onUpdate={onUpdate}
          onPreview={onPreview}
        />
      </TabsContent>

      <TabsContent value="search">
        <SearchCitationsTab
          citations={filteredCitations}
          searchTerm={searchTerm}
          filterType={filterType}
          sortField={sortField}
          sortDirection={sortDirection}
          onSearchChange={onSearchChange}
          onFilterChange={onFilterChange}
          onSortFieldChange={onSortFieldChange}
          onSortDirectionChange={onSortDirectionChange}
          onRemove={onRemove}
          onUpdate={onUpdate}
          onPreview={onPreview}
        />
      </TabsContent>

      <TabsContent value="recent">
        <RecentCitationsTab
          citations={recentCitations}
          onRemove={onRemove}
          onUpdate={onUpdate}
          onPreview={onPreview}
        />
      </TabsContent>
    </Tabs>
  );
};

// File: src/components/citation/tabs/RecentCitationsTab.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { ScrollArea } from '@/components/ui/scroll-area';
import { CitationList } from '../CitationList';
import { motion, AnimatePresence } from 'framer-motion';

interface RecentCitationsTabProps {
  citations: Citation[];
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation | null) => void;
}

export const RecentCitationsTab = ({
  citations,
  onRemove,
  onUpdate,
  onPreview
}: RecentCitationsTabProps) => {
  return (
    <ScrollArea className="h-[600px] pr-4">
      <AnimatePresence mode="wait">
        <motion.div
          key="recent-citations"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 20 }}
          transition={{ duration: 0.2 }}
        >
          <CitationList
            citations={citations}
            onRemove={onRemove}
            onUpdate={onUpdate}
            onPreview={onPreview}
          />
        </motion.div>
      </AnimatePresence>
    </ScrollArea>
  );
};

// File: src/components/citation/tabs/SearchCitationsTab.tsx

import React from 'react';
import { Citation } from '@/types/thesis';
import { ScrollArea } from '@/components/ui/scroll-area';
import { CitationList } from '../CitationList';
import { CitationFilters } from '../CitationFilters';
import { motion, AnimatePresence } from 'framer-motion';

interface SearchCitationsTabProps {
  citations: Citation[];
  searchTerm: string;
  filterType: string;
  sortField: 'year' | 'author' | 'title';
  sortDirection: 'asc' | 'desc';
  onSearchChange: (value: string) => void;
  onFilterChange: (value: string) => void;
  onSortFieldChange: (field: 'year' | 'author' | 'title') => void;
  onSortDirectionChange: (direction: 'asc' | 'desc') => void;
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation | null) => void;
}

export const SearchCitationsTab = ({
  citations,
  searchTerm,
  filterType,
  sortField,
  sortDirection,
  onSearchChange,
  onFilterChange,
  onSortFieldChange,
  onSortDirectionChange,
  onRemove,
  onUpdate,
  onPreview
}: SearchCitationsTabProps) => {
  return (
    <>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        <CitationFilters
          searchTerm={searchTerm}
          onSearchChange={onSearchChange}
          filterType={filterType}
          onFilterChange={onFilterChange}
          sortField={sortField}
          onSortFieldChange={onSortFieldChange}
          sortDirection={sortDirection}
          onSortDirectionChange={onSortDirectionChange}
        />
      </motion.div>

      <ScrollArea className="h-[500px] pr-4 mt-4">
        <AnimatePresence mode="wait">
          <motion.div
            key={searchTerm + filterType + sortField + sortDirection}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            transition={{ duration: 0.2 }}
          >
            <CitationList
              citations={citations}
              onRemove={onRemove}
              onUpdate={onUpdate}
              onPreview={onPreview}
            />
          </motion.div>
        </AnimatePresence>
      </ScrollArea>
    </>
  );
};

// File: src/components/collaboration/ChatMessages.tsx

import React, { useState } from 'react';
import { ChatMessageList } from './chat/ChatMessageList';
import { ChatMessageInput } from './chat/ChatMessageInput';
import { useChatMessages } from './chat/useChatMessages';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useTheme } from '../ThemeProvider';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '../ui/collapsible';
import { Button } from '../ui/button';
import { ChevronDown, ChevronUp } from 'lucide-react';

interface ChatMessagesProps {
  thesisId: string;
}

export const ChatMessages: React.FC<ChatMessagesProps> = ({ thesisId }) => {
  const [newMessage, setNewMessage] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [showChat, setShowChat] = useState(true);
  const { toast } = useToast();
  const { messages } = useChatMessages(thesisId);
  const { theme } = useTheme();

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !thesisId) return;

    setIsLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      console.log('Sending message:', newMessage);
      const { error } = await supabase
        .from('chat_messages')
        .insert({
          thesis_id: thesisId,
          content: newMessage.trim(),
          sender_id: user.id
        });

      if (error) {
        console.error('Error sending message:', error);
        throw error;
      }

      setNewMessage('');
    } catch (error: any) {
      console.error('Error in handleSendMessage:', error);
      toast({
        title: "Error",
        description: "Failed to send message",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!thesisId) {
    return null;
  }

  return (
    <Collapsible
      open={showChat}
      onOpenChange={setShowChat}
      className="fixed bottom-4 right-4 w-[400px] z-50"
    >
      <CollapsibleTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="absolute -top-10 right-0 bg-background shadow-md"
        >
          {showChat ? (
            <ChevronDown className="h-4 w-4" />
          ) : (
            <ChevronUp className="h-4 w-4" />
          )}
        </Button>
      </CollapsibleTrigger>
      <CollapsibleContent>
        <div className={`
          w-full h-[500px] 
          border rounded-lg shadow-lg
          flex flex-col overflow-hidden
          backdrop-blur-sm
          ${theme === 'dark' 
            ? 'bg-dark-bg/95 border-dark-border shadow-2xl' 
            : 'bg-background/95 border-border'
          }
        `}>
          <div className={`
            p-3 border-b backdrop-blur-sm
            ${theme === 'dark' 
              ? 'bg-dark-card/90 border-dark-border' 
              : 'bg-editor-bg-accent/90 border-editor-border'
            }
          `}>
            <h3 className="font-semibold">Chat</h3>
          </div>
          
          <ChatMessageList messages={messages} />

          <ChatMessageInput
            value={newMessage}
            onChange={setNewMessage}
            onSubmit={handleSendMessage}
            isLoading={isLoading}
          />
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
};

// File: src/components/collaboration/CollaboratorInviteForm.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

interface CollaboratorInviteFormProps {
  thesisId: string;
  thesisTitle: string;
  onInviteSuccess: () => void;
  onInviteError: (error: Error) => void;
  isAdmin: boolean;
  setIsInviting: (isInviting: boolean) => void;
}

const VALID_ROLES = ['editor', 'viewer', 'supervisor'] as const;
type ValidRole = typeof VALID_ROLES[number];

export const CollaboratorInviteForm = ({
  thesisId,
  thesisTitle,
  onInviteSuccess,
  onInviteError,
  isAdmin,
  setIsInviting
}: CollaboratorInviteFormProps) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<ValidRole>('viewer');
  const { toast } = useToast();

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email.trim() || !role || !thesisId) {
      toast({
        title: "Error",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    console.log('Starting invite process for:', { email, role, thesisId });
    setIsInviting(true);

    try {
      // First check if the user exists
      const { data: existingUser, error: userError } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('email', email.toLowerCase())
        .maybeSingle();

      if (userError) {
        console.error('Error checking user:', userError);
        throw new Error('Error checking user existence');
      }

      if (!existingUser) {
        throw new Error('User not found. Please ensure the email is correct.');
      }

      // Check if user is already a collaborator
      const { data: existingCollaborator, error: collaboratorError } = await supabase
        .from('thesis_collaborators')
        .select('*')
        .eq('thesis_id', thesisId)
        .eq('user_id', existingUser.id)
        .maybeSingle();

      if (collaboratorError) {
        console.error('Error checking existing collaborator:', collaboratorError);
        throw new Error('Error checking existing collaborator');
      }

      if (existingCollaborator) {
        // If collaborator exists with same role, show error
        if (existingCollaborator.role === role) {
          throw new Error('User is already a collaborator with this role');
        }

        // If collaborator exists with different role, update role
        const { error: updateError } = await supabase
          .from('thesis_collaborators')
          .update({ role })
          .eq('thesis_id', thesisId)
          .eq('user_id', existingUser.id);

        if (updateError) {
          console.error('Error updating collaborator role:', updateError);
          throw new Error('Failed to update collaborator role');
        }

        toast({
          title: "Success",
          description: `Collaborator role updated to ${role}`,
        });
      } else {
        // Add new collaborator
        const { error: insertError } = await supabase
          .from('thesis_collaborators')
          .insert({
            thesis_id: thesisId,
            user_id: existingUser.id,
            role: role
          });

        if (insertError) {
          console.error('Error adding collaborator:', insertError);
          throw new Error('Failed to add collaborator. Please try again.');
        }

        // If it's a supervisor invitation, update the thesis table
        if (role === 'supervisor') {
          const { error: thesisUpdateError } = await supabase
            .from('theses')
            .update({
              supervisor_id: existingUser.id,
              supervisor_email: email.toLowerCase()
            })
            .eq('id', thesisId);

          if (thesisUpdateError) {
            console.error('Error updating thesis supervisor:', thesisUpdateError);
            throw new Error('Failed to update thesis supervisor');
          }
        }

        // Create a notification for the invited user
        const { error: notificationError } = await supabase
          .from('notifications')
          .insert({
            user_id: existingUser.id,
            thesis_id: thesisId,
            type: role === 'supervisor' ? 'supervisor_invite' : 'invitation',
            message: `You have been invited to collaborate on "${thesisTitle}" as a ${role}`
          });

        if (notificationError) {
          console.error('Error creating notification:', notificationError);
          // Don't throw here as the collaboration was successful
        }

        toast({
          title: "Success",
          description: "Collaborator added successfully",
        });
      }

      setEmail('');
      onInviteSuccess();
    } catch (error: any) {
      console.error('Error inviting collaborator:', error);
      onInviteError(error);
      toast({
        title: "Error",
        description: error.message || "Failed to invite collaborator",
        variant: "destructive",
      });
    } finally {
      setIsInviting(false);
    }
  };

  return (
    <form onSubmit={handleInvite} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email">Email address</Label>
        <Input
          id="email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter collaborator's email"
          required
        />
      </div>
      <div className="space-y-2">
        <Label>Role</Label>
        <Select value={role} onValueChange={(value) => setRole(value as ValidRole)}>
          <SelectTrigger>
            <SelectValue placeholder="Select role" />
          </SelectTrigger>
          <SelectContent>
            {VALID_ROLES.map((validRole) => (
              <SelectItem key={validRole} value={validRole}>
                {validRole.charAt(0).toUpperCase() + validRole.slice(1)}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Button type="submit" className="w-full">
        Send Invitation
      </Button>
    </form>
  );
};


// File: src/components/collaboration/CollaboratorLocation.tsx

import React from 'react';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

interface CollaboratorLocation {
  user_id: string;
  email?: string;
  section_id: string;
  last_seen: string;
}

interface CollaboratorLocationProps {
  collaborator: CollaboratorLocation;
}

export const CollaboratorLocation: React.FC<CollaboratorLocationProps> = ({ collaborator }) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger>
          <div className="relative inline-block">
            <Avatar className="h-6 w-6 border-2 border-background">
              <AvatarImage 
                src={`https://api.dicebear.com/7.x/initials/svg?seed=${collaborator.email}`} 
                alt={collaborator.email} 
              />
              <AvatarFallback>
                {collaborator.email?.charAt(0).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            <span className="absolute bottom-0 right-0 h-2 w-2 rounded-full bg-green-500 border border-background" />
          </div>
        </TooltipTrigger>
        <TooltipContent>
          <p>{collaborator.email} is here</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

// File: src/components/collaboration/CollaboratorPresence.tsx

import React, { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { motion, AnimatePresence } from 'framer-motion';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useToast } from '@/hooks/use-toast';

interface ActiveCollaborator {
  id: string;
  user_id: string;
  email?: string;
  last_seen: string;
}

interface CollaboratorPresenceProps {
  thesisId: string;
}

export const CollaboratorPresence: React.FC<CollaboratorPresenceProps> = ({ thesisId }) => {
  const [activeCollaborators, setActiveCollaborators] = useState<ActiveCollaborator[]>([]);
  const { toast } = useToast();
  const presenceChannel = React.useRef<ReturnType<typeof supabase.channel> | null>(null);

  useEffect(() => {
    const setupPresence = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;

        // Get initial collaborators
        const { data: collaborators, error } = await supabase
          .from('thesis_collaborators')
          .select(`
            id,
            user_id,
            profiles!inner (
              email
            )
          `)
          .eq('thesis_id', thesisId);

        if (error) throw error;

        // Set up presence channel
        presenceChannel.current = supabase.channel(`presence:${thesisId}`);
        
        presenceChannel.current
          .on('presence', { event: 'sync' }, () => {
            const state = presenceChannel.current?.presenceState() || {};
            console.log('Presence state:', state);
            
            const currentPresence = Object.values(state).flat().map((presence: any) => ({
              id: presence.user_id,
              user_id: presence.user_id,
              email: presence.email,
              last_seen: presence.online_at
            }));

            setActiveCollaborators(currentPresence);
          })
          .on('presence', { event: 'join' }, ({ key, newPresences }) => {
            console.log('User joined:', key, newPresences);
          })
          .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
            console.log('User left:', key, leftPresences);
          })
          .subscribe(async (status) => {
            if (status === 'SUBSCRIBED') {
              await presenceChannel.current?.track({
                user_id: user.id,
                email: user.email,
                online_at: new Date().toISOString()
              });
            }
          });

        // Initialize with collaborators from database
        const initialCollaborators = collaborators?.map(collab => ({
          id: collab.id,
          user_id: collab.user_id,
          email: collab.profiles?.email,
          last_seen: new Date().toISOString()
        })) || [];

        setActiveCollaborators(initialCollaborators);

      } catch (error) {
        console.error('Error setting up presence:', error);
        toast({
          title: "Error",
          description: "Failed to load collaborators",
          variant: "destructive",
        });
      }
    };

    setupPresence();

    return () => {
      if (presenceChannel.current) {
        supabase.removeChannel(presenceChannel.current);
      }
    };
  }, [thesisId, toast]);

  return (
    <div className="flex -space-x-2 overflow-hidden p-2">
      <AnimatePresence>
        {activeCollaborators.map((collaborator) => (
          <motion.div
            key={collaborator.user_id}
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.5 }}
            className="relative inline-block"
          >
            <Avatar className="h-8 w-8 border-2 border-background">
              <AvatarImage 
                src={`https://api.dicebear.com/7.x/initials/svg?seed=${collaborator.email}`} 
                alt={collaborator.email} 
              />
              <AvatarFallback>
                {collaborator.email?.charAt(0).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            <span className="absolute bottom-0 right-0 h-2 w-2 rounded-full bg-green-500 border border-background" />
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
};

// File: src/components/collaboration/NotificationCenter.tsx

import React from 'react';
import { useNotifications } from './notifications/useNotifications';
import { NotificationList } from './notifications/NotificationList';
import { Card } from '../ui/card';
import { LoadingSkeleton } from '../loading/LoadingSkeleton';

interface NotificationCenterProps {
  thesisId: string;
}

export const NotificationCenter: React.FC<NotificationCenterProps> = ({ thesisId }) => {
  console.log('üéØ Rendering NotificationCenter for thesis:', thesisId);
  
  const { notifications, loading, markAsRead } = useNotifications(thesisId);

  if (loading) {
    return <LoadingSkeleton />;
  }

  return (
    <Card className="w-full">
      <div className="p-4 border-b">
        <h3 className="font-semibold">Notifications</h3>
      </div>
      <NotificationList
        notifications={notifications}
        onMarkAsRead={markAsRead}
      />
    </Card>
  );
};

// File: src/components/collaboration/chat/ChatHeader.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { X } from 'lucide-react';

interface ChatHeaderProps {
  onClose?: () => void;
}

export const ChatHeader: React.FC<ChatHeaderProps> = ({ onClose }) => {
  return (
    <div className="p-3 border-b bg-primary/5 rounded-t-lg backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex items-center justify-between">
        <h3 className="font-semibold">Chat</h3>
        {onClose && (
          <Button 
            variant="ghost" 
            size="icon"
            onClick={onClose}
            className="h-8 w-8 rounded-full hover:bg-primary/10"
          >
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>
    </div>
  );
};

// File: src/components/collaboration/chat/ChatInput.tsx

import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Send } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface ChatInputProps {
  thesisId: string;
  onMessageSent?: () => void;
}

export const ChatInput: React.FC<ChatInputProps> = ({ thesisId, onMessageSent }) => {
  const [newMessage, setNewMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !thesisId) return;

    setIsLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      console.log('Sending message:', newMessage);
      const { error } = await supabase
        .from('chat_messages')
        .insert({
          thesis_id: thesisId,
          content: newMessage.trim(),
          sender_id: user.id
        });

      if (error) {
        console.error('Error sending message:', error);
        throw error;
      }

      setNewMessage('');
      onMessageSent?.();
    } catch (error: any) {
      console.error('Error in handleSendMessage:', error);
      toast({
        title: "Error",
        description: "Failed to send message",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSendMessage} className="p-4 border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex items-center gap-2">
        <Input
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message..."
          disabled={isLoading}
          className="flex-1 bg-muted/50"
        />
        <Button 
          type="submit" 
          size="icon" 
          disabled={isLoading}
          className="shrink-0 transition-all duration-200 hover:scale-105"
        >
          <Send className="h-4 w-4" />
        </Button>
      </div>
    </form>
  );
};

// File: src/components/collaboration/chat/ChatMessageInput.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Send } from 'lucide-react';

interface ChatMessageInputProps {
  value: string;
  onChange: (value: string) => void;
  onSubmit: (e: React.FormEvent) => void;
  isLoading: boolean;
}

export const ChatMessageInput: React.FC<ChatMessageInputProps> = ({
  value,
  onChange,
  onSubmit,
  isLoading
}) => {
  return (
    <form onSubmit={onSubmit} className="border-t p-4 bg-gradient-to-b from-background/50 to-background backdrop-blur-sm">
      <div className="flex gap-2">
        <Textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="Type a message..."
          className="min-h-[80px] resize-none bg-background/80 backdrop-blur-sm"
        />
        <Button 
          type="submit" 
          disabled={isLoading}
          size="icon"
          className="h-[80px] w-[80px] bg-primary hover:bg-primary/90 transition-all duration-200"
        >
          <Send className="h-4 w-4" />
        </Button>
      </div>
    </form>
  );
};

// File: src/components/collaboration/chat/ChatMessageItem.tsx

import React from 'react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';
import { format } from 'date-fns';
import { ChevronRight, ChevronLeft } from 'lucide-react';

interface ChatMessageItemProps {
  message: {
    id: string;
    content: string;
    sender_id: string;
    created_at: string;
    profiles?: {
      email?: string;
    };
  };
  isCurrentUser?: boolean;
}

export const ChatMessageItem: React.FC<ChatMessageItemProps> = ({ message, isCurrentUser }) => {
  return (
    <div className={cn(
      "flex items-start gap-3 group transition-all duration-200 hover:bg-primary/5 p-2 rounded-lg",
      isCurrentUser ? "flex-row-reverse" : "flex-row"
    )}>
      <Avatar className="h-8 w-8 shrink-0 animate-fade-in">
        <AvatarImage 
          src={`https://api.dicebear.com/7.x/initials/svg?seed=${message.profiles?.email}`} 
          alt={message.profiles?.email} 
        />
        <AvatarFallback className="bg-primary/5 text-primary">
          {message.profiles?.email?.charAt(0).toUpperCase()}
        </AvatarFallback>
      </Avatar>
      
      <div className={cn(
        "flex flex-col max-w-[80%]",
        isCurrentUser ? "items-end" : "items-start"
      )}>
        <span className="text-xs font-medium text-muted-foreground mb-1">
          {message.profiles?.email}
          <span className="mx-2 text-muted-foreground/60">‚Ä¢</span>
          <span className="text-xs text-muted-foreground/60">
            {format(new Date(message.created_at), 'HH:mm')}
          </span>
        </span>
        
        <div className={cn(
          "flex items-center gap-2",
          isCurrentUser ? "flex-row-reverse" : "flex-row"
        )}>
          {!isCurrentUser && <ChevronRight className="h-4 w-4 text-muted-foreground/40" />}
          <div className={cn(
            "rounded-2xl px-4 py-2 break-words animate-slide-up backdrop-blur-sm",
            isCurrentUser 
              ? "bg-primary text-primary-foreground rounded-tr-none bg-gradient-to-r from-primary to-primary/90" 
              : "bg-muted rounded-tl-none bg-gradient-to-r from-muted to-muted/80"
          )}>
            <p className="text-sm leading-relaxed">{message.content}</p>
          </div>
          {isCurrentUser && <ChevronLeft className="h-4 w-4 text-muted-foreground/40" />}
        </div>
      </div>
    </div>
  );
};

// File: src/components/collaboration/chat/ChatMessageList.tsx

import React from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Message } from '@/types/chat';

interface ChatMessageListProps {
  messages: Message[];
}

export const ChatMessageList: React.FC<ChatMessageListProps> = ({ messages }) => {
  const { session } = useAuth();
  const currentUserId = session?.user?.id;

  return (
    <ScrollArea className="flex-1 p-4">
      <div className="space-y-4">
        {messages.map((message) => {
          const isCurrentUser = message.sender_id === currentUserId;
          return (
            <div
              key={message.id}
              className={`flex gap-3 ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}
            >
              <Avatar className="w-8 h-8">
                <AvatarImage src={`https://avatar.vercel.sh/${message.sender_id}`} />
                <AvatarFallback>U</AvatarFallback>
              </Avatar>
              <div
                className={`max-w-[80%] rounded-lg p-3 ${
                  isCurrentUser
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-muted'
                }`}
              >
                <p className="text-sm">{message.content}</p>
              </div>
            </div>
          );
        })}
      </div>
    </ScrollArea>
  );
};

// File: src/components/collaboration/chat/ChatMessages.tsx

import React, { useRef } from 'react';
import { ChatMessageList } from './ChatMessageList';
import { ChatMessageInput } from './ChatMessageInput';
import { useChatMessages } from './useChatMessages';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface ChatMessagesProps {
  thesisId: string;
}

export const ChatMessages: React.FC<ChatMessagesProps> = ({ thesisId }) => {
  const [newMessage, setNewMessage] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const { toast } = useToast();
  const { messages } = useChatMessages(thesisId);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !thesisId) return;

    setIsLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      console.log('Sending message:', newMessage);
      const { error } = await supabase
        .from('chat_messages')
        .insert({
          thesis_id: thesisId,
          content: newMessage.trim(),
          sender_id: user.id
        });

      if (error) {
        console.error('Error sending message:', error);
        throw error;
      }

      setNewMessage('');
    } catch (error: any) {
      console.error('Error in handleSendMessage:', error);
      toast({
        title: "Error",
        description: "Failed to send message",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!thesisId) {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 w-[400px] h-[500px] bg-background border rounded-lg shadow-lg z-50 flex flex-col animate-slide-in-right">
      <div className="p-3 border-b bg-primary/5 rounded-t-lg">
        <h3 className="font-semibold">Chat</h3>
      </div>
      
      <ChatMessageList messages={messages} />

      <ChatMessageInput
        value={newMessage}
        onChange={setNewMessage}
        onSubmit={handleSendMessage}
        isLoading={isLoading}
      />
    </div>
  );
};

// File: src/components/collaboration/chat/types.ts

import { Message, ChatMessage } from '@/types/chat';

export type { Message, ChatMessage };

export interface ChatMessageListProps {
  messages: ChatMessage[];
}

export interface ChatMessageInputProps {
  value: string;
  onChange: (value: string) => void;
  onSubmit: (e: React.FormEvent) => void;
  isLoading?: boolean;
}

// File: src/components/collaboration/chat/useChatMessages.ts

import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Message } from './types';

export const useChatMessages = (thesisId: string) => {
  const [messages, setMessages] = useState<Message[]>([]);

  useEffect(() => {
    if (!thesisId) return;

    // Initial fetch
    const fetchMessages = async () => {
      const { data, error } = await supabase
        .from('chat_messages')
        .select(`
          *,
          sender:profiles(email)
        `)
        .eq('thesis_id', thesisId)
        .order('created_at', { ascending: true });

      if (error) {
        console.error('Error fetching messages:', error);
        return;
      }

      setMessages(data || []);
    };

    fetchMessages();

    // Subscribe to new messages
    const subscription = supabase
      .channel(`chat_messages:thesis_id=eq.${thesisId}`)
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'chat_messages',
        filter: `thesis_id=eq.${thesisId}`
      }, (payload) => {
        console.log('Received realtime message:', payload);
        if (payload.eventType === 'INSERT') {
          setMessages(prev => [...prev, payload.new as Message]);
        }
      })
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [thesisId]);

  return { messages };
};

// File: src/components/collaboration/notifications/NotificationItem.tsx

import React from 'react';
import { Notification } from '../types';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Bell } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';

interface NotificationItemProps {
  notification: Notification;
  onMarkAsRead: (id: string) => void;
}

export const NotificationItem: React.FC<NotificationItemProps> = ({
  notification,
  onMarkAsRead,
}) => {
  console.log('üîî Rendering NotificationItem:', notification.id, 'Read:', notification.read);
  
  const handleMarkAsRead = () => {
    console.log('üëÜ Marking notification as read:', notification.id);
    onMarkAsRead(notification.id);
  };

  return (
    <Card className={`p-4 ${notification.read ? 'bg-muted' : 'bg-primary/5'}`}>
      <div className="flex items-start gap-3">
        <Bell className="w-4 h-4 mt-1 text-primary" />
        <div className="flex-1 space-y-1">
          <p className="text-sm">{notification.message}</p>
          <div className="flex items-center justify-between">
            <span className="text-xs text-muted-foreground">
              {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}
            </span>
            {!notification.read && (
              <Button
                variant="ghost"
                size="sm"
                onClick={handleMarkAsRead}
                className="text-xs"
              >
                Mark as read
              </Button>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

// File: src/components/collaboration/notifications/NotificationList.tsx

import React from 'react';
import { NotificationItem } from './NotificationItem';
import { Notification } from '../types';
import { ScrollArea } from '@/components/ui/scroll-area';

interface NotificationListProps {
  notifications: Notification[];
  onMarkAsRead: (id: string) => void;
}

export const NotificationList: React.FC<NotificationListProps> = ({
  notifications,
  onMarkAsRead,
}) => {
  console.log('üéØ Rendering NotificationList with', notifications.length, 'notifications');
  
  return (
    <ScrollArea className="h-[300px]">
      <div className="space-y-2 p-4">
        {notifications.map((notification) => (
          <NotificationItem
            key={notification.id}
            notification={notification}
            onMarkAsRead={onMarkAsRead}
          />
        ))}
        {notifications.length === 0 && (
          <div className="text-center text-muted-foreground p-4">
            No notifications
          </div>
        )}
      </div>
    </ScrollArea>
  );
};

// File: src/components/collaboration/notifications/useNotifications.ts

import { useState, useEffect, useRef, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Notification } from '../types';

export const useNotifications = (thesisId: string) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const processedNotificationsRef = useRef<Set<string>>(new Set());
  const subscriptionRef = useRef<any>(null);

  const fetchNotifications = useCallback(async () => {
    try {
      console.log('üîÑ Fetching notifications for thesis:', thesisId);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('‚ùå No authenticated user found');
        return;
      }

      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('thesis_id', thesisId)
        .eq('user_id', userData.user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error fetching notifications:', error);
        throw error;
      }

      console.log('‚úÖ Fetched notifications:', data?.length);
      setNotifications(data || []);
      data?.forEach(notification => {
        processedNotificationsRef.current.add(notification.id);
      });
    } catch (error) {
      console.error('‚ùå Error in fetchNotifications:', error);
      toast({
        title: "Error",
        description: "Failed to load notifications",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [thesisId, toast]);

  const handleNewNotification = useCallback((payload: any) => {
    console.log('üì® New notification received:', payload);
    const notification = payload.new;
    
    if (processedNotificationsRef.current.has(notification.id)) {
      console.log('üîÑ Notification already processed, skipping:', notification.id);
      return;
    }

    console.log('‚ú® Processing new notification:', notification.id);
    processedNotificationsRef.current.add(notification.id);
    
    setNotifications(prev => {
      const exists = prev.some(n => n.id === notification.id);
      if (exists) {
        console.log('üîÑ Notification already in state, skipping:', notification.id);
        return prev;
      }
      console.log('‚ûï Adding new notification to state:', notification.id);
      return [notification, ...prev];
    });

    toast({
      title: "New Notification",
      description: notification.message,
    });
  }, [toast]);

  const markAsRead = useCallback(async (notificationId: string) => {
    try {
      console.log('üìù Marking notification as read:', notificationId);
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId);

      if (error) {
        console.error('‚ùå Error marking notification as read:', error);
        throw error;
      }

      setNotifications(prev =>
        prev.map(n =>
          n.id === notificationId ? { ...n, read: true } : n
        )
      );
      console.log('‚úÖ Notification marked as read:', notificationId);
    } catch (error) {
      console.error('‚ùå Error in markAsRead:', error);
      toast({
        title: "Error",
        description: "Failed to mark notification as read",
        variant: "destructive",
      });
    }
  }, [toast]);

  useEffect(() => {
    console.log('üîÑ Setting up notifications subscription for thesis:', thesisId);
    
    fetchNotifications();

    const channel = supabase
      .channel('notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'notifications',
          filter: `thesis_id=eq.${thesisId}`,
        },
        handleNewNotification
      )
      .subscribe(status => {
        console.log('üì° Notification subscription status:', status);
      });

    subscriptionRef.current = channel;

    return () => {
      console.log('üßπ Cleaning up notifications subscription');
      if (subscriptionRef.current) {
        supabase.removeChannel(subscriptionRef.current);
      }
      processedNotificationsRef.current.clear();
    };
  }, [thesisId, fetchNotifications, handleNewNotification]);

  return {
    notifications,
    loading,
    markAsRead,
  };
};

// File: src/components/collaboration/types.ts

export interface Notification {
  id: string;
  message: string;
  created_at: string;
  read: boolean;
  user_id: string;
  thesis_id: string;
  type: string;
}

// File: src/components/dashboard/QuickTips.tsx

import { Lightbulb, BookOpen, Users, Save } from 'lucide-react';

export const QuickTips = () => {
  return (
    <div>
      <h2 className="text-2xl font-serif font-semibold text-primary mb-6">
        Quick Tips
      </h2>
      <div className="space-y-6">
        <div className="space-y-4">
          <div className="flex items-start gap-3">
            <div className="bg-blue-50 rounded-lg p-2">
              <BookOpen className="w-5 h-5 text-blue-600" />
            </div>
            <div>
              <h4 className="font-medium text-gray-900 font-serif">Getting Started</h4>
              <p className="text-sm text-muted-foreground font-sans">
                Click "Create New Thesis" to begin your academic journey
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="bg-green-50 rounded-lg p-2">
              <Users className="w-5 h-5 text-green-600" />
            </div>
            <div>
              <h4 className="font-medium text-gray-900 font-serif">Collaboration</h4>
              <p className="text-sm text-muted-foreground font-sans">
                Invite collaborators through the sharing menu in your thesis
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="bg-amber-50 rounded-lg p-2">
              <Save className="w-5 h-5 text-amber-600" />
            </div>
            <div>
              <h4 className="font-medium text-gray-900 font-serif">Auto-saving</h4>
              <p className="text-sm text-muted-foreground font-sans">
                Your work is automatically saved as you type
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="bg-purple-50 rounded-lg p-2">
              <Lightbulb className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <h4 className="font-medium text-gray-900 font-serif">Best Practices</h4>
              <p className="text-sm text-muted-foreground font-sans">
                Use headings to organize your content effectively
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// File: src/components/dashboard/StatsGrid.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText, Clock, Star } from "lucide-react";

interface StatsGridProps {
  stats: {
    total: number;
    inProgress: number;
    completed: number;
  };
}

export const StatsGrid = ({ stats }: StatsGridProps) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <Card className="backdrop-blur-xl bg-white/5 border-white/10">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium font-sans text-[#D6BCFA]">Total Theses</CardTitle>
          <FileText className="h-4 w-4 text-[#9b87f5]" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold font-sans text-white">{stats.total}</div>
        </CardContent>
      </Card>
      <Card className="backdrop-blur-xl bg-white/5 border-white/10">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium font-sans text-[#D6BCFA]">In Progress</CardTitle>
          <Clock className="h-4 w-4 text-[#9b87f5]" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold font-sans text-white">{stats.inProgress}</div>
        </CardContent>
      </Card>
      <Card className="backdrop-blur-xl bg-white/5 border-white/10">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium font-sans text-[#D6BCFA]">Completed</CardTitle>
          <Star className="h-4 w-4 text-[#9b87f5]" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold font-sans text-white">{stats.completed}</div>
        </CardContent>
      </Card>
    </div>
  );
};

// File: src/components/dashboard/ThesisProgressMap.tsx

import React, { useState } from 'react';
import { CentralProgress } from './thesis-map/CentralProgress';
import { SectionNode } from './thesis-map/SectionNode';
import { StatsDisplay } from './thesis-map/StatsDisplay';
import { BackgroundEffects } from './thesis-map/BackgroundEffects';

interface ThesisProgressMapProps {
  stats: {
    total: number;
    inProgress: number;
    completed: number;
  };
}

export const ThesisProgressMap = ({ stats }: ThesisProgressMapProps) => {
  const [hoveredSection, setHoveredSection] = useState<string | null>(null);
  const totalProgress = Math.round((stats.completed / stats.total) * 100);

  const sections = [
    { id: 'introduction', title: 'Introduction', progress: 100, complete: true },
    { id: 'literature', title: 'Literature Review', progress: 85, complete: false },
    { id: 'methodology', title: 'Methodology', progress: 60, complete: false },
    { id: 'results', title: 'Results', progress: 40, complete: false },
    { id: 'discussion', title: 'Discussion', progress: 20, complete: false },
    { id: 'conclusion', title: 'Conclusion', progress: 10, complete: false },
  ];

  const getPositionOnCircle = (index: number, total: number, radius: number) => {
    const angle = (index * 360) / total + 90;
    const x = Math.cos((angle * Math.PI) / 180) * radius;
    const y = Math.sin((angle * Math.PI) / 180) * radius;
    return { x, y };
  };

  return (
    <div className="relative w-full h-[600px] bg-white rounded-3xl overflow-hidden shadow-lg">
      <BackgroundEffects />
      <CentralProgress totalProgress={totalProgress} />

      {sections.map((section, index) => {
        const position = getPositionOnCircle(index, sections.length, 200);
        return (
          <SectionNode
            key={section.id}
            id={section.id}
            title={section.title}
            progress={section.progress}
            complete={section.complete}
            position={position}
            hoveredSection={hoveredSection}
            onHover={setHoveredSection}
          />
        );
      })}

      <StatsDisplay stats={stats} />
    </div>
  );
};

// File: src/components/dashboard/UserProfile.tsx

import { Card } from "@/components/ui/card";
import { UserCircle } from "lucide-react";

interface UserProfileProps {
  email: string;
  role: string;
}

export const UserProfile = ({ email, role }: UserProfileProps) => {
  return (
    <div className="flex items-center gap-4">
      <div className="bg-[#9b87f5]/10 rounded-full p-3">
        <UserCircle className="w-8 h-8 text-[#9b87f5]" />
      </div>
      <div className="space-y-1">
        <h2 className="text-xl font-medium font-serif text-white">
          Welcome back, <span className="text-[#9b87f5]">{email}</span>
        </h2>
        <p className="text-sm font-sans text-[#D6BCFA]/80">
          Role: <span className="font-medium capitalize">{role}</span>
        </p>
      </div>
    </div>
  );
};

// File: src/components/dashboard/thesis-map/BackgroundEffects.tsx

import React from 'react';
import { motion } from 'framer-motion';

export const BackgroundEffects = () => {
  return (
    <>
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(79,70,229,0.03),transparent_50%)]" />
      <motion.div
        className="absolute inset-0"
        initial={false}
        animate={{
          background: [
            'radial-gradient(600px circle at 50% 50%, rgba(79,70,229,0.02), transparent 80%)',
            'radial-gradient(800px circle at 50% 50%, rgba(79,70,229,0.04), transparent 80%)'
          ],
        }}
        transition={{ duration: 3, repeat: Infinity, repeatType: 'reverse' }}
      />
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-primary/10 rounded-full"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
            }}
            animate={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
            }}
            transition={{
              duration: Math.random() * 10 + 5,
              repeat: Infinity,
              repeatType: "reverse",
            }}
          />
        ))}
      </div>
    </>
  );
};

// File: src/components/dashboard/thesis-map/CentralProgress.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { BookOpen, Clock } from 'lucide-react';
import { Progress } from "@/components/ui/progress";

interface CentralProgressProps {
  totalProgress: number;
}

export const CentralProgress = ({ totalProgress }: CentralProgressProps) => {
  return (
    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
      <motion.div
        className="relative"
        animate={{ rotate: 360 }}
        transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
      >
        <div className="absolute -inset-32 border-2 border-dashed border-primary/20 rounded-full" />
      </motion.div>
      
      <motion.div
        className="relative z-10 bg-white p-8 rounded-full shadow-xl"
        whileHover={{ scale: 1.1 }}
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", duration: 1 }}
      >
        <motion.div
          className="absolute inset-0 bg-primary/5 rounded-full"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.5, 0.2, 0.5],
          }}
          transition={{ duration: 2, repeat: Infinity }}
        />
        <BookOpen size={48} className="text-primary relative z-10" />
      </motion.div>

      <div className="absolute -bottom-24 left-1/2 transform -translate-x-1/2">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col items-center"
        >
          <div className="relative w-16 h-16">
            <Progress
              value={totalProgress}
              className="h-16 w-16 [&>div]:h-16 [&>div]:w-16 rotate-[-90deg]"
            />
            <div className="absolute inset-0 flex items-center justify-center">
              <Clock className="h-6 w-6 text-primary" />
            </div>
          </div>
          <div className="mt-2 text-center">
            <p className="font-medium text-sm text-primary">{totalProgress}% Complete</p>
            <p className="text-xs text-muted-foreground">Overall Progress</p>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

// File: src/components/dashboard/thesis-map/SectionNode.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { CheckSquare, Square } from 'lucide-react';

interface SectionNodeProps {
  id: string;
  title: string;
  progress: number;
  complete: boolean;
  position: { x: number; y: number };
  hoveredSection: string | null;
  onHover: (id: string | null) => void;
}

export const SectionNode = ({
  id,
  title,
  progress,
  complete,
  position,
  hoveredSection,
  onHover
}: SectionNodeProps) => {
  return (
    <motion.div
      key={id}
      className="absolute top-1/2 left-1/2"
      style={{
        x: position.x,
        y: position.y,
      }}
      initial={{ opacity: 0, scale: 0 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ type: "spring", stiffness: 100 }}
    >
      <motion.div
        className={`bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg -translate-x-1/2 -translate-y-1/2 w-48 border border-primary/10
                   ${hoveredSection === id ? 'ring-2 ring-primary/20' : ''}`}
        whileHover={{ scale: 1.05, y: -5 }}
        onHoverStart={() => onHover(id)}
        onHoverEnd={() => onHover(null)}
      >
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            {complete ? (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ type: "spring" }}
              >
                <CheckSquare className="text-green-500" />
              </motion.div>
            ) : (
              <Square className="text-muted-foreground" />
            )}
            <span className="text-sm font-medium text-primary">{title}</span>
          </div>
          <div className="relative h-2 bg-muted rounded-full overflow-hidden">
            <motion.div
              className="absolute inset-y-0 left-0 bg-primary rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 1 }}
            />
          </div>
          <div className="flex justify-between items-center text-xs text-muted-foreground">
            <span>{progress}%</span>
            <span className={`px-2 py-1 rounded-full text-xs ${
              complete 
                ? 'bg-green-500/10 text-green-500' 
                : 'bg-primary/10 text-primary'
            }`}>
              {complete ? 'Completed' : 'In Progress'}
            </span>
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
};

// File: src/components/dashboard/thesis-map/StatsDisplay.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { ChartBar, ChartLine, ChartPie } from 'lucide-react';

interface StatsDisplayProps {
  stats: {
    total: number;
    inProgress: number;
    completed: number;
  };
}

export const StatsDisplay = ({ stats }: StatsDisplayProps) => {
  return (
    <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex gap-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="flex items-center gap-2 bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg"
      >
        <ChartBar className="text-primary h-5 w-5" />
        <div>
          <p className="text-xs text-muted-foreground">Total</p>
          <p className="text-lg font-semibold text-primary">{stats.total}</p>
        </div>
      </motion.div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
        className="flex items-center gap-2 bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg"
      >
        <ChartLine className="text-primary h-5 w-5" />
        <div>
          <p className="text-xs text-muted-foreground">In Progress</p>
          <p className="text-lg font-semibold text-primary">{stats.inProgress}</p>
        </div>
      </motion.div>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
        className="flex items-center gap-2 bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg"
      >
        <ChartPie className="text-primary h-5 w-5" />
        <div>
          <p className="text-xs text-muted-foreground">Completed</p>
          <p className="text-lg font-semibold text-primary">{stats.completed}</p>
        </div>
      </motion.div>
    </div>
  );
};

// File: src/components/editor/SectionContent.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { MarkdownEditor } from '@/components/MarkdownEditor';
import { TaskItem } from '@/components/ui/TaskInput'; // Import TaskItem
import { Button } from '../ui/button';
import { PlusCircle } from 'lucide-react';
import { v4 as uuidv4 } from 'uuid';

interface SectionContentProps {
  section: Section;
  isActive: boolean;
  onContentChange: (content: string) => void;
  onUpdateSectionData: (section: Section) => void;
}

export const SectionContent: React.FC<SectionContentProps> = ({
  section,
  isActive,
  onContentChange,
  onUpdateSectionData
}) => {
  const [showTasks, setShowTasks] = React.useState(false);

  if (!isActive) return null;

  const handleAddSectionTask = () => {
    const newTask = {
      id: uuidv4(),
      description: 'New Task',
      status: 'pending' as const,
      priority: 'medium' as const
    };
    onUpdateSectionData({ ...section, tasks: [...(section.tasks || []), newTask] });
  };

  const handleUpdateTaskStatus = (id: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => {
    const updatedTasks = (section.tasks || []).map(task =>
      task.id === id ? { ...task, status } : task
    );
    onUpdateSectionData({ ...section, tasks: updatedTasks });
  };

  const handleTaskDescription = (id: string, newDescription: string) => {
    const updatedTasks = (section.tasks || []).map(task =>
      task.id === id ? { ...task, description: newDescription } : task
    );
    onUpdateSectionData({ ...section, tasks: updatedTasks });
  };

  return (
    <div className="editor-content">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium">Tasks</h3>
        <Button size="sm" onClick={() => setShowTasks(!showTasks)} variant="outline">
          {showTasks ? 'Hide tasks' : 'Show Tasks'}
        </Button>
      </div>
      {showTasks && (
        <div className="space-y-2 mb-4">
          {(section.tasks || []).map((task) => (
            <TaskItem
              key={task.id}
              id={task.id}
              description={task.description}
              status={task.status}
              onToggleStatus={(status) => handleUpdateTaskStatus(task.id, status)}
              onChangeDescription={(newDescription) => handleTaskDescription(task.id, newDescription)}
            />
          ))}
          <Button
            variant="outline"
            size="sm"
            onClick={handleAddSectionTask}
            className="gap-2 bg-transparent"
          >
            <PlusCircle className="w-4 h-4" />
            Add Task
          </Button>
        </div>
      )}
      <MarkdownEditor
        key={section.id} // Add key to force remount
        value={section.content}
        onChange={onContentChange}
        placeholder="Start writing..."
      />
    </div>
  );
};


// File: src/components/editor/SectionHeader.tsx

import React from 'react';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';

interface SectionHeaderProps {
  title: string;
  required?: boolean;
  onTitleChange: (title: string) => void;
}

export const SectionHeader = ({ title, required, onTitleChange }: SectionHeaderProps) => {
  console.log('Rendering SectionHeader:', { title, required });
  
  return (
    <div className="editor-header">
      <div className="flex items-center gap-3">
        <Input
          value={title}
          onChange={(e) => onTitleChange(e.target.value)}
          className="text-xl font-serif border-none bg-transparent px-0 focus-visible:ring-0 
                     text-editor-text placeholder:text-editor-placeholder"
          placeholder="Section Title"
        />
        {required && (
          <Badge variant="secondary" className="bg-editor-accent/10 text-editor-accent">
            Required
          </Badge>
        )}
      </div>
    </div>
  );
};

// File: src/components/editor/SectionManagers.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { FigureManager } from '../FigureManager';
import { TableManager } from '../TableManager';
import { CitationManager } from '../CitationManager';
import { ReferenceManager } from '../ReferenceManager';
import { Image, Table, Quote, BookOpen } from 'lucide-react';

interface SectionManagersProps {
  section: Section;
  onSectionUpdate: (updatedSection: Section) => void;
}

export const SectionManagers = ({ section, onSectionUpdate }: SectionManagersProps) => {
  console.log('Rendering SectionManagers:', { 
    sectionId: section.id,
    figuresCount: section.figures?.length,
    tablesCount: section.tables?.length,
    citationsCount: section.citations?.length
  });

  const handleFigureUpdate = (figures: Section['figures']) => {
    console.log('Updating figures:', figures);
    onSectionUpdate({
      ...section,
      figures
    });
  };

  const handleTableUpdate = (tables: Section['tables']) => {
    console.log('Updating tables:', tables);
    onSectionUpdate({
      ...section,
      tables
    });
  };

  const handleCitationUpdate = (citations: Section['citations']) => {
    console.log('Updating citations:', citations);
    onSectionUpdate({
      ...section,
      citations
    });
  };

  const handleReferenceUpdate = (references: Section['references']) => {
    console.log('Updating references:', references);
    onSectionUpdate({
      ...section,
      references
    });
  };

  return (
    <div className="space-y-8 pt-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-6 rounded-lg border-2 transition-all duration-200 hover:shadow-lg
          bg-editor-manager-figure-bg border-editor-manager-figure-border">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 rounded-full bg-white">
              <Image className="w-5 h-5 text-editor-manager-figure-icon" />
            </div>
            <h3 className="text-lg font-serif font-medium">Figures</h3>
          </div>
          <FigureManager
            figures={section.figures}
            onAddFigure={(figure) => handleFigureUpdate([...section.figures, figure])}
            onRemoveFigure={(id) => handleFigureUpdate(section.figures.filter(f => f.id !== id))}
            onUpdateFigure={(figure) => handleFigureUpdate(section.figures.map(f => f.id === figure.id ? figure : f))}
          />
        </div>

        <div className="p-6 rounded-lg border-2 transition-all duration-200 hover:shadow-lg
          bg-editor-manager-table-bg border-editor-manager-table-border">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 rounded-full bg-white">
              <Table className="w-5 h-5 text-editor-manager-table-icon" />
            </div>
            <h3 className="text-lg font-serif font-medium">Tables</h3>
          </div>
          <TableManager
            tables={section.tables}
            onAddTable={(table) => handleTableUpdate([...section.tables, table])}
            onRemoveTable={(id) => handleTableUpdate(section.tables.filter(t => t.id !== id))}
            onUpdateTable={(table) => handleTableUpdate(section.tables.map(t => t.id === table.id ? table : t))}
          />
        </div>

        <div className="p-6 rounded-lg border-2 transition-all duration-200 hover:shadow-lg
          bg-editor-manager-citation-bg border-editor-manager-citation-border">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 rounded-full bg-white">
              <Quote className="w-5 h-5 text-editor-manager-citation-icon" />
            </div>
            <h3 className="text-lg font-serif font-medium">Citations</h3>
          </div>
          <CitationManager
            citations={section.citations}
            onCitationCreate={(citation) => handleCitationUpdate([...section.citations, citation])}
            onCitationUpdate={(citation) => handleCitationUpdate(section.citations.map(c => c.id === citation.id ? citation : c))}
            onCitationDelete={(citation) => handleCitationUpdate(section.citations.filter(c => c.id !== citation.id))}
            thesisId={section.id}
          />
        </div>

        {section.type === 'references' && (
          <div className="p-6 rounded-lg border-2 transition-all duration-200 hover:shadow-lg
            bg-editor-manager-reference-bg border-editor-manager-reference-border">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-white">
                <BookOpen className="w-5 h-5 text-editor-manager-reference-icon" />
              </div>
              <h3 className="text-lg font-serif font-medium">References</h3>
            </div>
            <ReferenceManager
              items={section.references || []}
              onAdd={(reference) => handleReferenceUpdate([...(section.references || []), reference])}
              onRemove={(id) => handleReferenceUpdate((section.references || []).filter(r => r.id !== id))}
              onUpdate={(reference) => handleReferenceUpdate((section.references || []).map(r => r.id === reference.id ? reference : r))}
            />
          </div>
        )}
      </div>
    </div>
  );
};


// File: src/components/editor/chapters/ChapterCitations.tsx

import React from 'react';
import { Chapter, Citation } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { CitationSearch } from '../../citation/CitationSearch';
import { Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ChapterCitationsProps {
  chapter: Chapter;
  onUpdateChapter: (chapter: Chapter) => void;
}

export const ChapterCitations: React.FC<ChapterCitationsProps> = ({
  chapter,
  onUpdateChapter
}) => {
  const { toast } = useToast();

  const handleAddCitation = (citation: Omit<Citation, "thesis_id">) => {
    if (chapter.sections[0]) {
      const updatedSections = [...chapter.sections];
      updatedSections[0] = {
        ...updatedSections[0],
        citations: [...(updatedSections[0].citations || []), { ...citation, thesis_id: chapter.id }]
      };

      onUpdateChapter({
        ...chapter,
        sections: updatedSections
      });

      toast({
        title: "Citation Added",
        description: "New citation has been added to the chapter",
      });
    }
  };

  const handleRemoveCitation = (citationId: string) => {
    const updatedSections = chapter.sections.map(section => ({
      ...section,
      citations: section.citations.filter(c => c.id !== citationId)
    }));

    onUpdateChapter({
      ...chapter,
      sections: updatedSections
    });

    toast({
      title: "Citation Removed",
      description: "Citation has been removed from the chapter",
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium">Citations</h3>
        <CitationSearch onCitationSelect={handleAddCitation} />
      </div>
      <div className="space-y-2">
        {chapter.sections[0]?.citations?.map((citation) => (
          <div key={citation.id} className="border p-4 rounded-lg group relative">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => handleRemoveCitation(citation.id)}
              className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
            <p className="font-medium">{citation.text}</p>
            <p className="text-sm text-gray-600">
              {citation.authors.join(', ')} ({citation.year})
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

// File: src/components/editor/chapters/ChapterContent.tsx

import React from 'react';
import { Chapter, Section } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { PlusCircle, Trash2 } from 'lucide-react';
import { MarkdownEditor } from '@/components/MarkdownEditor';
import { useToast } from '@/hooks/use-toast';
import { SectionItem } from '../sections/SectionItem';

interface ChapterContentProps {
  chapter: Chapter;
  onUpdateChapter: (chapter: Chapter) => void;
}

export const ChapterContent: React.FC<ChapterContentProps> = ({
  chapter,
  onUpdateChapter
}) => {
  const { toast } = useToast();

  const handleAddSection = () => {
    const newSection: Section = {
      id: Date.now().toString(),
      title: 'New Section',
      content: '',
      type: 'custom',
      order: chapter.sections.length + 1,
      figures: [],
      tables: [],
      citations: [],
      references: [],
      tasks: []
    };

    onUpdateChapter({
      ...chapter,
      sections: [...chapter.sections, newSection]
    });

    toast({
      title: "Section Added",
      description: "New section has been added to the chapter",
    });
  };

  const handleRemoveSection = (sectionId: string) => {
    onUpdateChapter({
      ...chapter,
      sections: chapter.sections.filter(s => s.id !== sectionId)
    });

    toast({
      title: "Section Removed",
      description: "Section has been removed from the chapter",
    });
  };

  return (
    <div className="pt-4 border-t space-y-6">
      <div className="space-y-2">
        <label className="text-sm font-medium text-gray-700">Chapter Introduction</label>
        <MarkdownEditor
          value={chapter.content || ''}
          onChange={(value) => onUpdateChapter({
            ...chapter,
            content: value || ''
          })}
          placeholder="Write your chapter introduction here..."
        />
      </div>

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-gray-900">Sections</h3>
          <Button
            onClick={handleAddSection}
            variant="outline"
            size="sm"
            className="gap-2"
          >
            <PlusCircle className="w-4 h-4" />
            Add Section
          </Button>
        </div>

        <div className="space-y-4">
          {chapter.sections.map((section, index) => (
            <div key={section.id} className="group relative">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleRemoveSection(section.id)}
                className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive hover:bg-destructive/10"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
              <SectionItem
                section={section}
                sectionNumber={index + 1}
                onUpdateSection={(updatedSection) => {
                  onUpdateChapter({
                    ...chapter,
                    sections: chapter.sections.map((s) =>
                      s.id === updatedSection.id ? updatedSection : s
                    ),
                  });
                }}
              />
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};


// File: src/components/editor/chapters/ChapterCreationDialog.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Figure } from '@/types/thesis';

interface ChapterCreationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onChapterCreate: (chapter: any) => void;
}

export const ChapterCreationDialog: React.FC<ChapterCreationDialogProps> = ({
  open,
  onOpenChange,
  onChapterCreate,
}) => {
  const [title, setTitle] = useState('');
  const [figures, setFigures] = useState<Figure[]>([]);

  const handleAddFigure = (file: File) => {
    const newFigure: Figure = {
      id: Date.now().toString(),
      imageUrl: URL.createObjectURL(file),
      caption: '',
      altText: '',
      title: '',
      number: figures.length + 1 || 1,
      dimensions: {
        width: 0,
        height: 0
      }
    };
    
    setFigures(prevFigures => [...prevFigures, newFigure]);
  };

  const handleCreateChapter = () => {
    const newChapter = {
      id: Date.now().toString(),
      title,
      figures,
      sections: [],
      order: 1
    };
    onChapterCreate(newChapter);
    setTitle('');
    setFigures([]);
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Chapter</DialogTitle>
          <DialogDescription>
            <div className="space-y-4">
              <Input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Chapter Title"
                className="w-full"
              />
              <div>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    if (e.target.files) {
                      Array.from(e.target.files).forEach(handleAddFigure);
                    }
                  }}
                  className="w-full"
                />
              </div>
              <Button onClick={handleCreateChapter} className="w-full">
                Create Chapter
              </Button>
            </div>
          </DialogDescription>
        </DialogHeader>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/editor/chapters/ChapterFigures.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { Figure } from '@/types/thesis';

interface ChapterFiguresProps {
  chapter: {
    id?: string;
    figures?: Figure[];
  };
  onUpdateChapter: (updatedChapter: any) => void;
}

export const ChapterFigures: React.FC<ChapterFiguresProps> = ({
  chapter,
  onUpdateChapter
}) => {
  const [newFigureFile, setNewFigureFile] = useState<File | null>(null);
  const { toast } = useToast();

  console.log('ChapterFigures rendering with:', { 
    chapterId: chapter?.id,
    figuresCount: chapter?.figures?.length 
  });

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files?.[0]) {
      setNewFigureFile(e.target.files[0]);
    }
  };

  const handleAddFigure = (file: File) => {
    const figures = chapter.figures || [];
    const newFigure: Figure = {
      id: Date.now().toString(),
      imageUrl: URL.createObjectURL(file),
      caption: '',
      altText: '',
      title: '',
      number: figures.length + 1,
      dimensions: {
        width: 0,
        height: 0
      },
      position: 'center'
    };

    console.log('Adding new figure:', newFigure);

    onUpdateChapter({
      ...chapter,
      figures: [...figures, newFigure]
    });

    toast({
      title: "Success",
      description: "Figure added successfully",
    });

    setNewFigureFile(null);
  };

  // Ensure figures is always an array
  const figures = chapter.figures || [];

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Figures</h3>
      <div className="flex items-center gap-2 mb-4">
        <Input 
          type="file" 
          accept="image/*" 
          onChange={handleFileChange}
          className="flex-1"
        />
        <Button 
          onClick={() => newFigureFile && handleAddFigure(newFigureFile)}
          disabled={!newFigureFile}
        >
          Add Figure
        </Button>
      </div>
      <div className="space-y-4">
        {figures.map((figure) => (
          <div 
            key={figure.id} 
            className="flex items-center justify-between p-4 bg-background rounded-lg border"
          >
            <img 
              src={figure.imageUrl} 
              alt={figure.altText} 
              className="w-20 h-20 object-cover rounded-md"
            />
            <div className="flex flex-col flex-1 ml-4">
              <span className="font-medium">{figure.title || 'Untitled Figure'}</span>
              <span className="text-sm text-muted-foreground">
                {figure.caption || 'No caption'}
              </span>
            </div>
          </div>
        ))}
        {figures.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No figures added yet. Upload an image to get started.
          </div>
        )}
      </div>
    </div>
  );
};


// File: src/components/editor/chapters/ChapterItem.tsx

import React, { useState } from 'react';
import { Chapter } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import { ChevronDown, ChevronUp, GripVertical } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ChapterContent } from './ChapterContent';
import { ChapterFigures } from './ChapterFigures';
import { ChapterTables } from './ChapterTables';
import { ChapterCitations } from './ChapterCitations';
import { ChapterReferences } from './ChapterReferences';

interface ChapterItemProps {
  chapter: Chapter;
  chapterNumber: number;
  isOpen: boolean;
  onToggle: () => void;
  onUpdateChapter: (chapter: Chapter) => void;
  isSelected?: boolean;
  onSelect?: () => void;
}

export const ChapterItem: React.FC<ChapterItemProps> = ({
  chapter,
  chapterNumber,
  isOpen,
  onToggle,
  onUpdateChapter,
  isSelected = false,
  onSelect
}) => {
  const [activeTab, setActiveTab] = useState('content');

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onUpdateChapter({
      ...chapter,
      title: e.target.value
    });
  };

  return (
    <div className={cn(
      "border rounded-xl bg-white shadow-sm transition-all duration-200",
      "hover:shadow-md",
      isOpen && "ring-2 ring-primary/10",
      isSelected && "ring-2 ring-primary"
    )}>
      <div className="p-4 flex items-center justify-between group">
        <div className="flex items-center gap-3">
          <Checkbox
            checked={isSelected}
            onCheckedChange={() => onSelect?.()}
            className="ml-2"
          />
          <div className="p-2 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors cursor-move">
            <GripVertical className="w-4 h-4 text-gray-500" />
          </div>
          <div className="flex items-center gap-2">
            <div className="bg-primary/10 text-primary font-medium px-3 py-1 rounded-md">
              Ch. {chapterNumber}
            </div>
            <Input
              value={chapter.title}
              onChange={handleTitleChange}
              className="text-xl font-serif border-none bg-transparent px-0 focus-visible:ring-0 w-full min-w-[300px]"
              placeholder="Chapter Title"
            />
          </div>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500">
            {chapter.sections.length} {chapter.sections.length === 1 ? 'section' : 'sections'}
          </span>
          <Button
            variant="ghost"
            size="sm"
            onClick={onToggle}
            className="p-2"
          >
            {isOpen ? (
              <ChevronUp className="w-5 h-5 text-gray-500" />
            ) : (
              <ChevronDown className="w-5 h-5 text-gray-500" />
            )}
          </Button>
        </div>
      </div>

      {isOpen && (
        <div className="p-4 pt-0 space-y-4">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="content">Content</TabsTrigger>
              <TabsTrigger value="figures">Figures</TabsTrigger>
              <TabsTrigger value="tables">Tables</TabsTrigger>
              <TabsTrigger value="citations">Citations</TabsTrigger>
              <TabsTrigger value="references">References</TabsTrigger>
            </TabsList>

            <TabsContent value="content">
              <ChapterContent 
                chapter={chapter}
                onUpdateChapter={onUpdateChapter}
              />
            </TabsContent>

            <TabsContent value="figures">
              <ChapterFigures
                chapter={chapter}
                onUpdateChapter={onUpdateChapter}
              />
            </TabsContent>

            <TabsContent value="tables">
              <ChapterTables
                chapter={chapter}
                onUpdateChapter={onUpdateChapter}
              />
            </TabsContent>

            <TabsContent value="citations">
              <ChapterCitations
                chapter={chapter}
                onUpdateChapter={onUpdateChapter}
              />
            </TabsContent>

            <TabsContent value="references">
              <ChapterReferences
                chapter={chapter}
                onUpdateChapter={onUpdateChapter}
              />
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  );
};

// File: src/components/editor/chapters/ChapterReferences.tsx

import React from 'react';
import { Chapter, Reference } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { ReferenceDialog } from '../../reference/ReferenceDialog';
import { Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ChapterReferencesProps {
  chapter: Chapter;
  onUpdateChapter: (chapter: Chapter) => void;
}

export const ChapterReferences: React.FC<ChapterReferencesProps> = ({
  chapter,
  onUpdateChapter
}) => {
  const { toast } = useToast();

  const handleAddReference = (reference: Reference) => {
    if (chapter.sections[0]) {
      const updatedSections = [...chapter.sections];
      updatedSections[0] = {
        ...updatedSections[0],
        references: [...(updatedSections[0].references || []), reference]
      };

      onUpdateChapter({
        ...chapter,
        sections: updatedSections
      });

      toast({
        title: "Reference Added",
        description: "New reference has been added to the chapter",
      });
    }
  };

  const handleRemoveReference = (referenceId: string) => {
    const updatedSections = chapter.sections.map(section => ({
      ...section,
      references: section.references?.filter(r => r.id !== referenceId) || []
    }));

    onUpdateChapter({
      ...chapter,
      sections: updatedSections
    });

    toast({
      title: "Reference Removed",
      description: "Reference has been removed from the chapter",
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium">References</h3>
        <ReferenceDialog onAddReference={handleAddReference} />
      </div>
      <div className="space-y-2">
        {chapter.sections[0]?.references?.map((reference) => (
          <div key={reference.id} className="border p-4 rounded-lg group relative">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => handleRemoveReference(reference.id)}
              className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
            <p className="font-medium">{reference.title}</p>
            <p className="text-sm text-gray-600">
              {reference.authors.join(', ')} ({reference.year})
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

// File: src/components/editor/chapters/ChapterTables.tsx

import React from 'react';
import { Chapter, Table } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { TableDialog } from '../../table/TableDialog';
import { Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ChapterTablesProps {
  chapter: Chapter;
  onUpdateChapter: (chapter: Chapter) => void;
}

export const ChapterTables: React.FC<ChapterTablesProps> = ({
  chapter,
  onUpdateChapter
}) => {
  const { toast } = useToast();

  const handleAddTable = (table: Table) => {
    if (chapter.sections[0]) {
      const updatedSections = [...chapter.sections];
      updatedSections[0] = {
        ...updatedSections[0],
        tables: [...(updatedSections[0].tables || []), table]
      };

      onUpdateChapter({
        ...chapter,
        sections: updatedSections
      });

      toast({
        title: "Table Added",
        description: "New table has been added to the chapter",
      });
    }
  };

  const handleRemoveTable = (tableId: string) => {
    const updatedSections = chapter.sections.map(section => ({
      ...section,
      tables: section.tables.filter(t => t.id !== tableId)
    }));

    onUpdateChapter({
      ...chapter,
      sections: updatedSections
    });

    toast({
      title: "Table Removed",
      description: "Table has been removed from the chapter",
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium">Tables</h3>
        <TableDialog onAddTable={handleAddTable} />
      </div>
      <div className="space-y-4">
        {chapter.sections[0]?.tables?.map((table) => (
          <div key={table.id} className="border p-4 rounded-lg group relative">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => handleRemoveTable(table.id)}
              className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
            <div dangerouslySetInnerHTML={{ __html: table.content }} />
          </div>
        ))}
      </div>
    </div>
  );
};

// File: src/components/editor/content/EditorContent.tsx

import React from 'react';
import { EditorSection } from '../section/EditorSection';
import { MarkdownEditor } from '@/components/MarkdownEditor';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';

interface EditorContentProps {
  title: string;
  content: string;
  required?: boolean;
  onTitleChange: (title: string) => void;
  onContentChange: (content: string) => void;
}

export const EditorContent = ({
  title,
  content,
  required,
  onTitleChange,
  onContentChange
}: EditorContentProps) => {
  return (
    <EditorSection>
      <div className="space-y-6">
        <div className="flex items-center gap-3">
          <Input
            value={title}
            onChange={(e) => onTitleChange(e.target.value)}
            className="text-xl font-serif border-none bg-transparent px-0 focus-visible:ring-0 text-editor-text"
            placeholder="Section Title"
          />
          {required && (
            <Badge variant="secondary" className="bg-editor-accent/10 text-editor-accent">
              Required
            </Badge>
          )}
        </div>
        
        <MarkdownEditor
          value={content}
          onChange={(value) => onContentChange(value || '')}
          placeholder="Start writing..."
        />
      </div>
    </EditorSection>
  );
};

// File: src/components/editor/layout/EditorLayout.tsx

import React from 'react';
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface EditorLayoutProps {
  sidebar?: React.ReactNode;
  content?: React.ReactNode;
  preview?: React.ReactNode;
  reviewPanel?: React.ReactNode;
  showPreview?: boolean;
}

export const EditorLayout = ({ 
  sidebar, 
  content, 
  preview, 
  reviewPanel,
  showPreview = false 
}: EditorLayoutProps) => {
  console.log('EditorLayout render:', { showPreview, hasPreview: !!preview });
  
  return (
    <div className="h-screen bg-background flex flex-col overflow-hidden animate-fade-in">
      <ResizablePanelGroup direction="horizontal">
        {sidebar && (
          <>
            <ResizablePanel defaultSize={20} minSize={15} maxSize={30} className="h-screen">
              <ScrollArea className="h-full">
                {sidebar}
              </ScrollArea>
            </ResizablePanel>
            <ResizableHandle withHandle />
          </>
        )}
        
        <ResizablePanel 
          defaultSize={showPreview ? 40 : 60} 
          minSize={30}
          className="h-screen"
        >
          <ScrollArea className="h-full">
            <div className="p-6">
              {content}
            </div>
          </ScrollArea>
        </ResizablePanel>

        {showPreview && preview && (
          <>
            <ResizableHandle withHandle />
            <ResizablePanel defaultSize={20} minSize={20} className="h-screen">
              <ScrollArea className="h-full">
                <div className="p-6">
                  {preview}
                </div>
              </ScrollArea>
            </ResizablePanel>
          </>
        )}

        {reviewPanel && (
          <>
            <ResizableHandle withHandle />
            <ResizablePanel defaultSize={20} minSize={15} maxSize={30} className="h-screen">
              <ScrollArea className="h-full">
                <div className="p-6">
                  {reviewPanel}
                </div>
              </ScrollArea>
            </ResizablePanel>
          </>
        )}
      </ResizablePanelGroup>
    </div>
  );
};

// File: src/components/editor/managers/FigureList.tsx

import React from 'react';
import { Figure } from '@/types/thesis';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { X, ZoomIn } from 'lucide-react';
import { Label } from '@/components/ui/label';

interface FigureListProps {
  figures: Figure[];
  onRemove: (id: string) => void;
  onUpdate: (figure: Figure) => void;
  onPreview: (imageUrl: string) => void;
}

export const FigureList = ({ figures, onRemove, onUpdate, onPreview }: FigureListProps) => {
  console.log('Rendering FigureList:', { figuresCount: figures.length });

  const handleInputChange = (
    figureId: string,
    field: 'title' | 'caption' | 'altText',
    value: string
  ) => {
    const figure = figures.find(f => f.id === figureId);
    if (figure) {
      console.log('Updating figure:', { figureId, field, value });
      onUpdate({
        ...figure,
        [field]: value
      });
    }
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {figures.map((figure) => (
        <Card key={figure.id} className="border-2 border-editor-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Figure {figure.number}
            </CardTitle>
            <div className="flex gap-2">
              {figure.imageUrl && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onPreview(figure.imageUrl)}
                  className="h-8 w-8 p-0"
                >
                  <ZoomIn className="w-4 h-4" />
                </Button>
              )}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onRemove(figure.id)}
                className="h-8 w-8 p-0"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {figure.imageUrl && (
              <img
                src={figure.imageUrl}
                alt={figure.altText || 'Figure preview'}
                className="w-full h-32 object-contain bg-accent/10 rounded-lg"
              />
            )}
            <div className="space-y-3">
              <div className="space-y-2">
                <Label>Title</Label>
                <Input
                  placeholder="Enter title"
                  value={figure.title || ''}
                  onChange={(e) => handleInputChange(figure.id, 'title', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label>Caption</Label>
                <Input
                  placeholder="Enter caption"
                  value={figure.caption || ''}
                  onChange={(e) => handleInputChange(figure.id, 'caption', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label>Alt Text</Label>
                <Input
                  placeholder="Enter alt text"
                  value={figure.altText || ''}
                  onChange={(e) => handleInputChange(figure.id, 'altText', e.target.value)}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

// File: src/components/editor/managers/FigureUpload.tsx

import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Card } from '@/components/ui/card';

interface FigureUploadProps {
  onUpload: (
    file: File, 
    position: 'left' | 'center' | 'right',
    customWidth?: number,
    customHeight?: number,
    border?: {
      style: 'single' | 'double' | 'thick' | 'none';
      size: number;
      color: string;
    }
  ) => void;
  imageUrl?: string;
  altText?: string;
}

export const FigureUpload: React.FC<FigureUploadProps> = ({ onUpload, imageUrl, altText }) => {
  const [position, setPosition] = useState<'left' | 'center' | 'right'>('center');
  const [customWidth, setCustomWidth] = useState<number>();
  const [customHeight, setCustomHeight] = useState<number>();
  const [maintainAspectRatio, setMaintainAspectRatio] = useState(true);
  const [border, setBorder] = useState<{
    style: 'single' | 'double' | 'thick' | 'none';
    size: number;
    color: string;
  }>({
    style: 'none',
    size: 1,
    color: '#000000'
  });
  const [originalDimensions, setOriginalDimensions] = useState<{width: number, height: number}>();

  const handleDrop = useCallback(
    (acceptedFiles: File[]) => {
      if (acceptedFiles && acceptedFiles.length > 0) {
        const file = acceptedFiles[0];
        const img = new Image();
        img.onload = () => {
          setOriginalDimensions({ width: img.width, height: img.height });
          setCustomWidth(img.width);
          setCustomHeight(img.height);
        };
        img.src = URL.createObjectURL(file);
        onUpload(file, position, customWidth, customHeight, border);
      }
    },
    [onUpload, position, customWidth, customHeight, border]
  );

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg', '.gif']
    },
    multiple: false,
    onDrop: handleDrop,
  });

  const handleWidthChange = (width: number) => {
    setCustomWidth(width);
    if (maintainAspectRatio && originalDimensions) {
      const ratio = originalDimensions.height / originalDimensions.width;
      setCustomHeight(Math.round(width * ratio));
    }
  };

  const handleHeightChange = (height: number) => {
    setCustomHeight(height);
    if (maintainAspectRatio && originalDimensions) {
      const ratio = originalDimensions.width / originalDimensions.height;
      setCustomWidth(Math.round(height * ratio));
    }
  };

  return (
    <div className="space-y-6">
      <div
        {...getRootProps()}
        className="relative aspect-video mb-4 bg-gray-100 rounded-lg overflow-hidden cursor-pointer border-2 border-dashed border-gray-300 hover:border-primary transition-colors"
      >
        <input {...getInputProps()} />
        {imageUrl ? (
          <img
            src={imageUrl}
            alt={altText}
            className="object-contain w-full h-full"
          />
        ) : (
          <div className="flex flex-col items-center justify-center h-full">
            <Upload className="w-8 h-8 text-gray-400" />
            <p className="text-sm text-gray-500 mt-2">Drop image here or click to upload</p>
          </div>
        )}
      </div>

      <Card className="p-4 space-y-4">
        <div>
          <Label htmlFor="position">Position</Label>
          <Select 
            value={position} 
            onValueChange={(value: 'left' | 'center' | 'right') => setPosition(value)}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Center" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="left">Left</SelectItem>
              <SelectItem value="center">Center</SelectItem>
              <SelectItem value="right">Right</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Maintain Aspect Ratio</Label>
            <Switch 
              checked={maintainAspectRatio}
              onCheckedChange={setMaintainAspectRatio}
            />
          </div>

          <div className="space-y-2">
            <Label>Width (px)</Label>
            <Input
              type="number"
              value={customWidth}
              onChange={(e) => handleWidthChange(Number(e.target.value))}
              min={1}
            />
          </div>

          <div className="space-y-2">
            <Label>Height (px)</Label>
            <Input
              type="number"
              value={customHeight}
              onChange={(e) => handleHeightChange(Number(e.target.value))}
              min={1}
            />
          </div>
        </div>

        <div className="space-y-4">
          <Label>Border Style</Label>
          <Select 
            value={border.style}
            onValueChange={(value: 'none' | 'single' | 'double' | 'thick') => 
              setBorder(prev => ({ ...prev, style: value }))}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="None" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="none">None</SelectItem>
              <SelectItem value="single">Single</SelectItem>
              <SelectItem value="double">Double</SelectItem>
              <SelectItem value="thick">Thick</SelectItem>
            </SelectContent>
          </Select>

          {border.style !== 'none' && (
            <>
              <div className="space-y-2">
                <Label>Border Size (px)</Label>
                <Slider
                  value={[border.size]}
                  onValueChange={([value]) => setBorder(prev => ({ ...prev, size: value }))}
                  min={1}
                  max={10}
                  step={1}
                />
              </div>

              <div className="space-y-2">
                <Label>Border Color</Label>
                <Input
                  type="color"
                  value={border.color}
                  onChange={(e) => setBorder(prev => ({ ...prev, color: e.target.value }))}
                  className="h-10"
                />
              </div>
            </>
          )}
        </div>
      </Card>
    </div>
  );
};

// File: src/components/editor/section/EditorSection.tsx

import React from 'react';
import { cn } from '@/lib/utils';

interface EditorSectionProps {
  children: React.ReactNode;
  className?: string;
}

export const EditorSection = ({ children, className }: EditorSectionProps) => {
  return (
    <div className={cn(
      "bg-editor-bg border border-editor-border rounded-lg p-6 mb-6",
      "shadow-lg transition-all duration-200 hover:shadow-xl",
      "backdrop-blur-sm backdrop-filter",
      className
    )}>
      {children}
    </div>
  );
};

// File: src/components/editor/sections/SectionItem.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { FileText, GripVertical } from 'lucide-react';
import { cn } from '@/lib/utils';

interface SectionItemProps {
  section: Section;
  sectionNumber: number;
  onUpdateSection: (updatedSection: Section) => void;
}

export const SectionItem: React.FC<SectionItemProps> = ({
  section,
  sectionNumber,
  onUpdateSection,
}) => {
  return (
    <div className={cn(
      "border rounded-lg p-4 space-y-4 bg-gray-50/50 mb-4",
      "hover:shadow-sm transition-all duration-200",
      "group"
    )}>
      <div className="flex items-center gap-3">
        <div className="p-2 bg-white rounded-lg group-hover:bg-gray-100 transition-colors">
          <GripVertical className="w-4 h-4 text-gray-500" />
        </div>
        <div className="flex items-center gap-2 flex-1">
          <div className="bg-gray-200 text-gray-700 font-medium px-2 py-1 rounded text-sm">
            {sectionNumber}
          </div>
          <Input
            value={section.title}
            onChange={(e) => onUpdateSection({ ...section, title: e.target.value })}
            className="text-lg font-medium bg-transparent border-none focus-visible:ring-1 focus-visible:ring-primary/20 px-2"
            placeholder="Section Title"
          />
        </div>
      </div>

      <Textarea
        value={section.content}
        onChange={(e) => onUpdateSection({ ...section, content: e.target.value })}
        className="min-h-[100px] bg-white border focus-visible:ring-1 focus-visible:ring-primary/20"
        placeholder="Start writing your section content..."
      />

      <div className="flex items-center gap-2 text-sm text-gray-500">
        <FileText className="w-4 h-4" />
        <span>{section.content.length} characters</span>
      </div>
    </div>
  );
};

// File: src/components/error/ErrorState.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { AlertCircle } from 'lucide-react';

export interface ErrorStateProps {
  error: string;
  onRetry?: () => void;
}

export const ErrorState = ({ error, onRetry }: ErrorStateProps) => {
  return (
    <div className="flex flex-col items-center justify-center p-8 space-y-4">
      <AlertCircle className="w-12 h-12 text-destructive" />
      <h3 className="text-lg font-medium">Something went wrong</h3>
      <p className="text-sm text-muted-foreground">{error}</p>
      {onRetry && (
        <Button onClick={onRetry} variant="outline">
          Try again
        </Button>
      )}
    </div>
  );
};

// File: src/components/landing/DemoPreview.tsx

import React from "react";
import { motion } from "framer-motion";
import { Edit3, Users, GitBranch, FileCheck } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";

export const DemoPreview = () => {
  const features = [
    {
      icon: Edit3,
      title: "Smart Editor",
      description: "Write and format your thesis with our intelligent editor"
    },
    {
      icon: Users,
      title: "Real-time Collaboration",
      description: "Work together with advisors and peers seamlessly"
    },
    {
      icon: GitBranch,
      title: "Version Control",
      description: "Track changes and manage different versions effortlessly"
    },
    {
      icon: FileCheck,
      title: "Export Options",
      description: "Export your thesis in multiple formats including DOCX and PDF"
    }
  ];

  return (
    <section className="py-20 bg-gradient-to-b from-white to-gray-50">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-12">
          <motion.h2 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-3xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-admin-accent-primary to-admin-accent-secondary"
          >
            See How It Works
          </motion.h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Experience the power of our thesis writing platform through this interactive demo
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
          <div className="bg-gradient-to-b from-white to-gray-50 p-8 rounded-xl shadow-lg">
            <div className="aspect-video bg-gray-100 rounded-lg mb-6 overflow-hidden">
              <img 
                src="/placeholder.svg" 
                alt="Editor Demo" 
                className="w-full h-full object-cover"
              />
            </div>
            <Link to="/auth">
              <Button className="w-full bg-gradient-to-r from-admin-accent-primary to-admin-accent-secondary hover:opacity-90 text-white">
                Try the Editor
              </Button>
            </Link>
          </div>
          
          <div className="grid grid-cols-1 gap-6">
            {features.map((feature, index) => (
              <motion.div
                key={feature.title}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
                className="flex items-start gap-4 p-6 bg-gradient-to-b from-white to-gray-50 rounded-lg shadow-sm hover:shadow-md transition-all"
              >
                <div className="p-2 bg-admin-accent-primary/10 rounded-lg">
                  <feature.icon className="w-6 h-6 text-admin-accent-primary" />
                </div>
                <div>
                  <h3 className="font-semibold mb-1 text-admin-accent-primary">{feature.title}</h3>
                  <p className="text-sm text-gray-600">{feature.description}</p>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

// File: src/components/landing/FeatureCard.tsx

import React from "react";

interface FeatureCardProps {
  title: string;
  description: string;
  icon: React.ElementType;
}

export const FeatureCard = ({ title, description, icon: Icon }: FeatureCardProps) => (
  <div className="p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow">
    <div className="w-12 h-12 bg-[#F1F0FB] rounded-lg flex items-center justify-center mb-4">
      <Icon className="w-6 h-6 text-[#9b87f5]" />
    </div>
    <h3 className="text-xl font-semibold mb-2">{title}</h3>
    <p className="text-gray-600">{description}</p>
  </div>
);

// File: src/components/landing/FeaturesComparison.tsx

import React from "react";
import { Check, Star } from "lucide-react";
import { motion } from "framer-motion";

interface Feature {
  name: string;
  free: boolean;
  pro: boolean;
  enterprise: boolean;
}

export const FeaturesComparison = () => {
  const features: Feature[] = [
    {
      name: "Basic Thesis Editor",
      free: true,
      pro: true,
      enterprise: true,
    },
    {
      name: "Real-time Collaboration",
      free: false,
      pro: true,
      enterprise: true,
    },
    {
      name: "Version Control",
      free: false,
      pro: true,
      enterprise: true,
    },
    {
      name: "Export to PDF/DOCX",
      free: true,
      pro: true,
      enterprise: true,
    },
    {
      name: "Citation Management",
      free: false,
      pro: true,
      enterprise: true,
    },
    {
      name: "AI Writing Assistant",
      free: false,
      pro: true,
      enterprise: true,
    },
    {
      name: "Priority Support",
      free: false,
      pro: false,
      enterprise: true,
    },
    {
      name: "Custom Templates",
      free: false,
      pro: false,
      enterprise: true,
    },
  ];

  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-12">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-3xl font-bold mb-4"
          >
            Choose Your Plan
          </motion.h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Select the perfect plan for your thesis writing journey
          </p>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="border-b">
                <th className="p-4 text-left">Features</th>
                <th className="p-4 text-center">
                  <div className="font-semibold mb-1">Free</div>
                  <div className="text-sm text-gray-500">0 DZD/month</div>
                </th>
                <th className="p-4 text-center bg-primary/5">
                  <div className="font-semibold mb-1 flex items-center justify-center gap-1">
                    Pro <Star className="w-4 h-4 text-primary" />
                  </div>
                  <div className="text-sm text-gray-500">3,900 DZD/month</div>
                </th>
                <th className="p-4 text-center">
                  <div className="font-semibold mb-1">Enterprise</div>
                  <div className="text-sm text-gray-500">Custom pricing</div>
                </th>
              </tr>
            </thead>
            <tbody>
              {features.map((feature, index) => (
                <motion.tr
                  key={feature.name}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="border-b hover:bg-gray-50"
                >
                  <td className="p-4">{feature.name}</td>
                  <td className="p-4 text-center">
                    {feature.free && <Check className="w-5 h-5 text-green-500 mx-auto" />}
                  </td>
                  <td className="p-4 text-center bg-primary/5">
                    {feature.pro && <Check className="w-5 h-5 text-green-500 mx-auto" />}
                  </td>
                  <td className="p-4 text-center">
                    {feature.enterprise && <Check className="w-5 h-5 text-green-500 mx-auto" />}
                  </td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </section>
  );
};

// File: src/components/landing/FeaturesSection.tsx

import React from "react";
import { motion } from "framer-motion";
import { BookOpen, Users, Shield, Rocket } from "lucide-react";
import { useTranslation } from "@/hooks/useTranslation";

export const FeaturesSection = () => {
  const { t } = useTranslation();

  const features = [
    {
      icon: BookOpen,
      title: t('landing.features.smartEditor.title'),
      description: t('landing.features.smartEditor.description')
    },
    {
      icon: Users,
      title: t('landing.features.collaboration.title'),
      description: t('landing.features.collaboration.description')
    },
    {
      icon: Shield,
      title: t('landing.features.versionControl.title'),
      description: t('landing.features.versionControl.description')
    },
    {
      icon: Rocket,
      title: t('landing.features.aiPowered.title'),
      description: t('landing.features.aiPowered.description')
    }
  ];

  return (
    <section id="features" className="py-20 bg-[#1A1F2C]">
      <div className="max-w-7xl mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl font-bold text-white mb-4">
            {t('landing.features.title')}
          </h2>
          <p className="text-gray-400">
            {t('landing.features.subtitle')}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              viewport={{ once: true }}
              className="bg-[#2D3748] p-6 rounded-xl hover:bg-[#2D3748]/80 transition-all"
            >
              <feature.icon className="w-12 h-12 text-[#6B46C1] mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-400">{feature.description}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

// File: src/components/landing/FeedbackForm.tsx

import React from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export const FeedbackForm = () => {
  const { toast } = useToast();

  const handleFeedback = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const email = formData.get('email') as string;
    const feedback = formData.get('feedback') as string;

    if (!email || !feedback) {
      toast({
        title: "Error",
        description: "Please fill in all fields",
        variant: "destructive",
      });
      return;
    }

    try {
      const { error } = await supabase
        .from('user_feedback')
        .insert([{ email, message: feedback }]);

      if (error) throw error;

      toast({
        title: "Thank you!",
        description: "Your feedback has been received.",
      });
      
      (event.target as HTMLFormElement).reset();
    } catch (error) {
      console.error('Error sending feedback:', error);
      toast({
        title: "Error",
        description: "Failed to send feedback. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <form onSubmit={handleFeedback} className="space-y-4">
      <input
        type="email"
        name="email"
        placeholder="Your email"
        className="w-full p-2 border rounded"
      />
      <textarea
        name="feedback"
        placeholder="Your feedback"
        className="w-full p-2 border rounded"
        rows={4}
      />
      <button
        type="submit"
        className="w-full bg-[#9b87f5] text-white p-2 rounded hover:bg-[#7E69AB]"
      >
        Send Feedback
      </button>
    </form>
  );
};

// File: src/components/landing/Footer.tsx

import React from "react";
import { Link } from "react-router-dom";

export const Footer = () => (
  <footer className="bg-[#1A1F2C] text-white py-12 border-t border-gray-800">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
        <div>
          <h3 className="text-xl font-bold text-[#9b87f5] mb-4">Thesis Visualizer</h3>
          <p className="text-gray-400">Making thesis writing easier</p>
        </div>
        <div>
          <h4 className="text-lg font-semibold mb-4">Product</h4>
          <ul className="space-y-2">
            <li><Link to="/features" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">Features</Link></li>
            <li><Link to="/pricing" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">Pricing</Link></li>
          </ul>
        </div>
        <div>
          <h4 className="text-lg font-semibold mb-4">Company</h4>
          <ul className="space-y-2">
            <li><Link to="/about" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">About</Link></li>
            <li><Link to="/contact" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">Contact</Link></li>
          </ul>
        </div>
        <div>
          <h4 className="text-lg font-semibold mb-4">Legal</h4>
          <ul className="space-y-2">
            <li><Link to="/privacy" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">Privacy</Link></li>
            <li><Link to="/terms" className="text-gray-400 hover:text-[#D6BCFA] transition-colors">Terms</Link></li>
          </ul>
        </div>
      </div>
      <div className="mt-8 pt-8 border-t border-gray-800 text-center">
        <p className="text-gray-400">&copy; {new Date().getFullYear()} Thesis Visualizer. All rights reserved.</p>
      </div>
    </div>
  </footer>
);

// File: src/components/landing/HeroSection.tsx

import React from "react";
import { motion } from "framer-motion";
import { GraduationCap } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { useTranslation } from "@/hooks/useTranslation";

export const HeroSection = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { t } = useTranslation();

  return (
    <section className="relative h-screen flex items-center justify-center overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-b from-[#1A1F2C] to-[#0A0D14] opacity-90" />
      
      <div className="relative z-10 text-center px-4 max-w-5xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="space-y-6"
        >
          <GraduationCap className="w-20 h-20 mx-auto text-[#6B46C1]" />
          <h1 className="text-4xl md:text-6xl font-bold text-white">
            {t('landing.hero.title')}
          </h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            {t('landing.hero.subtitle')}
          </p>
          <div className="flex justify-center gap-4 pt-8">
            <Button
              size="lg"
              className="bg-[#6B46C1] hover:bg-[#553C9A] text-white px-8"
              onClick={() => {
                toast({
                  title: "Welcome!",
                  description: "Let's get started with your thesis journey.",
                });
                navigate('/auth');
              }}
            >
              {t('landing.hero.cta')}
            </Button>
            <Button
              variant="outline"
              size="lg"
              className="border-[#6B46C1] text-[#6B46C1] hover:bg-[#6B46C1] hover:text-white"
              onClick={() => {
                const featuresSection = document.getElementById('features');
                featuresSection?.scrollIntoView({ behavior: 'smooth' });
              }}
            >
              {t('landing.hero.learnMore')}
            </Button>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

// File: src/components/landing/Navbar.tsx

import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { LanguageSwitcher } from "@/components/LanguageSwitcher";
import { useTranslation } from "@/hooks/useTranslation";

export const Navbar = () => {
  const { t } = useTranslation();

  return (
    <nav className="fixed w-full bg-[#1A1F2C] text-white z-50 py-4">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center">
          <Link to="/" className="text-2xl font-extrabold font-mono">
            <span className="text-[#9b87f5] font-sans">Otro7a</span>
            <span className="text-[#D6BCFA] font-serif">Manager</span>
          </Link>
          <div className="hidden md:flex space-x-8">
            <Link to="/" className="hover:text-[#D6BCFA] transition-colors">
              {t('common.features')}
            </Link>
            <Link to="/" className="hover:text-[#D6BCFA] transition-colors">
              {t('common.about')}
            </Link>
          </div>
          <div className="flex items-center space-x-4">
            <LanguageSwitcher />
            <Link to="/auth">
              <Button 
                variant="outline" 
                className="bg-transparent text-white border-white hover:bg-white hover:text-[#1A1F2C]"
              >
                {t('common.getStarted')}
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </nav>
  );
};

// File: src/components/landing/PricingSection.tsx

import React from "react";
import { motion } from "framer-motion";
import { Check, Star } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { useTranslation } from "@/hooks/useTranslation";

const PricingTier = ({ 
  title, 
  price, 
  features, 
  popular = false,
  buttonVariant = "outline",
  duration = "per thesis"
}: { 
  title: string;
  price: string;
  features: string[];
  popular?: boolean;
  buttonVariant?: "outline" | "default";
  duration?: string;
}) => {
  const { t } = useTranslation();
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-gradient-to-b from-white to-gray-50 p-8 rounded-xl shadow-lg hover:shadow-xl transition-all relative ${
        popular ? 'border-2 border-admin-accent-primary' : ''
      }`}
    >
      {popular && (
        <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
          <span className="bg-gradient-to-r from-admin-accent-primary to-admin-accent-secondary text-white px-4 py-1 rounded-full text-sm font-medium">
            Most Popular
          </span>
        </div>
      )}
      <h3 className="text-2xl font-bold mb-4 text-admin-accent-primary">{title}</h3>
      <div className="mb-6">
        <p className="text-4xl font-bold text-admin-accent-secondary">{price}</p>
        <p className="text-sm text-gray-500">{duration}</p>
      </div>
      <ul className="space-y-4 mb-8">
        {features.map((feature, index) => (
          <li key={index} className="flex items-center">
            <Check className="w-5 h-5 text-admin-accent-primary mr-2 flex-shrink-0" />
            <span className="text-gray-600">{feature}</span>
          </li>
        ))}
      </ul>
      <Link to="/auth" className="block">
        <Button 
          className={`w-full ${
            buttonVariant === "default" 
              ? "bg-gradient-to-r from-admin-accent-primary to-admin-accent-secondary hover:opacity-90 text-white" 
              : "border-admin-accent-primary/20 text-admin-accent-primary hover:border-admin-accent-secondary"
          }`} 
          variant={buttonVariant}
        >
          {t('common.getStarted')}
        </Button>
      </Link>
    </motion.div>
  );
};

export const PricingSection = () => {
  const { t } = useTranslation();

  const pricingTiers = [
    {
      title: t('landing.pricing.basic.title'),
      price: t('landing.pricing.basic.price'),
      duration: t('landing.pricing.basic.duration'),
      features: [
        "Basic Thesis Editor",
        "Export to PDF/DOCX",
        "Basic Templates",
        "14-day access"
      ]
    },
    {
      title: t('landing.pricing.standard.title'),
      price: t('landing.pricing.standard.price'),
      duration: t('landing.pricing.standard.duration'),
      features: [
        "Everything in Basic",
        "Real-time Collaboration",
        "Version Control",
        "Citation Management",
        "AI Writing Assistant",
        "6 months access"
      ],
      popular: true
    },
    {
      title: t('landing.pricing.research.title'),
      price: t('landing.pricing.research.price'),
      duration: t('landing.pricing.research.duration'),
      features: [
        "Everything in Standard",
        "Priority Support",
        "Custom Templates",
        "Multiple Thesis Support",
        "Advanced Analytics",
        "Unlimited access"
      ]
    }
  ];

  return (
    <section className="py-20 bg-gradient-to-b from-gray-50 to-white">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-12">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-3xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-admin-accent-primary to-admin-accent-secondary"
          >
            {t('landing.pricing.title')}
          </motion.h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            {t('landing.pricing.subtitle')}
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {pricingTiers.map((tier, index) => (
            <PricingTier
              key={tier.title}
              {...tier}
              buttonVariant={tier.popular ? "default" : "outline"}
            />
          ))}
        </div>

        <div className="mt-12 text-center">
          <p className="text-sm text-gray-500">
            All prices are in Algerian Dinars (DZD). Need a custom plan? 
            <Link to="/contact" className="text-admin-accent-primary hover:text-admin-accent-secondary ml-1">
              Contact us
            </Link>
          </p>
        </div>
      </div>
    </section>
  );
};

// File: src/components/landing/TestimonialCard.tsx

import React from "react";

interface TestimonialCardProps {
  quote: string;
  author: string;
  role: string;
}

export const TestimonialCard = ({ quote, author, role }: TestimonialCardProps) => (
  <div className="bg-white p-6 rounded-xl shadow-lg">
    <p className="text-gray-600 mb-4">{quote}</p>
    <div>
      <p className="font-semibold text-[#1A1F2C]">{author}</p>
      <p className="text-sm text-gray-500">{role}</p>
    </div>
  </div>
);

// File: src/components/landing/TestimonialCarousel.tsx

import React from "react";
import { Quote, Star } from "lucide-react";
import { motion } from "framer-motion";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

interface Testimonial {
  quote: string;
  author: string;
  role: string;
  rating: number;
}

const testimonials: Testimonial[] = [
  {
    quote: "This platform revolutionized how I write my thesis. The collaboration features are incredible!",
    author: "Sarah Johnson",
    role: "PhD Candidate, Computer Science",
    rating: 5,
  },
  {
    quote: "The AI-powered suggestions and formatting tools saved me countless hours.",
    author: "Michael Chen",
    role: "Master's Student, Engineering",
    rating: 5,
  },
  {
    quote: "Working with my advisor has never been easier. Real-time feedback is a game-changer.",
    author: "Emma Davis",
    role: "Research Scholar",
    rating: 5,
  },
  {
    quote: "The citation management system is brilliant. It handles everything automatically!",
    author: "David Wilson",
    role: "PhD Student, Biology",
    rating: 5,
  },
];

export const TestimonialCarousel = () => {
  return (
    <section className="py-20 bg-gradient-to-b from-gray-50 to-white">
      <div className="max-w-7xl mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h2 className="text-3xl font-bold mb-4">What Our Users Say</h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Join thousands of satisfied researchers who have transformed their thesis writing experience
          </p>
        </motion.div>

        <Carousel
          opts={{
            align: "start",
            loop: true,
          }}
          className="w-full max-w-5xl mx-auto"
        >
          <CarouselContent>
            {testimonials.map((testimonial, index) => (
              <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: index * 0.1 }}
                  className="h-full"
                >
                  <div className="bg-white p-6 rounded-xl shadow-lg h-full flex flex-col">
                    <div className="mb-4">
                      <Quote className="w-8 h-8 text-primary opacity-50" />
                    </div>
                    <p className="text-gray-600 mb-4 flex-grow">{testimonial.quote}</p>
                    <div>
                      <div className="flex mb-2">
                        {[...Array(testimonial.rating)].map((_, i) => (
                          <Star
                            key={i}
                            className="w-4 h-4 text-yellow-400 fill-current"
                          />
                        ))}
                      </div>
                      <p className="font-semibold text-[#1A1F2C]">{testimonial.author}</p>
                      <p className="text-sm text-gray-500">{testimonial.role}</p>
                    </div>
                  </div>
                </motion.div>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious className="hidden md:flex" />
          <CarouselNext className="hidden md:flex" />
        </Carousel>
      </div>
    </section>
  );
};

// File: src/components/landing/ThesisVisualization.tsx

// import React, { useState, useEffect } from 'react';
// import { motion, AnimatePresence } from 'framer-motion';
// import { BookOpen, Users, CheckSquare, Square, Calendar } from 'lucide-react';
// import { CentralIcon } from './visualization/CentralIcon';
// import { SectionCard } from './visualization/SectionCard';
// import { StatCard } from './visualization/StatCard';
// import { CollaboratorCard } from './visualization/CollaboratorCard';
// import { TimelineIndicator } from './visualization/TimelineIndicator';
// import { NotificationsPanel } from './visualization/NotificationsPanel';
// import { styles } from './visualization/styles';

// // Types
// interface Section {
//   id: number;
//   title: string;
//   complete: boolean;
//   progress: number;
//   lastUpdated: string;
//   wordCount: number;
//   citations: number;
//   summary: string;
// }

// interface Collaborator {
//   id: number;
//   role: string;
//   active: boolean;
//   name: string;
//   lastActive: string;
//   contributions: number;
//   avatar?: string;
// }

// interface Stat {
//   id: number;
//   icon: any;
//   label: string;
//   value: string;
//   target: string;
//   trend: 'up' | 'down' | 'stable';
//   change: string;
// }

// // Data
// const sections: Section[] = [
//   {
//     id: 1,
//     title: 'Introduction',
//     complete: true,
//     progress: 100,
//     lastUpdated: '2024-01-02',
//     wordCount: 2500,
//     citations: 12,
//     summary: 'Research background and objectives'
//   },
//   {
//     id: 2,
//     title: 'Literature Review',
//     complete: true,
//     progress: 100,
//     lastUpdated: '2024-01-15',
//     wordCount: 4000,
//     citations: 45,
//     summary: 'Theoretical framework and previous studies'
//   },
//   {
//     id: 3,
//     title: 'Methodology',
//     complete: false,
//     progress: 75,
//     lastUpdated: '2024-02-01',
//     wordCount: 3000,
//     citations: 18,
//     summary: 'Research design and methods'
//   },
//   {
//     id: 4,
//     title: 'Results',
//     complete: false,
//     progress: 40,
//     lastUpdated: '2024-02-15',
//     wordCount: 2000,
//     citations: 8,
//     summary: 'Data analysis and findings'
//   },
//   {
//     id: 5,
//     title: 'Discussion',
//     complete: false,
//     progress: 20,
//     lastUpdated: '2024-02-20',
//     wordCount: 1500,
//     citations: 15,
//     summary: 'Interpretation of results'
//   },
//   {
//     id: 6,
//     title: 'Conclusion',
//     complete: false,
//     progress: 10,
//     lastUpdated: '2024-02-25',
//     wordCount: 800,
//     citations: 5,
//     summary: 'Summary and future work'
//   }
// ];

// const collaborators: Collaborator[] = [
//   {
//     id: 1,
//     name: 'John Doe',
//     role: 'Author',
//     active: true,
//     lastActive: '2 minutes ago',
//     contributions: 156
//   },
//   {
//     id: 2,
//     name: 'Dr. Smith',
//     role: 'Supervisor',
//     active: true,
//     lastActive: '1 hour ago',
//     contributions: 45
//   },
//   {
//     id: 3,
//     name: 'Prof. Johnson',
//     role: 'Committee Member',
//     active: false,
//     lastActive: '2 days ago',
//     contributions: 12
//   }
// ];

// const stats: Stat[] = [
//   {
//     id: 1,
//     icon: BookOpen,
//     label: 'Words',
//     value: '13,800',
//     target: '20,000',
//     trend: 'up',
//     change: '+15%'
//   },
//   {
//     id: 2,
//     icon: Users,
//     label: 'Citations',
//     value: '103',
//     target: '150',
//     trend: 'up',
//     change: '+8%'
//   },
//   {
//     id: 3,
//     icon: Calendar,
//     label: 'Overall Progress',
//     value: '57%',
//     target: '100%',
//     trend: 'stable',
//     change: '0%'
//   }
// ];

// // Main component
// export default function ThesisVisualization() {
//   const [hoveredSection, setHoveredSection] = useState<number | null>(null);
//   const [showNotifications, setShowNotifications] = useState(false);
//   const [activeView, setActiveView] = useState<'progress' | 'timeline' | 'collaboration'>('progress');

//   // Calculate positions
//   const getPositionOnCircle = (index: number, total: number) => {
//     const radius = 300;
//     const angle = ((index * 360) / total) + 90; // Offset by 90 degrees
//     const x = Math.cos((angle * Math.PI) / 180) * radius;
//     const y = Math.sin((angle * Math.PI) / 180) * radius;
//     return { x, y };
//   };

//   // Animations
//   const containerVariants = {
//     hidden: { opacity: 0 },
//     visible: {
//       opacity: 1,
//       transition: {
//         duration: 0.5,
//         staggerChildren: 0.1
//       }
//     }
//   };

//   useEffect(() => {
//     const checkDeadlines = () => {
//       const incompleteSections = sections.filter(s => !s.complete);
//       if (incompleteSections.length > 0) {
//         setShowNotifications(true);
//       }
//     };

//     checkDeadlines();
//     const interval = setInterval(checkDeadlines, 3600000);
//     return () => clearInterval(interval);
//   }, []);

//   return (
//     <>
//       <style>{styles}</style>
//       <div className="thesis-container">
//         <motion.div
//           className="visualization-wrapper"
//           variants={containerVariants}
//           initial="hidden"
//           animate="visible"
//         >
//           <CentralIcon />

//           <div className="sections-circle">
//             {sections.map((section, index) => {
//               const position = getPositionOnCircle(index, sections.length);
//               return (
//                 <SectionCard
//                   key={section.id}
//                   section={section}
//                   position={position}
//                   onHoverStart={() => setHoveredSection(section.id)}
//                   onHoverEnd={() => setHoveredSection(null)}
//                 />
//               );
//             })}
//           </div>

//           <motion.div 
//             className="stats-dashboard"
//             variants={containerVariants}
//           >
//             {stats.map((stat) => (
//               <StatCard key={stat.id} {...stat} />
//             ))}
//           </motion.div>

//           <motion.div
//             className="collaboration-panel"
//             variants={containerVariants}
//           >
//             {collaborators.map((collaborator) => (
//               <CollaboratorCard key={collaborator.id} {...collaborator} />
//             ))}
//           </motion.div>

//           <TimelineIndicator />

//           <NotificationsPanel
//             showNotifications={showNotifications}
//             sections={sections}
//           />
//         </motion.div>
//       </div>
//     </>
//   );
// }









import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  BookOpen,
  Users,
  CheckSquare,
  Square,
  ArrowUp,
  Calendar,
  ChartBar,
  ChartLine,
  ChartPie
} from 'lucide-react';

// Custom styles for the visualization
const customStyles = `
  /* Flex positioning adjustments */
  .thesis-viz .flex .flex {
    position: relative;
    top: 10px;
  }

  .thesis-viz .stats-flex:nth-child(1) {
    top: 15px;
    transform: translatex(-15px) translatey(31px) !important;
  }

  .thesis-viz .stats-flex:nth-child(2) {
    transform: translatex(-3px) translatey(36px) !important;
  }

  .thesis-viz .stats-flex:nth-child(3) {
    transform: translatex(9px) translatey(37px) !important;
  }

  .thesis-viz .book-icon-container {
    top: 0px;
  }

  .thesis-viz .central-flex {
    position: relative;
    top: -16px;
    transform: translatex(0px) translatey(-44px);
  }

  .thesis-viz .stats-card {
    transform: translatex(35px) translatey(-63px) !important;
    position: relative;
    left: -33px;
  }

  .thesis-viz .timeline-card {
    transform: translatex(394px) translatey(-199px);
    width: 101%;
  }
`;

export default function ThesisVisualization() {
  const [hoveredSection, setHoveredSection] = useState<number | null>(null);

  const sections = [
    { id: 1, title: 'Introduction', complete: true, progress: 100 },
    { id: 2, title: 'Literature Review', complete: true, progress: 100 },
    { id: 3, title: 'Methodology', complete: false, progress: 45 },
    { id: 4, title: 'Results', complete: false, progress: 20 },
    { id: 5, title: 'Discussion', complete: false, progress: 10 },
    { id: 6, title: 'Conclusion', complete: false, progress: 0 },
  ];

  const collaborators = [
    { id: 1, role: 'Author', active: true },
    { id: 2, role: 'Supervisor', active: true },
    { id: 3, role: 'Committee Member', active: false },
  ];

  const stats = [
    { id: 1, icon: ChartBar, label: 'Words', value: '12,450', target: '15,000' },
    { id: 2, icon: ChartLine, label: 'Citations', value: '45', target: '50' },
    { id: 3, icon: ChartPie, label: 'Progress', value: '45%', target: '100%' },
  ];

  return (
    <>
      <style>{customStyles}</style>
      <div className="py-24 bg-gradient-to-b from-gray-50 to-white overflow-hidden thesis-viz">
        <div className="max-w-7xl mx-auto px-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="relative central-flex"
          >
            {/* Central Book Icon with Pulse Effect */}
            <div className="flex justify-center mb-16">
              <motion.div
                whileHover={{ scale: 1.1 }}
                className="relative book-icon-container"
              >
                <motion.div
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.5, 0.8, 0.5],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut",
                  }}
                  className="absolute inset-0 bg-primary/20 rounded-full"
                />
                <div className="bg-primary/10 p-8 rounded-full relative z-10">
                  <BookOpen size={64} className="text-primary" />
                </div>
              </motion.div>
            </div>

            {/* Progress Circle */}
            <div className="relative">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ duration: 0.5 }}
                className="absolute inset-0 flex items-center justify-center"
              >
                <div className="w-[600px] h-[600px] border-4 border-dashed border-gray-200 rounded-full" />
              </motion.div>

              {/* Sections */}
              {sections.map((section, index) => {
                const angle = (index * 360) / sections.length;
                const radius = 300;
                const x = Math.cos((angle * Math.PI) / 180) * radius;
                const y = Math.sin((angle * Math.PI) / 180) * radius;

                return (
                  <motion.div
                    key={section.id}
                    initial={{ opacity: 0, scale: 0 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.1 }}
                    className="absolute left-1/2 top-1/2"
                    style={{
                      transform: `translate(${x}px, ${y}px)`,
                    }}
                    onHoverStart={() => setHoveredSection(section.id)}
                    onHoverEnd={() => setHoveredSection(null)}
                  >
                    <motion.div
                      whileHover={{ scale: 1.1 }}
                      className={`bg-white p-4 rounded-lg shadow-lg -translate-x-1/2 -translate-y-1/2 w-48 transition-colors ${
                        hoveredSection === section.id ? 'bg-primary/5' : ''
                      }`}
                    >
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          {section.complete ? (
                            <CheckSquare className="text-green-500" />
                          ) : (
                            <Square className="text-gray-400" />
                          )}
                          <span className="text-sm font-medium">{section.title}</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <motion.div
                            initial={{ width: 0 }}
                            animate={{ width: `${section.progress}%` }}
                            transition={{ duration: 1, delay: index * 0.2 }}
                            className="bg-primary rounded-full h-2"
                          />
                        </div>
                      </div>
                    </motion.div>
                  </motion.div>
                );
              })}

              {/* Stats */}
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-12 flex gap-6">
                {stats.map((stat, index) => (
                  <motion.div
                    key={stat.id}
                    initial={{ opacity: 0, y: -20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5 + index * 0.1 }}
                    whileHover={{ y: -5 }}
                    className={`stats-card bg-white px-6 py-3 rounded-xl shadow-lg stats-flex-${index + 1}`}
                  >
                    <div className="flex items-center gap-3">
                      <stat.icon className="text-primary" size={20} />
                      <div>
                        <p className="text-sm text-gray-600">{stat.label}</p>
                        <p className="text-lg font-semibold">
                          {stat.value}
                          <span className="text-xs text-gray-400 ml-1">/ {stat.target}</span>
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>

              {/* Collaborators */}
              <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-12 flex gap-4">
                {collaborators.map((collaborator, index) => (
                  <motion.div
                    key={collaborator.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.8 + index * 0.1 }}
                    whileHover={{ scale: 1.05 }}
                    className={`flex items-center gap-2 px-4 py-2 rounded-full shadow-md ${
                      collaborator.active ? 'bg-white' : 'bg-gray-50'
                    }`}
                  >
                    <div className="relative">
                      <Users className={collaborator.active ? 'text-primary' : 'text-gray-400'} size={20} />
                      {collaborator.active && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full" />
                      )}
                    </div>
                    <span className={`text-sm font-medium ${
                      collaborator.active ? 'text-gray-900' : 'text-gray-500'
                    }`}>
                      {collaborator.role}
                    </span>
                  </motion.div>
                ))}
              </div>

              {/* Timeline Indicator */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 1 }}
                className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-12 timeline-card"
              >
                <div className="bg-white p-4 rounded-xl shadow-lg space-y-2">
                  <div className="flex items-center gap-2">
                    <Calendar className="text-primary" size={20} />
                    <span className="text-sm font-medium">Timeline</span>
                  </div>
                  <div className="space-y-1">
                    <p className="text-xs text-gray-500">Started: 3 months ago</p>
                    <p className="text-xs text-gray-500">Deadline: 2 months left</p>
                  </div>
                </div>
              </motion.div>
            </div>
          </motion.div>
        </div>
      </div>
    </>
  );
}

// File: src/components/landing/visualization/CentralIcon.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { BookOpen } from 'lucide-react';

export const CentralIcon = () => {
  return (
    <motion.div 
      className="central-icon"
      whileHover={{ scale: 1.1 }}
    >
      <div className="central-icon-pulse" />
      <BookOpen size={64} className="text-primary" />
    </motion.div>
  );
};

// File: src/components/landing/visualization/CollaboratorBadge.tsx

import React from "react";
import { motion } from "framer-motion";
import { Users } from "lucide-react";

interface CollaboratorBadgeProps {
  id: number;
  role: string;
  active: boolean;
}

export const CollaboratorBadge = ({ id, role, active }: CollaboratorBadgeProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.8 + id * 0.1 }}
      whileHover={{ scale: 1.05 }}
      className={`flex items-center gap-2 px-4 py-2 rounded-full shadow-md ${
        active ? "bg-white" : "bg-gray-50"
      }`}
    >
      <div className="relative">
        <Users className={active ? "text-primary" : "text-gray-400"} size={20} />
        {active && (
          <span className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full" />
        )}
      </div>
      <span
        className={`text-sm font-medium ${
          active ? "text-gray-900" : "text-gray-500"
        }`}
      >
        {role}
      </span>
    </motion.div>
  );
};

// File: src/components/landing/visualization/CollaboratorCard.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Users } from 'lucide-react';

interface CollaboratorProps {
  id: number;
  name: string;
  role: string;
  active: boolean;
}

export const CollaboratorCard = ({ id, name, role, active }: CollaboratorProps) => {
  return (
    <motion.div
      key={id}
      className="collaborator-card"
      whileHover={{ scale: 1.05 }}
    >
      <Users size={20} />
      <div className="collaborator-info">
        <span>{name}</span>
        <span>{role}</span>
      </div>
      {active && (
        <div className="active-indicator" />
      )}
    </motion.div>
  );
};

// File: src/components/landing/visualization/CollaboratorOrbit.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Users } from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

interface Collaborator {
  id: number;
  name: string;
  role: string;
  email: string;
}

interface CollaboratorOrbitProps {
  collaborators: Collaborator[];
}

export const CollaboratorOrbit = ({ collaborators }: CollaboratorOrbitProps) => {
  return (
    <div className="absolute inset-0">
      {collaborators.slice(0, 2).map((collaborator, index) => {
        const angle = (index * 360) / 2;
        const radius = 120; // Increased radius to move avatars outside the book icon
        const x = Math.cos((angle * Math.PI) / 180) * radius;
        const y = Math.sin((angle * Math.PI) / 180) * radius;

        return (
          <motion.div
            key={collaborator.id}
            initial={{ opacity: 0, scale: 0 }}
            animate={{ 
              opacity: 1, 
              scale: 1,
              rotate: 360,
            }}
            transition={{ 
              rotate: {
                duration: 20,
                repeat: Infinity,
                ease: "linear"
              },
              opacity: { duration: 0.5 },
              scale: { duration: 0.5 }
            }}
            className="absolute left-1/2 top-1/2"
            style={{
              transform: `translate(${x}px, ${y}px)`,
            }}
          >
            <motion.div
              whileHover={{ scale: 1.2 }}
              className="relative -translate-x-1/2 -translate-y-1/2"
            >
              <Avatar className="h-8 w-8 border-2 border-primary/20 bg-white/80 backdrop-blur-sm hover:border-primary/50 transition-all duration-200">
                <AvatarImage 
                  src={`https://api.dicebear.com/7.x/initials/svg?seed=${collaborator.email}`} 
                  alt={collaborator.name} 
                />
                <AvatarFallback>
                  {collaborator.name.substring(0, 2).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                whileHover={{ opacity: 1, y: 0 }}
                className="absolute top-full left-1/2 -translate-x-1/2 mt-2 whitespace-nowrap bg-white/80 backdrop-blur-sm px-2 py-1 rounded-md text-xs shadow-sm border border-primary/10"
              >
                {collaborator.name} ‚Ä¢ {collaborator.role}
              </motion.div>
            </motion.div>
          </motion.div>
        );
      })}
    </div>
  );
};

// File: src/components/landing/visualization/EnhancedThesisViz.tsx

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  BookOpen,
  Users,
  CheckSquare,
  Square,
  ArrowUp,
  Calendar,
  ChartBar,
  ChartLine,
  ChartPie,
  Clock
} from 'lucide-react';
import { Progress } from "@/components/ui/progress";

// Types
interface Section {
  id: number;
  title: string;
  complete: boolean;
  progress: number;
  summary: string;
}

// Data
const sections: Section[] = [
  { id: 1, title: 'Introduction', complete: true, progress: 100, summary: 'Research background and objectives' },
  { id: 2, title: 'Literature Review', complete: true, progress: 100, summary: 'Theoretical framework' },
  { id: 3, title: 'Methodology', complete: false, progress: 75, summary: 'Research design' },
  { id: 4, title: 'Results', complete: false, progress: 40, summary: 'Data analysis' },
  { id: 5, title: 'Discussion', complete: false, progress: 20, summary: 'Interpretation' },
  { id: 6, title: 'Conclusion', complete: false, progress: 10, summary: 'Summary' }
];

// Calculate positions on circle
const getPositionOnCircle = (index: number, total: number, radius: number) => {
  const angle = (index * 360) / total;
  const x = Math.cos((angle * Math.PI) / 180) * radius;
  const y = Math.sin((angle * Math.PI) / 180) * radius;
  return { x, y };
};

export default function EnhancedThesisViz() {
  const [hoveredSection, setHoveredSection] = useState<number | null>(null);
  const [rotation, setRotation] = useState(0);
  const [progress] = useState(65);

  return (
    <div className="relative w-full h-[800px] bg-gradient-to-b from-white to-gray-50 overflow-hidden rounded-3xl">
      {/* Background Elements */}
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(79,70,229,0.1),transparent_50%)]" />
      <motion.div
        className="absolute inset-0"
        initial={false}
        animate={{
          background: [
            'radial-gradient(600px circle at 50% 50%, rgba(79,70,229,0.05), transparent 80%)',
            'radial-gradient(800px circle at 50% 50%, rgba(79,70,229,0.08), transparent 80%)'
          ],
        }}
        transition={{ duration: 3, repeat: Infinity, repeatType: 'reverse' }}
      />

      {/* Central Book Icon */}
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
        <motion.div
          className="relative"
          animate={{ rotate: 360 }}
          transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
        >
          <div className="absolute -inset-32 border-2 border-dashed border-primary/20 rounded-full" />
        </motion.div>
        
        <motion.div
          className="relative z-10 bg-white p-8 rounded-full shadow-xl"
          whileHover={{ scale: 1.1 }}
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: "spring", duration: 1 }}
        >
          <motion.div
            className="absolute inset-0 bg-primary/10 rounded-full"
            animate={{
              scale: [1, 1.2, 1],
              opacity: [0.5, 0.2, 0.5],
            }}
            transition={{ duration: 2, repeat: Infinity }}
          />
          <BookOpen size={48} className="text-primary relative z-10" />
        </motion.div>

        {/* Timeline Progress Ring */}
        <div className="absolute -bottom-24 left-1/2 transform -translate-x-1/2">
          <div className="relative">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex flex-col items-center"
            >
              <div className="relative w-16 h-16">
                <Progress
                  value={progress}
                  className="h-16 w-16 [&>div]:h-16 [&>div]:w-16 rotate-[-90deg]"
                />
                <div className="absolute inset-0 flex items-center justify-center">
                  <Clock className="h-6 w-6 text-primary" />
                </div>
              </div>
              <div className="mt-2 text-xs text-center text-gray-600">
                <p className="font-medium">{progress}% Complete</p>
                <p>2 months left</p>
              </div>
            </motion.div>
          </div>
        </div>
      </div>

      {/* Sections */}
      {sections.map((section, index) => {
        const position = getPositionOnCircle(index, sections.length, 250);
        return (
          <motion.div
            key={section.id}
            className="absolute top-1/2 left-1/2"
            style={{
              x: position.x,
              y: position.y,
            }}
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: index * 0.2 }}
          >
            <motion.div
              className={`bg-white/90 backdrop-blur-sm p-4 rounded-xl shadow-lg -translate-x-1/2 -translate-y-1/2 w-48 border border-primary/10
                         ${hoveredSection === section.id ? 'ring-2 ring-primary/20' : ''}`}
              whileHover={{ scale: 1.05, y: -5 }}
              onHoverStart={() => setHoveredSection(section.id)}
              onHoverEnd={() => setHoveredSection(null)}
            >
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  {section.complete ? (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ type: "spring" }}
                    >
                      <CheckSquare className="text-green-500" />
                    </motion.div>
                  ) : (
                    <Square className="text-gray-400" />
                  )}
                  <span className="text-sm font-medium text-gray-700">{section.title}</span>
                </div>
                <div className="relative h-2 bg-gray-100 rounded-full overflow-hidden">
                  <motion.div
                    className="absolute inset-y-0 left-0 bg-primary rounded-full"
                    initial={{ width: 0 }}
                    animate={{ width: `${section.progress}%` }}
                    transition={{ duration: 1, delay: index * 0.1 }}
                  />
                </div>
                <AnimatePresence>
                  {hoveredSection === section.id && (
                    <motion.p
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="text-xs text-gray-500"
                    >
                      {section.summary}
                    </motion.p>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          </motion.div>
        );
      })}

      {/* Floating Particles */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-primary/20 rounded-full"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
            }}
            animate={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
            }}
            transition={{
              duration: Math.random() * 10 + 5,
              repeat: Infinity,
              repeatType: "reverse",
            }}
          />
        ))}
      </div>
    </div>
  );
}

// File: src/components/landing/visualization/NotificationsPanel.tsx

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AlertCircle } from 'lucide-react';

interface Section {
  id: number;
  title: string;
  progress: number;
  complete: boolean;
}

interface NotificationsPanelProps {
  showNotifications: boolean;
  sections: Section[];
}

export const NotificationsPanel = ({ showNotifications, sections }: NotificationsPanelProps) => {
  return (
    <AnimatePresence>
      {showNotifications && (
        <motion.div
          className="notifications-panel"
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 100 }}
        >
          <div className="notification-header">
            <AlertCircle size={20} />
            <span>Thesis Updates</span>
          </div>
          <div className="notification-content">
            {sections
              .filter(s => !s.complete)
              .map(section => (
                <div key={section.id} className="notification-item">
                  <span>{section.title} needs attention</span>
                  <span>{section.progress}% complete</span>
                </div>
              ))
            }
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

// File: src/components/landing/visualization/SectionCard.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { CheckSquare, Square } from 'lucide-react';

interface Section {
  id: number;
  title: string;
  complete: boolean;
  progress: number;
  wordCount: number;
  citations: number;
}

interface SectionCardProps {
  section: Section;
  position: { x: number; y: number };
  onHoverStart: () => void;
  onHoverEnd: () => void;
}

export const SectionCard = ({ section, position, onHoverStart, onHoverEnd }: SectionCardProps) => {
  return (
    <motion.div
      key={section.id}
      className="section-card"
      style={{
        transform: `translate(${position.x}px, ${position.y}px)`
      }}
      whileHover={{ scale: 1.05 }}
      onHoverStart={onHoverStart}
      onHoverEnd={onHoverEnd}
    >
      <div className="section-header">
        <h3>{section.title}</h3>
        {section.complete ? (
          <CheckSquare className="text-success" />
        ) : (
          <Square className="text-secondary" />
        )}
      </div>
      <div className="progress-bar">
        <motion.div
          className="progress-bar-fill"
          initial={{ width: 0 }}
          animate={{ width: `${section.progress}%` }}
        />
      </div>
      <div className="section-details">
        <span>{section.wordCount} words</span>
        <span>{section.citations} citations</span>
      </div>
    </motion.div>
  );
};

// File: src/components/landing/visualization/StatCard.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { ArrowUp, ArrowDown, Minus } from 'lucide-react';
import type { LucideIcon } from 'lucide-react';

interface StatCardProps {
  id: number;
  icon: LucideIcon;
  label: string;
  value: string;
  target: string;
  trend: 'up' | 'down' | 'stable';
  change: string;
}

export const StatCard = ({ id, icon: Icon, label, value, target, trend, change }: StatCardProps) => {
  return (
    <motion.div
      key={id}
      className="stat-card"
      whileHover={{ y: -5 }}
    >
      <div className="stat-header">
        <Icon size={20} />
        <span>{label}</span>
      </div>
      <div className="stat-value">
        {value}
        <span className="stat-target">/ {target}</span>
      </div>
      <div className={`stat-trend ${trend}`}>
        {trend === 'up' && <ArrowUp size={16} />}
        {trend === 'down' && <ArrowDown size={16} />}
        {trend === 'stable' && <Minus size={16} />}
        <span>{change}</span>
      </div>
    </motion.div>
  );
};

// File: src/components/landing/visualization/ThesisFeature.tsx

import React from "react";
import { motion } from "framer-motion";
import { Square, CheckSquare } from "lucide-react";

interface ThesisFeatureProps {
  id: number;
  title: string;
  complete: boolean;
  progress: number;
  hoveredSection: number | null;
  setHoveredSection: (id: number | null) => void;
  angle: number;
  radius: number;
}

export const ThesisFeature = ({
  id,
  title,
  complete,
  progress,
  hoveredSection,
  setHoveredSection,
  angle,
  radius,
}: ThesisFeatureProps) => {
  const x = Math.cos((angle * Math.PI) / 180) * radius;
  const y = Math.sin((angle * Math.PI) / 180) * radius;

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ delay: id * 0.1 }}
      className="absolute left-1/2 top-1/2"
      style={{
        transform: `translate(${x}px, ${y}px)`,
      }}
      onHoverStart={() => setHoveredSection(id)}
      onHoverEnd={() => setHoveredSection(null)}
    >
      <motion.div
        whileHover={{ scale: 1.1 }}
        className={`bg-white p-4 rounded-lg shadow-lg -translate-x-1/2 -translate-y-1/2 w-48 transition-colors ${
          hoveredSection === id ? "bg-primary/5" : ""
        }`}
      >
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            {complete ? (
              <CheckSquare className="text-green-500" />
            ) : (
              <Square className="text-gray-400" />
            )}
            <span className="text-sm font-medium">{title}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 1, delay: id * 0.2 }}
              className="bg-primary rounded-full h-2"
            />
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
};

// File: src/components/landing/visualization/ThesisNode.tsx

import React from "react";
import { motion } from "framer-motion";
import { CheckCircle, Circle } from "lucide-react";

interface ThesisNodeProps {
  title: string;
  progress: number;
  complete: boolean;
  delay?: number;
}

export const ThesisNode = ({ title, progress, complete, delay = 0 }: ThesisNodeProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay }}
      className="bg-white/5 backdrop-blur-sm p-6 rounded-lg border border-white/10 hover:border-[#6B46C1]/50 transition-colors"
    >
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-white font-medium">{title}</h3>
        {complete ? (
          <CheckCircle className="text-green-500" size={20} />
        ) : (
          <Circle className="text-gray-400" size={20} />
        )}
      </div>
      
      <div className="w-full bg-gray-700 rounded-full h-2">
        <motion.div
          initial={{ width: 0 }}
          animate={{ width: `${progress}%` }}
          transition={{ duration: 1, delay: delay + 0.5 }}
          className="bg-[#6B46C1] rounded-full h-2"
        />
      </div>
      
      <p className="text-right mt-2 text-sm text-gray-400">
        {progress}%
      </p>
    </motion.div>
  );
};

// File: src/components/landing/visualization/ThesisStat.tsx

import React from "react";
import { motion } from "framer-motion";
import { LucideIcon } from "lucide-react";

interface ThesisStatProps {
  id: number;
  icon: LucideIcon;
  label: string;
  value: string;
  target: string;
}

export const ThesisStat = ({ id, icon: Icon, label, value, target }: ThesisStatProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.5 + id * 0.1 }}
      whileHover={{ y: -5 }}
      className="bg-white/5 backdrop-blur-sm p-6 rounded-lg border border-white/10"
    >
      <div className="flex items-center gap-3">
        <Icon className="text-[#6B46C1]" size={20} />
        <div>
          <p className="text-sm text-gray-400">{label}</p>
          <p className="text-lg font-semibold text-white">
            {value}
            <span className="text-xs text-gray-500 ml-1">/ {target}</span>
          </p>
        </div>
      </div>
    </motion.div>
  );
};

// File: src/components/landing/visualization/ThesisVisualization.tsx

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Thesis } from '@/types/thesis';
import { supabase } from '@/integrations/supabase/client';

export const ThesisVisualization = () => {
  const [thesis, setThesis] = useState<Thesis | null>(null);

  useEffect(() => {
    const fetchThesis = async () => {
      const { data, error } = await supabase
        .from('theses')
        .select('*')
        .limit(1)
        .single();

      if (error) {
        console.error('Error fetching thesis:', error);
        return;
      }

      if (data) {
        const content = typeof data.content === 'string' 
          ? JSON.parse(data.content)
          : data.content;

        setThesis({
          ...data,
          content,
          metadata: {
            description: '',
            keywords: [],
            createdAt: data.created_at,
            universityName: '',
            departmentName: '',
            authorName: '',
            thesisDate: '',
            committeeMembers: [],
          },
          frontMatter: content.frontMatter || [],
          chapters: content.chapters || [],
          backMatter: content.backMatter || [],
        });
      }
    };

    fetchThesis();
  }, []);

  if (!thesis) {
    return null;
  }

  return (
    <div className="relative w-full h-full">
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="absolute inset-0"
      >
        {/* Visualization content */}
        <div className="grid grid-cols-3 gap-4 p-4">
          {thesis.chapters.map((chapter, index) => (
            <motion.div
              key={chapter.id}
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: index * 0.1 }}
              className="p-4 bg-white rounded-lg shadow"
            >
              <h3 className="font-bold">{chapter.title}</h3>
              <p className="text-sm text-gray-600">
                {chapter.sections?.length || 0} sections
              </p>
            </motion.div>
          ))}
        </div>
      </motion.div>
      <style>{`
        .visualization-container {
          position: relative;
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
      `}</style>
    </div>
  );
};

// File: src/components/landing/visualization/ThesisVisualizationDemo.tsx

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  BookOpen, Users, CheckSquare, Square, Calendar,
  ChartBar, ChartLine, ChartPie, Clock, AlertCircle,
  FileText, GitBranch, MessageSquare, Award, ArrowUp,
  ArrowDown, Minus
} from 'lucide-react';

// Types
interface Section {
  id: number;
  title: string;
  complete: boolean;
  progress: number;
  lastUpdated: string;
  wordCount: number;
  citations: number;
  summary: string;
}

interface Collaborator {
  id: number;
  role: string;
  active: boolean;
  name: string;
  lastActive: string;
  contributions: number;
  avatar?: string;
}

interface Stat {
  id: number;
  icon: any;
  label: string;
  value: string;
  target: string;
  trend: 'up' | 'down' | 'stable';
  change: string;
}

// Styles
const styles = `
  .thesis-viz {
    --primary-color: #4F46E5;
    --secondary-color: #E5E7EB;
    --success-color: #10B981;
    --warning-color: #F59E0B;
    --error-color: #EF4444;
    --text-primary: #111827;
    --text-secondary: #6B7280;
    --bg-primary: #FFFFFF;
    --bg-secondary: #F9FAFB;
  }

  .thesis-container {
    min-height: 100vh;
    background: linear-gradient(180deg, var(--bg-secondary) 0%, var(--bg-primary) 100%);
    padding: 2rem;
    overflow: hidden;
  }

  .visualization-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
  }

  .central-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
  }

  .central-icon-pulse {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: var(--primary-color);
    opacity: 0.2;
    animation: pulse 2s infinite;
  }

  .sections-circle {
    position: relative;
    width: 800px;
    height: 800px;
    margin: 0 auto;
  }

  .section-card {
    position: absolute;
    width: 200px;
    background: var(--bg-primary);
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    transition: all 0.3s ease;
  }

  .section-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .progress-bar {
    width: 100%;
    height: 4px;
    background: var(--secondary-color);
    border-radius: 2px;
    margin: 0.5rem 0;
    overflow: hidden;
  }

  .progress-bar-fill {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.5s ease;
  }

  .stats-dashboard {
    position: absolute;
    top: 2rem;
    right: 2rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .stat-card {
    background: var(--bg-primary);
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .collaboration-panel {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
  }

  .collaborator-card {
    background: var(--bg-primary);
    padding: 0.75rem 1rem;
    border-radius: 999px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .notifications-panel {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: var(--bg-primary);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    z-index: 50;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
      opacity: 0.2;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.1;
    }
    100% {
      transform: scale(1);
      opacity: 0.2;
    }
  }

  @media (max-width: 1024px) {
    .sections-circle {
      transform: scale(0.8);
    }
    
    .stats-dashboard {
      position: relative;
      top: 0;
      right: 0;
      margin-top: 2rem;
    }
  }
`;

export default function EnhancedThesisVisualization() {
  const [hoveredSection, setHoveredSection] = useState<number | null>(null);
  const [showNotifications, setShowNotifications] = useState(false);
  const [activeView, setActiveView] = useState<'progress' | 'timeline' | 'collaboration'>('progress');

  // Data
  const sections: Section[] = [
    {
      id: 1,
      title: 'Introduction',
      complete: true,
      progress: 100,
      lastUpdated: '2024-01-02',
      wordCount: 2500,
      citations: 12,
      summary: 'Research background and objectives'
    },
    {
      id: 2,
      title: 'Literature Review',
      complete: true,
      progress: 100,
      lastUpdated: '2024-01-15',
      wordCount: 4000,
      citations: 45,
      summary: 'Theoretical framework and previous studies'
    },
    {
      id: 3,
      title: 'Methodology',
      complete: false,
      progress: 75,
      lastUpdated: '2024-02-01',
      wordCount: 3000,
      citations: 18,
      summary: 'Research design and methods'
    },
    {
      id: 4,
      title: 'Results',
      complete: false,
      progress: 40,
      lastUpdated: '2024-02-15',
      wordCount: 2000,
      citations: 8,
      summary: 'Data analysis and findings'
    },
    {
      id: 5,
      title: 'Discussion',
      complete: false,
      progress: 20,
      lastUpdated: '2024-02-20',
      wordCount: 1500,
      citations: 15,
      summary: 'Interpretation of results'
    },
    {
      id: 6,
      title: 'Conclusion',
      complete: false,
      progress: 10,
      lastUpdated: '2024-02-25',
      wordCount: 800,
      citations: 5,
      summary: 'Summary and future work'
    }
  ];

  const collaborators: Collaborator[] = [
    {
      id: 1,
      name: 'John Doe',
      role: 'Author',
      active: true,
      lastActive: '2 minutes ago',
      contributions: 156
    },
    {
      id: 2,
      name: 'Dr. Smith',
      role: 'Supervisor',
      active: true,
      lastActive: '1 hour ago',
      contributions: 45
    },
    {
      id: 3,
      name: 'Prof. Johnson',
      role: 'Committee Member',
      active: false,
      lastActive: '2 days ago',
      contributions: 12
    }
  ];

  const stats: Stat[] = [
    {
      id: 1,
      icon: ChartBar,
      label: 'Words',
      value: '13,800',
      target: '20,000',
      trend: 'up',
      change: '+15%'
    },
    {
      id: 2,
      icon: ChartLine,
      label: 'Citations',
      value: '103',
      target: '150',
      trend: 'up',
      change: '+8%'
    },
    {
      id: 3,
      icon: ChartPie,
      label: 'Overall Progress',
      value: '57%',
      target: '100%',
      trend: 'stable',
      change: '0%'
    }
  ];

  // Calculate positions
  const getPositionOnCircle = (index: number, total: number) => {
    const radius = 300;
    const angle = (index * 360) / total;
    const x = Math.cos((angle * Math.PI) / 180) * radius;
    const y = Math.sin((angle * Math.PI) / 180) * radius;
    return { x, y };
  };

  // Animations
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5
      }
    }
  };

  // Effects
  useEffect(() => {
    const checkDeadlines = () => {
      const incompleteSections = sections.filter(s => !s.complete);
      if (incompleteSections.length > 0) {
        setShowNotifications(true);
      }
    };

    checkDeadlines();
    const interval = setInterval(checkDeadlines, 3600000);
    return () => clearInterval(interval);
  }, []);

  return (
    <>
      <style>{styles}</style>
      <div className="thesis-container">
        <motion.div
          className="visualization-wrapper"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
        >
          {/* Central Icon */}
          <motion.div 
            className="central-icon"
            whileHover={{ scale: 1.1 }}
          >
            <div className="central-icon-pulse" />
            <BookOpen size={64} className="text-primary" />
          </motion.div>

          {/* Sections Circle */}
          <div className="sections-circle">
            {sections.map((section, index) => {
              const position = getPositionOnCircle(index, sections.length);
              return (
                <motion.div
                  key={section.id}
                  className="section-card"
                  style={{
                    transform: `translate(${position.x}px, ${position.y}px)`
                  }}
                  variants={itemVariants}
                  whileHover={{ scale: 1.05 }}
                  onHoverStart={() => setHoveredSection(section.id)}
                  onHoverEnd={() => setHoveredSection(null)}
                >
                  <div className="section-header">
                    <h3>{section.title}</h3>
                    {section.complete ? (
                      <CheckSquare className="text-success" />
                    ) : (
                      <Square className="text-secondary" />
                    )}
                  </div>
                  <div className="progress-bar">
                    <motion.div
                      className="progress-bar-fill"
                      initial={{ width: 0 }}
                      animate={{ width: `${section.progress}%` }}
                    />
                  </div>
                  <div className="section-details">
                    <span>{section.wordCount} words</span>
                    <span>{section.citations} citations</span>
                  </div>
                </motion.div>
              );
            })}
          </div>

          {/* Stats Dashboard */}
          <motion.div 
            className="stats-dashboard"
            variants={containerVariants}
          >
            {stats.map((stat) => (
              <motion.div
                key={stat.id}
                className="stat-card"
                variants={itemVariants}
              >
                <div className="stat-header">
                  <stat.icon size={20} />
                  <span>{stat.label}</span>
                </div>
                <div className="stat-value">
                  {stat.value}
                  <span className="stat-target">/ {stat.target}</span>
                </div>
                <div className={`stat-trend ${stat.trend}`}>
                  {stat.trend === 'up' && <ArrowUp size={16} />}
                  {stat.trend === 'down' && <ArrowDown size={16} />}
                  {stat.trend === 'stable' && <Minus size={16} />}
                  <span>{stat.change}</span>
                </div>
              </motion.div>
            ))}
          </motion.div>

          {/* Collaboration Panel */}
          <motion.div
            className="collaboration-panel"
            variants={containerVariants}
          >
            {collaborators.map((collaborator) => (
              <motion.div
                key={collaborator.id}
                className="collaborator-card"
                variants={itemVariants}
              >
                <Users size={20} />
                <div className="collaborator-info">
                  <span>{collaborator.name}</span>
                  <span>{collaborator.role}</span>
                </div>
                {collaborator.active && (
                  <div className="active-indicator" />
                )}
              </motion.div>
            ))}
          </motion.div>

          {/* Notifications */}
          <AnimatePresence>
            {showNotifications && (
              <motion.div
                className="notifications-panel"
                initial={{ opacity: 0, x: 100 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 100 }}
              >
                <div className="notification-header">
                  <AlertCircle size={20} />
                  <span>Thesis Updates</span>
                </div>
                <div className="notification-content">
                  {sections
                    .filter(s => !s.complete)
                    .map(section => (
                      <div key={section.id} className="notification-item">
                        <span>{section.title} needs attention</span>
                        <span>{section.progress}% complete</span>
                      </div>
                    ))
                  }
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </>
  );
}

// File: src/components/landing/visualization/TimelineIndicator.tsx

import React from "react";
import { motion } from "framer-motion";
import { Calendar, Clock } from "lucide-react";

export const TimelineIndicator = () => {
  // Calculate progress (example: 3 months in, 2 months left = 60% complete)
  const timeProgress = 60;

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ delay: 1 }}
      className="absolute left-1/2 top-1/2 transform -translate-x-1/2 translate-y-[80px] w-[200px]"
    >
      <div className="relative">
        {/* Circular Progress */}
        <svg className="w-full h-24" viewBox="0 0 100 100">
          {/* Background circle */}
          <circle
            cx="50"
            cy="50"
            r="45"
            fill="none"
            stroke="rgba(255,255,255,0.2)"
            strokeWidth="8"
          />
          {/* Progress circle */}
          <motion.circle
            cx="50"
            cy="50"
            r="45"
            fill="none"
            stroke="rgba(79,70,229,0.6)"
            strokeWidth="8"
            strokeLinecap="round"
            strokeDasharray={`${timeProgress * 2.83}, 283`}
            transform="rotate(-90 50 50)"
            initial={{ strokeDasharray: "0, 283" }}
            animate={{ strokeDasharray: `${timeProgress * 2.83}, 283` }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
          {/* Center content */}
          <foreignObject x="25" y="25" width="50" height="50">
            <div className="h-full flex items-center justify-center">
              <Clock className="w-6 h-6 text-primary/70" />
            </div>
          </foreignObject>
        </svg>

        {/* Timeline details */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.2 }}
          className="absolute -bottom-12 left-1/2 transform -translate-x-1/2 w-full text-center"
        >
          <div className="bg-white/80 backdrop-blur-sm px-3 py-2 rounded-lg shadow-sm border border-primary/10">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Calendar className="text-primary/70 h-3 w-3" />
              <span className="text-[10px] font-medium text-gray-700">Timeline</span>
            </div>
            <div className="space-y-0.5">
              <p className="text-[9px] text-gray-500">2 months remaining</p>
              <div className="flex items-center justify-center gap-1">
                <span className="text-[9px] text-primary/70 font-medium">{timeProgress}%</span>
                <span className="text-[9px] text-gray-400">complete</span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
};

// File: src/components/landing/visualization/styles.ts

export const styles = `
  .thesis-viz {
    --primary-color: #4F46E5;
    --secondary-color: #E5E7EB;
    --success-color: #10B981;
    --warning-color: #F59E0B;
    --error-color: #EF4444;
    --text-primary: #111827;
    --text-secondary: #6B7280;
    --bg-primary: #FFFFFF;
    --bg-secondary: #F8FAFC;
  }

  .thesis-container {
    min-height: 100vh;
    background: linear-gradient(180deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    padding: 2rem;
    overflow: hidden;
  }

  .visualization-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
    background: var(--bg-primary);
    border-radius: 24px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.05);
    padding: 2rem;
  }

  .central-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-primary);
    border-radius: 50%;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .central-icon-pulse {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: var(--primary-color);
    opacity: 0.2;
    animation: pulse 2s infinite;
  }

  .sections-circle {
    position: relative;
    width: 800px;
    height: 800px;
    margin: 0 auto;
    transform: rotate(-90deg);
  }

  .section-card {
    position: absolute;
    width: 240px;
    background: var(--bg-primary);
    border-radius: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    transition: all 0.3s ease;
    transform-origin: center;
  }

  .section-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .section-header h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background: var(--secondary-color);
    border-radius: 3px;
    margin: 0.75rem 0;
    overflow: hidden;
  }

  .progress-bar-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), #818CF8);
    transition: width 0.5s ease;
  }

  .section-details {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }

  .stats-dashboard {
    position: absolute;
    top: 2rem;
    right: 2rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .stat-card {
    background: var(--bg-primary);
    padding: 1.25rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
  }

  .collaboration-panel {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
  }

  .collaborator-card {
    background: var(--bg-primary);
    padding: 0.75rem 1.25rem;
    border-radius: 999px;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
  }

  .collaborator-card:hover {
    transform: translateY(-2px);
  }

  .active-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--success-color);
  }

  .timeline-card {
    position: absolute;
    left: 2rem;
    top: 50%;
    transform: translateY(-50%);
    background: var(--bg-primary);
    padding: 1.25rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    width: 200px;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
      opacity: 0.2;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.1;
    }
    100% {
      transform: scale(1);
      opacity: 0.2;
    }
  }

  @media (max-width: 1024px) {
    .sections-circle {
      transform: scale(0.8) rotate(-90deg);
    }
    
    .stats-dashboard {
      position: relative;
      top: 0;
      right: 0;
      margin-top: 2rem;
    }
  }
`;


// File: src/components/loading/LoadingProgress.tsx

import { useState, useEffect } from 'react';
import { Progress } from "@/components/ui/progress";

export const LoadingProgress = () => {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setProgress((oldProgress) => {
        // Slow down progress as it gets closer to 90%
        const increment = Math.max(1, (90 - oldProgress) / 10);
        const newProgress = Math.min(oldProgress + increment, 90);
        return newProgress;
      });
    }, 200);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="w-full space-y-4">
      <Progress value={progress} className="w-full h-2" />
      <p className="text-sm text-muted-foreground text-center animate-pulse">
        Loading your content...
      </p>
    </div>
  );
};

// File: src/components/loading/LoadingSkeleton.tsx

import { motion } from "framer-motion";
import { LoadingProgress } from "./LoadingProgress";

export const LoadingSkeleton = () => (
  <motion.div
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    className="min-h-screen bg-background p-8 flex items-center justify-center"
  >
    <div className="container mx-auto max-w-xl space-y-8">
      <LoadingProgress />
      <div className="space-y-6">
        {[1, 2, 3].map((i) => (
          <motion.div
            key={i}
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: i * 0.1 }}
            className="bg-card rounded-lg p-6 shadow-lg"
          >
            <div className="space-y-3">
              <div className="h-4 w-24 bg-muted rounded animate-pulse" />
              <div className="h-8 w-16 bg-muted rounded animate-pulse" />
              <div className="h-4 w-32 bg-muted rounded animate-pulse" />
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  </motion.div>
);

// File: src/components/onboarding/GettingStartedWizard.tsx

import React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { CheckCircle2, Circle } from "lucide-react";

interface WizardStep {
  title: string;
  description: string;
  completed: boolean;
}

export const GettingStartedWizard = () => {
  const [steps, setSteps] = React.useState<WizardStep[]>([
    {
      title: "Create Your Profile",
      description: "Set up your academic profile and preferences",
      completed: false
    },
    {
      title: "Choose Your Template",
      description: "Select a thesis template that matches your needs",
      completed: false
    },
    {
      title: "Set Up Chapters",
      description: "Organize your thesis structure with chapters and sections",
      completed: false
    },
    {
      title: "Add Collaborators",
      description: "Invite supervisors or co-authors to your project",
      completed: false
    }
  ]);

  const progress = (steps.filter(step => step.completed).length / steps.length) * 100;

  const toggleStep = (index: number) => {
    const newSteps = [...steps];
    newSteps[index].completed = !newSteps[index].completed;
    setSteps(newSteps);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Getting Started</CardTitle>
        <CardDescription>
          Complete these steps to set up your thesis project
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Progress value={progress} className="mb-4" />
        <div className="space-y-4">
          {steps.map((step, index) => (
            <div
              key={index}
              className="flex items-center space-x-4 p-4 rounded-lg hover:bg-accent cursor-pointer"
              onClick={() => toggleStep(index)}
            >
              {step.completed ? (
                <CheckCircle2 className="h-6 w-6 text-primary" />
              ) : (
                <Circle className="h-6 w-6 text-muted-foreground" />
              )}
              <div>
                <h3 className="font-medium">{step.title}</h3>
                <p className="text-sm text-muted-foreground">
                  {step.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// File: src/components/onboarding/GuidedTour.tsx

import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

interface TourStep {
  title: string;
  description: string;
  target: string;
}

const tourSteps: TourStep[] = [
  {
    title: "Welcome to Your Thesis Journey",
    description: "Let's take a quick tour of the main features to help you get started.",
    target: "welcome-step"
  },
  {
    title: "Create Your First Thesis",
    description: "Click here to start a new thesis project. You can choose from various templates or start from scratch.",
    target: "create-thesis"
  },
  {
    title: "Organize Your Content",
    description: "Use the sidebar to navigate through different sections of your thesis.",
    target: "thesis-sidebar"
  },
  {
    title: "Collaborate with Others",
    description: "Invite collaborators to work on your thesis in real-time.",
    target: "collaboration"
  }
];

export const GuidedTour = () => {
  const [isOpen, setIsOpen] = React.useState(true);
  const [currentStep, setCurrentStep] = React.useState(0);
  const { toast } = useToast();

  const handleNext = () => {
    if (currentStep < tourSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      setIsOpen(false);
      toast({
        title: "Tour Completed!",
        description: "You're now ready to start working on your thesis.",
      });
    }
  };

  const handleSkip = () => {
    setIsOpen(false);
    toast({
      title: "Tour Skipped",
      description: "You can restart the tour anytime from the help menu.",
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{tourSteps[currentStep].title}</DialogTitle>
          <DialogDescription>
            {tourSteps[currentStep].description}
          </DialogDescription>
        </DialogHeader>
        <div className="flex justify-between mt-4">
          <Button variant="outline" onClick={handleSkip}>
            Skip Tour
          </Button>
          <Button onClick={handleNext}>
            {currentStep === tourSteps.length - 1 ? "Finish" : "Next"}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/reference/ReferenceCard.tsx

import React from 'react';
import { Reference } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BookOpen, Trash2, Edit2 } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TagInput } from '@/components/ui/tag-input';

interface ReferenceCardProps {
  reference: Reference;
  onRemove: (id: string) => void;
  onUpdate: (reference: Reference) => void;
}

export const ReferenceCard = ({ reference, onRemove, onUpdate }: ReferenceCardProps) => {
  const [isEditing, setIsEditing] = React.useState(false);

  return (
    <Card className="group relative border-2 border-editor-border transition-all duration-200 hover:shadow-lg">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">
          <BookOpen className="w-4 h-4 inline mr-2" />
          {reference.type.charAt(0).toUpperCase() + reference.type.slice(1)}
        </CardTitle>
        <div className="flex gap-2 opacity-0 transition-opacity group-hover:opacity-100">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsEditing(!isEditing)}
            className="h-8 w-8 p-0"
          >
            <Edit2 className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onRemove(reference.id)}
            className="h-8 w-8 p-0"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        {isEditing ? (
          <div className="space-y-4 animate-fade-in">
            <Select
              value={reference.type}
              onValueChange={(value: any) =>
                onUpdate({ ...reference, type: value })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="article">Article</SelectItem>
                <SelectItem value="book">Book</SelectItem>
                <SelectItem value="conference">Conference</SelectItem>
                <SelectItem value="thesis">Thesis</SelectItem>
                <SelectItem value="website">Website</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
            <Input
              placeholder="Title"
              value={reference.title}
              onChange={(e) =>
                onUpdate({ ...reference, title: e.target.value })
              }
            />
            <TagInput
              placeholder="Authors (comma-separated)"
              tags={reference.authors}
              onChange={(tags) =>
                onUpdate({ ...reference, authors: tags })
              }
            />
            <Input
              placeholder="Year"
              value={reference.year}
              onChange={(e) =>
                onUpdate({ ...reference, year: e.target.value })
              }
            />
            {reference.type === 'article' && (
              <div className="space-y-2">
                <Input
                  placeholder="DOI"
                  value={reference.doi}
                  onChange={(e) =>
                    onUpdate({ ...reference, doi: e.target.value })
                  }
                />
                <Input
                  placeholder="Journal"
                  value={reference.journal}
                  onChange={(e) =>
                    onUpdate({ ...reference, journal: e.target.value })
                  }
                />
                <div className="grid grid-cols-3 gap-2">
                  <Input
                    placeholder="Volume"
                    value={reference.volume}
                    onChange={(e) =>
                      onUpdate({ ...reference, volume: e.target.value })
                    }
                  />
                  <Input
                    placeholder="Issue"
                    value={reference.issue}
                    onChange={(e) =>
                      onUpdate({ ...reference, issue: e.target.value })
                    }
                  />
                  <Input
                    placeholder="Pages"
                    value={reference.pages}
                    onChange={(e) =>
                      onUpdate({ ...reference, pages: e.target.value })
                    }
                  />
                </div>
              </div>
            )}
            {(reference.type === 'website' || reference.type === 'other') && (
              <Input
                placeholder="URL"
                value={reference.url}
                onChange={(e) =>
                  onUpdate({ ...reference, url: e.target.value })
                }
              />
            )}
            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsEditing(false)}
              >
                Cancel
              </Button>
              <Button
                size="sm"
                onClick={() => setIsEditing(false)}
              >
                Save
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-2">
            <h4 className="font-medium">{reference.title}</h4>
            <p className="text-sm text-muted-foreground">
              {reference.authors.join(', ')} ({reference.year})
            </p>
            {reference.journal && (
              <p className="text-sm italic">{reference.journal}</p>
            )}
            {reference.doi && (
              <p className="text-sm">DOI: {reference.doi}</p>
            )}
            {reference.url && (
              <p className="text-sm">
                <a href={reference.url} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                  {reference.url}
                </a>
              </p>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// File: src/components/reference/ReferenceDialog.tsx

import React from 'react';
import { Reference } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PlusCircle } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TagInput } from '@/components/ui/tag-input';

interface ReferenceDialogProps {
  onAddReference: (reference: Reference) => void;
}

export const ReferenceDialog = ({ onAddReference }: ReferenceDialogProps) => {
  const [title, setTitle] = React.useState('');
  const [authors, setAuthors] = React.useState<string[]>(['']);
  const [year, setYear] = React.useState('');
  const [type, setType] = React.useState<'article' | 'book' | 'conference' | 'thesis' | 'website' | 'other'>('article');
  const [text, setText] = React.useState('');
  const [source, setSource] = React.useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newReference: Reference = {
      id: Date.now().toString(),
      title,
      authors,
      year,
      type,
      text,
      source
    };
    onAddReference(newReference);
    setTitle('');
    setAuthors(['']);
    setYear('');
    setType('article');
    setText('');
    setSource('');
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="gap-2">
          <PlusCircle className="w-4 h-4" />
          Add Reference
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>Add New Reference</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">Type</label>
            <Select value={type} onValueChange={(value: any) => setType(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="article">Article</SelectItem>
                <SelectItem value="book">Book</SelectItem>
                <SelectItem value="conference">Conference</SelectItem>
                <SelectItem value="thesis">Thesis</SelectItem>
                <SelectItem value="website">Website</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">Title</label>
            <Input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter reference title..."
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">Text</label>
            <Input
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Enter reference text..."
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">Source</label>
            <Input
              value={source}
              onChange={(e) => setSource(e.target.value)}
              placeholder="Enter reference source..."
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">Authors</label>
            <TagInput
              placeholder="Add authors (press Enter or comma to add)"
              tags={authors}
              onChange={setAuthors}
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">Year</label>
            <Input
              value={year}
              onChange={(e) => setYear(e.target.value)}
              placeholder="Publication year..."
            />
          </div>
          <div className="flex justify-end">
            <Button type="submit">Add Reference</Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/review/CommentInput.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Send } from 'lucide-react';

interface CommentInputProps {
  onSubmit: (content: string) => Promise<void>;
}

export const CommentInput: React.FC<CommentInputProps> = ({ onSubmit }) => {
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (!content.trim()) return;
    
    setLoading(true);
    try {
      await onSubmit(content);
      setContent('');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-2">
      <Textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Write your comment..."
        className="min-h-[100px]"
      />
      <div className="flex justify-end">
        <Button 
          onClick={handleSubmit}
          disabled={!content.trim() || loading}
          className="flex items-center gap-2"
        >
          <Send className="w-4 h-4" />
          Submit Comment
        </Button>
      </div>
    </div>
  );
};

// File: src/components/review/CommentList.tsx

import React from 'react';
import { CommentThread as CommentThreadType } from '@/types/thesis';
import { Profile } from '@/types/profile';
import { CommentThread } from './CommentThread';

interface CommentListProps {
  comments: CommentThreadType[];
  currentUser: Profile | null;
  thesisId: string;
  sectionId: string;
}

export const CommentList = ({ 
  comments, 
  currentUser,
  thesisId,
  sectionId 
}: CommentListProps) => {
  return (
    <div className="space-y-6">
      {comments.map((thread) => (
        <CommentThread
          key={thread.comment.id}
          thread={thread}
          currentUser={currentUser}
          thesisId={thesisId}
          sectionId={sectionId}
        />
      ))}
    </div>
  );
};

// File: src/components/review/CommentThread.tsx

import React, { useState } from 'react';
import { Profile } from '@/types/profile';
import type { CommentThread as CommentThreadType } from '@/types/thesis';
import { Card } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface CommentThreadProps {
  thread: CommentThreadType;
  currentUser: Profile | null;
  thesisId: string;
  sectionId: string;
}

export const CommentThread = ({
  thread,
  currentUser,
  thesisId,
  sectionId
}: CommentThreadProps) => {
  const [replyContent, setReplyContent] = useState('');
  const [showReplyForm, setShowReplyForm] = useState(false);
  const { toast } = useToast();

  const handleReply = async () => {
    if (!currentUser || !replyContent.trim()) return;

    try {
      const { data, error } = await supabase
        .from('thesis_reviews')
        .insert({
          thesis_id: thesisId,
          section_id: sectionId,
          reviewer_id: currentUser.id,
          content: { text: replyContent },
          parent_id: thread.comment.id,
          status: 'pending'
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Reply added",
        description: "Your reply has been posted successfully.",
      });

      setReplyContent('');
      setShowReplyForm(false);
    } catch (error: any) {
      console.error('Error adding reply:', error);
      toast({
        title: "Error",
        description: "Failed to post reply. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-4">
      <Card className="p-4">
        <div className="flex items-start space-x-4">
          <Avatar>
            <AvatarFallback>
              {thread.comment.reviewer_id.substring(0, 2).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <div className="flex-1">
            <div className="prose prose-sm">
              <p>{thread.comment.content.text}</p>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowReplyForm(!showReplyForm)}
            >
              Reply
            </Button>
          </div>
        </div>
      </Card>

      {thread.replies.map((reply) => (
        <Card key={reply.id} className="p-4 ml-8">
          <div className="flex items-start space-x-4">
            <Avatar>
              <AvatarFallback>
                {reply.reviewer_id.substring(0, 2).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1 prose prose-sm">
              <p>{reply.content.text}</p>
            </div>
          </div>
        </Card>
      ))}

      {showReplyForm && (
        <div className="ml-8 space-y-2">
          <Textarea
            value={replyContent}
            onChange={(e) => setReplyContent(e.target.value)}
            placeholder="Write your reply..."
            className="min-h-[100px]"
          />
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setShowReplyForm(false)}
            >
              Cancel
            </Button>
            <Button onClick={handleReply}>
              Post Reply
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

// File: src/components/review/ReviewInterface.tsx

import React, { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { CommentList } from './CommentList';
import { CommentInput } from './CommentInput';
import { Badge } from '@/components/ui/badge';
import { Check, MessageSquare, AlertCircle } from 'lucide-react';

interface ReviewInterfaceProps {
  thesisId: string;
  sectionId: string;
}

export const ReviewInterface: React.FC<ReviewInterfaceProps> = ({
  thesisId,
  sectionId,
}) => {
  const [comments, setComments] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    fetchComments();
  }, [thesisId, sectionId]);

  const fetchComments = async () => {
    try {
      console.log('Fetching comments for thesis:', thesisId, 'section:', sectionId);
      const { data, error } = await supabase
        .from('thesis_reviews')
        .select(`
          *,
          profiles (
            email,
            roles (
              name
            )
          )
        `)
        .eq('thesis_id', thesisId)
        .eq('section_id', sectionId)
        .order('created_at', { ascending: true });

      if (error) throw error;

      console.log('Fetched comments:', data);
      setComments(data || []);
    } catch (error) {
      console.error('Error fetching comments:', error);
      toast({
        title: "Error",
        description: "Failed to load comments",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitComment = async (content: string) => {
    try {
      console.log('Submitting new comment');
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        throw new Error('No authenticated user');
      }

      const { data, error } = await supabase
        .from('thesis_reviews')
        .insert([
          {
            thesis_id: thesisId,
            section_id: sectionId,
            reviewer_id: userData.user.id,
            content: { text: content },
            status: 'pending'
          }
        ])
        .select()
        .single();

      if (error) throw error;

      console.log('New comment submitted:', data);
      setComments(prev => [...prev, data]);
      
      toast({
        title: "Success",
        description: "Comment added successfully",
      });
    } catch (error) {
      console.error('Error submitting comment:', error);
      toast({
        title: "Error",
        description: "Failed to submit comment",
        variant: "destructive",
      });
    }
  };

  return (
    <Card className="p-4 space-y-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium">Review Comments</h3>
        <Badge variant="outline" className="flex items-center gap-2">
          <MessageSquare className="w-4 h-4" />
          {comments.length} Comments
        </Badge>
      </div>

      <Tabs defaultValue="comments">
        <TabsList>
          <TabsTrigger value="comments">Comments</TabsTrigger>
          <TabsTrigger value="resolved">Resolved</TabsTrigger>
        </TabsList>

        <TabsContent value="comments">
          <ScrollArea className="h-[400px] pr-4">
            <CommentList 
              comments={comments.filter(c => c.status === 'pending')}
              currentUser={null}
              thesisId={thesisId}
              sectionId={sectionId}
            />
          </ScrollArea>
        </TabsContent>

        <TabsContent value="resolved">
          <ScrollArea className="h-[400px] pr-4">
            <CommentList 
              comments={comments.filter(c => c.status === 'resolved')}
              currentUser={null}
              thesisId={thesisId}
              sectionId={sectionId}
            />
          </ScrollArea>
        </TabsContent>
      </Tabs>

      <CommentInput onSubmit={handleSubmitComment} />
    </Card>
  );
};

// File: src/components/review/ReviewerInterface.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Profile } from '@/types/profile';
import { CommentThread } from '@/types/thesis';
import { CommentList } from './CommentList';
import { CommentInput } from './CommentInput';
import { transformComment } from '@/utils/commentTransforms';

interface ReviewerInterfaceProps {
  thesisId: string;
  sectionId: string;
}

export const ReviewerInterface = ({ thesisId, sectionId }: ReviewerInterfaceProps) => {
  const [comments, setComments] = useState<CommentThread[]>([]);
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState<Profile | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const fetchComments = async () => {
      try {
        console.log('Fetching comments for thesis:', thesisId, 'section:', sectionId);
        const { data: commentsData, error: commentsError } = await supabase
          .from('thesis_reviews')
          .select(`
            *,
            profiles (
              email,
              roles (
                name
              )
            )
          `)
          .eq('thesis_id', thesisId)
          .eq('section_id', sectionId)
          .order('created_at', { ascending: true });

        if (commentsError) {
          console.error('Error fetching comments:', commentsError);
          throw commentsError;
        }

        console.log('Fetched comments:', commentsData);
        
        // Transform the flat comments into a thread structure
        const threadMap = new Map<string | null, CommentThread['comment'][]>();
        commentsData.forEach((comment: any) => {
          const transformedComment = transformComment(comment);
          const parentId = comment.parent_id || null;
          if (!threadMap.has(parentId)) {
            threadMap.set(parentId, []);
          }
          threadMap.get(parentId)?.push(transformedComment);
        });

        // Create thread objects
        const threads: CommentThread[] = (threadMap.get(null) || []).map(comment => ({
          comment,
          replies: threadMap.get(comment.id) || []
        }));

        setComments(threads);

        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .select(`
            *,
            roles (
              name
            )
          `)
          .eq('id', (await supabase.auth.getUser()).data.user?.id)
          .single();

        if (profileError) {
          console.error('Error fetching profile:', profileError);
          throw profileError;
        }

        console.log('Fetched profile:', profileData);
        setProfile(profileData);
      } catch (error) {
        console.error('Error in fetchComments:', error);
        toast({
          title: "Error",
          description: "Failed to load comments",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    fetchComments();
  }, [thesisId, sectionId, toast]);

  const handleSubmitComment = async (content: string) => {
    try {
      console.log('Submitting new comment');
      const { data, error } = await supabase
        .from('thesis_reviews')
        .insert([
          {
            thesis_id: thesisId,
            section_id: sectionId,
            reviewer_id: profile?.id,
            content: { text: content },
            status: 'pending'
          }
        ])
        .select(`
          *,
          profiles (
            email,
            roles (
              name
            )
          )
        `)
        .single();

      if (error) throw error;

      console.log('New comment submitted:', data);
      
      // Add the new comment as a new thread
      const newThread: CommentThread = {
        comment: transformComment(data),
        replies: []
      };
      
      setComments([...comments, newThread]);
      
      toast({
        title: "Success",
        description: "Comment added successfully",
      });
    } catch (error) {
      console.error('Error submitting comment:', error);
      toast({
        title: "Error",
        description: "Failed to submit comment",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return <div>Loading comments...</div>;
  }

  return (
    <div className="space-y-4">
      <CommentList 
        comments={comments}
        currentUser={profile}
        thesisId={thesisId}
        sectionId={sectionId}
      />
      <CommentInput onSubmit={handleSubmitComment} />
    </div>
  );
};

// File: src/components/shared/Navbar.tsx

import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Menu } from "lucide-react";
import { useState } from "react";
import { useTranslation } from "@/hooks/useTranslation";
import { LanguageSwitcher } from "@/components/LanguageSwitcher";

export const Navbar = () => {
 const [isMenuOpen, setIsMenuOpen] = useState(false);
 const { t } = useTranslation();

 return (
   <nav className="fixed w-full bg-[#1A1F2C] text-white z-50">
     <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
       <div className="flex justify-between items-center h-16">
         <Link to="/" className="group">
           <div className="flex items-center">
             <div className="bg-gradient-to-r from-[#9b87f5] via-[#b8a4ff] to-[#D6BCFA] text-transparent bg-clip-text">
               <span className="text-4xl tracking-tight" style={{ fontFamily: 'Cormorant Garamond, serif' }}>
                 Otro7a
               </span>
               <span className="text-2xl font-extralight ml-3" style={{ fontFamily: 'Didot, serif' }}>
                 Manager
               </span>
             </div>
           </div>
         </Link>

         {/* Mobile menu button */}
         <div className="md:hidden">
           <Button
             variant="ghost"
             size="icon"
             onClick={() => setIsMenuOpen(!isMenuOpen)}
             className="text-white hover:bg-[#2A2F3C] hover:text-[#D6BCFA]"
           >
             <Menu className="h-6 w-6" />
           </Button>
         </div>

         {/* Desktop menu */}
         <div className="hidden md:flex items-center space-x-4">
           <Link to="/" className="hover:text-[#D6BCFA] transition-colors font-light tracking-wide">
             {t('common.features')}
           </Link>
           <Link to="/" className="hover:text-[#D6BCFA] transition-colors font-light tracking-wide">
             {t('common.about')}
           </Link>
           <LanguageSwitcher />
           <Link to="/">
             <Button 
               variant="outline" 
               className="bg-transparent text-white border-[#9b87f5] hover:bg-[#9b87f5] hover:text-white transition-all duration-200 font-light tracking-wide"
             >
               {t('common.home')}
             </Button>
           </Link>
         </div>
       </div>

       {/* Mobile menu */}
       {isMenuOpen && (
         <div className="md:hidden py-4 border-t border-[#2A2F3C]">
           <div className="flex flex-col space-y-4">
             <Link
               to="/"
               className="hover:text-[#D6BCFA] transition-colors px-4 font-light tracking-wide"
               onClick={() => setIsMenuOpen(false)}
             >
               {t('common.features')}
             </Link>
             <Link
               to="/"
               className="hover:text-[#D6BCFA] transition-colors px-4 font-light tracking-wide"
               onClick={() => setIsMenuOpen(false)}
             >
               {t('common.about')}
             </Link>
             <div className="px-4">
               <LanguageSwitcher />
             </div>
             <Link to="/" onClick={() => setIsMenuOpen(false)}>
               <Button
                 variant="outline"
                 className="w-full bg-transparent text-white border-[#9b87f5] hover:bg-[#9b87f5] hover:text-white transition-all duration-200 font-light tracking-wide"
               >
                 {t('common.home')}
               </Button>
             </Link>
           </div>
         </div>
       )}
     </div>
   </nav>
 );
};

// File: src/components/sidebar/TableOfContents.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { cn } from '@/lib/utils';
import { CollaboratorLocation } from '@/components/collaboration/CollaboratorLocation';
import { ScrollArea } from '@/components/ui/scroll-area';
import { TaskList } from './TaskList';
import { FileText, BookOpen, ChevronRight, ChevronDown } from 'lucide-react';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface TableOfContentsProps {
  sections: Section[];
  activeSection: string;
  onSectionSelect: (id: string) => void;
  thesisId: string;
  onUpdateSectionData: (section: Section) => void;
  onAddSectionTask: (sectionId: string) => void;
  onUpdateSectionTask: (sectionId: string, taskId: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => void;
  onChangeSectionTaskDescription: (sectionId: string, taskId: string, newDescription: string) => void;
}

export const TableOfContents = ({
  sections = [],
  activeSection,
  onSectionSelect,
  thesisId,
  onUpdateSectionData,
  onAddSectionTask,
  onUpdateSectionTask,
  onChangeSectionTaskDescription,
}: TableOfContentsProps) => {
  const [openSections, setOpenSections] = React.useState<string[]>(['frontMatter', 'mainContent', 'backMatter']);

  const toggleSection = (section: string) => {
    setOpenSections(prev =>
      prev.includes(section)
        ? prev.filter(s => s !== section)
        : [...prev, section]
    );
  };

  // Group sections by type
  const frontMatterSections = sections.filter(section => 
    ['title', 'abstract', 'acknowledgments'].includes(section.type || '')
  );
  
  const mainContentSections = sections.filter(section =>
    !['title', 'abstract', 'acknowledgments', 'references', 'appendix'].includes(section.type || '')
  );
  
  const backMatterSections = sections.filter(section =>
    ['references', 'appendix'].includes(section.type || '')
  );

  const renderSectionItem = (section: Section) => (
    <div key={section.id} className="space-y-2">
      <button
        onClick={() => onSectionSelect(section.id)}
        className={cn(
          "w-full text-left px-3 py-2 rounded-md text-sm",
          "hover:bg-editor-hover transition-colors duration-200",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-editor-accent",
          "flex items-center justify-between group",
          activeSection === section.id && "bg-editor-active text-editor-accent font-medium"
        )}
      >
        <div className="flex items-center gap-2">
          <FileText className="w-4 h-4 text-editor-text group-hover:text-editor-accent transition-colors" />
          <span className="truncate">{section.title || 'Untitled Section'}</span>
        </div>
      </button>
      <TaskList
        tasks={section.tasks}
        onUpdateTask={(taskId, status) => onUpdateSectionTask(section.id, taskId, status)}
        onAddTask={() => onAddSectionTask(section.id)}
        onChangeTaskDescription={(taskId, newDescription) => onChangeSectionTaskDescription(section.id, taskId, newDescription)}
      />
    </div>
  );

  const renderCollapsibleSection = (
    title: string,
    sectionsList: Section[],
    sectionKey: string,
    icon: React.ReactNode
  ) => (
    <Collapsible
      key={sectionKey}
      open={openSections.includes(sectionKey)}
      onOpenChange={() => toggleSection(sectionKey)}
      className="space-y-1"
    >
      <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
        {openSections.includes(sectionKey) ? (
          <ChevronDown className="w-4 h-4 mr-2" />
        ) : (
          <ChevronRight className="w-4 h-4 mr-2" />
        )}
        {icon}
        {title}
      </CollapsibleTrigger>
      <CollapsibleContent className="pl-4 space-y-1">
        {sectionsList.map(renderSectionItem)}
      </CollapsibleContent>
    </Collapsible>
  );

  return (
    <ScrollArea className="h-[calc(100vh-4rem)]">
      <div className="space-y-4">
        {frontMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Front Matter',
            frontMatterSections,
            'frontMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {mainContentSections.length > 0 && (
          renderCollapsibleSection(
            'Main Content',
            mainContentSections,
            'mainContent',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {backMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Back Matter',
            backMatterSections,
            'backMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
      </div>
    </ScrollArea>
  );
};

// File: src/components/sidebar/TaskList.tsx

import React from 'react';
import { Task } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { PlusCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface TaskListProps {
  tasks: Task[];
  onUpdateTask: (taskId: string, status: Task['status']) => void;
  onAddTask: () => void;
  onChangeTaskDescription: (taskId: string, newDescription: string) => void;
}

export const TaskList: React.FC<TaskListProps> = ({
  tasks,
  onUpdateTask,
  onAddTask,
  onChangeTaskDescription,
}) => {
  return (
    <div className="space-y-2">
      {tasks.map((task) => (
        <div key={task.id} className="flex items-center gap-2">
          <select
            value={task.status}
            onChange={(e) => onUpdateTask(task.id, e.target.value as Task['status'])}
            className="text-sm rounded-md border border-input bg-transparent px-2 py-1"
          >
            <option value="pending">Pending</option>
            <option value="in progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="on hold">On Hold</option>
          </select>
          <input
            type="text"
            value={task.description}
            onChange={(e) => onChangeTaskDescription(task.id, e.target.value)}
            className="flex-1 text-sm rounded-md border border-input bg-transparent px-2 py-1"
          />
        </div>
      ))}
      <Button
        onClick={onAddTask}
        variant="ghost"
        size="sm"
        className="w-full justify-start gap-2"
      >
        <PlusCircle className="h-4 w-4" />
        Add Task
      </Button>
    </div>
  );
};

// File: src/components/sidebar/ThesisPlan.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { BookOpen, ChevronDown, ChevronRight } from 'lucide-react';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Checkbox } from '@/components/ui/checkbox';

interface ThesisPlanProps {
  sections: Section[];
  activeSection: string;
  onSectionSelect: (id: string) => void;
  onUpdateSectionData: (section: Section) => void;
}

export const ThesisPlan: React.FC<ThesisPlanProps> = ({
  sections,
  activeSection,
  onSectionSelect,
  onUpdateSectionData
}) => {
  const [openSections, setOpenSections] = React.useState<string[]>(['frontMatter', 'mainContent', 'backMatter']);

  const toggleSection = (section: string) => {
    setOpenSections(prev =>
      prev.includes(section)
        ? prev.filter(s => s !== section)
        : [...prev, section]
    );
  };

  const handleStatusChange = (sectionId: string, taskId: string, checked: boolean) => {
    const section = sections.find(s => s.id === sectionId);
    if (!section) return;

    const updatedTasks = section.tasks.map(task =>
      task.id === taskId ? { ...task, status: checked ? 'completed' : 'pending', priority: task.priority || 'medium' } : task
    );

    onUpdateSectionData({
      ...section,
      tasks: updatedTasks
    });
  };

  const renderSectionItem = (section: Section) => (
    <div key={section.id} className="space-y-2">
      <button
        onClick={() => onSectionSelect(section.id)}
        className={cn(
          "w-full text-left px-3 py-2 rounded-md text-sm",
          "hover:bg-editor-hover transition-colors duration-200",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-editor-accent",
          "flex items-center gap-2 group",
          activeSection === section.id && "bg-editor-active text-editor-accent font-medium"
        )}
      >
        <span className="truncate">{section.title || 'Untitled Section'}</span>
      </button>
      <ul className="ml-4 space-y-1">
        {(section.tasks || []).map((task) => (
          <li key={task.id} className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Checkbox
                checked={task.status === 'completed'}
                onCheckedChange={(checked) => handleStatusChange(section.id, task.id, checked as boolean)}
                id={task.id}
              />
              <span className="text-sm">{task.description}</span>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );

  const frontMatterSections = sections.filter(section => 
    ['title', 'abstract', 'acknowledgments'].includes(section.type || '')
  );
  
  const mainContentSections = sections.filter(section =>
    !['title', 'abstract', 'acknowledgments', 'references', 'appendix'].includes(section.type || '')
  );
  
  const backMatterSections = sections.filter(section =>
    ['references', 'appendix'].includes(section.type || '')
  );

  return (
    <ScrollArea className="h-[calc(100vh-8rem)]">
      <div className="space-y-4">
        {frontMatterSections.length > 0 && (
          <Collapsible
            open={openSections.includes('frontMatter')}
            onOpenChange={() => toggleSection('frontMatter')}
          >
            <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
              {openSections.includes('frontMatter') ? (
                <ChevronDown className="w-4 h-4 mr-2" />
              ) : (
                <ChevronRight className="w-4 h-4 mr-2" />
              )}
              <BookOpen className="w-4 h-4 mr-2" />
              Front Matter
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1">
              {frontMatterSections.map(renderSectionItem)}
            </CollapsibleContent>
          </Collapsible>
        )}

        {mainContentSections.length > 0 && (
          <Collapsible
            open={openSections.includes('mainContent')}
            onOpenChange={() => toggleSection('mainContent')}
          >
            <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
              {openSections.includes('mainContent') ? (
                <ChevronDown className="w-4 h-4 mr-2" />
              ) : (
                <ChevronRight className="w-4 h-4 mr-2" />
              )}
              <BookOpen className="w-4 h-4 mr-2" />
              Main Content
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1">
              {mainContentSections.map(renderSectionItem)}
            </CollapsibleContent>
          </Collapsible>
        )}

        {backMatterSections.length > 0 && (
          <Collapsible
            open={openSections.includes('backMatter')}
            onOpenChange={() => toggleSection('backMatter')}
          >
            <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
              {openSections.includes('backMatter') ? (
                <ChevronDown className="w-4 h-4 mr-2" />
              ) : (
                <ChevronRight className="w-4 h-4 mr-2" />
              )}
              <BookOpen className="w-4 h-4 mr-2" />
              Back Matter
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1">
              {backMatterSections.map(renderSectionItem)}
            </CollapsibleContent>
          </Collapsible>
        )}
      </div>
    </ScrollArea>
  );
};

// File: src/components/table/TableCard.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Table } from '@/types/thesis';
import { Pencil, Trash2 } from 'lucide-react';

interface TableCardProps {
  table: Table;
  onUpdate: (table: Table) => void;
  onRemove: (id: string) => void;
}

export const TableCard = ({ table, onUpdate, onRemove }: TableCardProps) => {
  return (
    <Card className="p-4 space-y-4">
      <div className="flex justify-between items-start">
        <div className="space-y-1">
          <h3 className="font-medium">Table {table.id}</h3>
          {table.caption && (
            <p className="text-sm text-muted-foreground">{table.caption}</p>
          )}
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => onRemove(table.id)}
            className="h-8 w-8"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      <div 
        className="w-full overflow-x-auto"
        dangerouslySetInnerHTML={{ __html: table.content }}
      />
    </Card>
  );
};

// File: src/components/table/TableDialog.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Table2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from '@/components/ui/input';
import { Table } from '@/types/thesis';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface TableDialogProps {
  onAddTable: (table: Table) => void;
}

export const TableDialog = ({ onAddTable }: TableDialogProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [caption, setCaption] = useState('');
  const [sheetUrl, setSheetUrl] = useState('');
  const { toast } = useToast();

  const handleOpenDialog = () => {
    const newSheetUrl = 'https://docs.google.com/spreadsheets/d/1/edit';
    setSheetUrl(newSheetUrl);
    setIsOpen(true);
  };

  const handleSave = () => {
    try {
      console.log('üìä Creating table from Google Sheets');
      
      if (!sheetUrl) {
        toast({
          title: "Error",
          description: "Please enter your table data in Google Sheets",
          variant: "destructive",
        });
        return;
      }

      // Extract the embedded HTML from Google Sheets
      const embedUrl = sheetUrl.replace('/edit', '/preview');
      const tableContent = `
        <div class="google-sheets-table">
          <iframe 
            src="${embedUrl}"
            style="width: 100%; min-height: 400px; border: none;"
            allowfullscreen
          ></iframe>
        </div>
      `;

      const newTable: Table = {
        id: Date.now().toString(),
        title: 'Google Sheets Table',
        content: tableContent,
        caption: caption
      };

      onAddTable(newTable);
      setIsOpen(false);
      setCaption('');
      setSheetUrl('');
      
      toast({
        title: "Success",
        description: "Table created from Google Sheets",
      });
      console.log('‚úÖ Table saved successfully');
    } catch (error) {
      console.error('‚ùå Error creating table:', error);
      toast({
        title: "Error creating table",
        description: "Please try again",
        variant: "destructive",
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button 
          variant="outline" 
          size="sm" 
          className="gap-2 bg-white shadow-md hover:bg-gray-50"
          onClick={handleOpenDialog}
        >
          <Table2 className="w-4 h-4" />
          Add Table
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl h-[80vh]">
        <DialogHeader>
          <DialogTitle>Create Table with Google Sheets</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col h-full space-y-4">
          <Alert>
            <AlertDescription>
              <p className="mb-2">Create your table directly in Google Sheets below:</p>
              <ol className="list-decimal pl-4 space-y-1">
                <li>Enter your data in the embedded Google Sheet</li>
                <li>Click "Share" in the top right and set to "Anyone with the link can view"</li>
                <li>Add a descriptive caption for your table</li>
                <li>Click "Create Table" when you're done</li>
              </ol>
            </AlertDescription>
          </Alert>

          <div className="flex-grow border rounded-lg overflow-hidden bg-white">
            <iframe 
              src="https://docs.google.com/spreadsheets/d/1/edit?usp=sharing&embedded=true"
              className="w-full h-full border-none"
              title="Google Sheets Table Editor"
            />
          </div>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1.5 block text-gray-700">
                Table Caption
              </label>
              <Input
                value={caption}
                onChange={(e) => setCaption(e.target.value)}
                placeholder="Enter a descriptive caption for your table..."
                className="w-full"
              />
              <p className="text-xs text-muted-foreground mt-1">
                A good caption helps readers understand your table's content
              </p>
            </div>

            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                onClick={() => setIsOpen(false)}
                className="hover:bg-gray-50"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleSave}
                className="bg-primary hover:bg-primary/90"
              >
                Create Table
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/table/TableDialogFooter.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface TableDialogFooterProps {
  caption: string;
  onCaptionChange: (caption: string) => void;
  onCancel: () => void;
  onSave: () => void;
}

export const TableDialogFooter = ({
  caption,
  onCaptionChange,
  onCancel,
  onSave,
}: TableDialogFooterProps) => {
  return (
    <div className="space-y-4">
      <div>
        <label className="text-sm font-medium mb-1.5 block text-gray-700">
          Table Caption
        </label>
        <Input
          value={caption}
          onChange={(e) => onCaptionChange(e.target.value)}
          placeholder="Enter a descriptive caption for your table..."
          className="w-full"
        />
        <p className="text-xs text-muted-foreground mt-1">
          A good caption helps readers understand your table's content at a glance.
        </p>
      </div>
      <div className="flex justify-end gap-2">
        <Button
          variant="outline"
          onClick={onCancel}
          className="hover:bg-gray-50"
        >
          Cancel
        </Button>
        <Button 
          onClick={onSave}
          className="bg-primary hover:bg-primary/90"
        >
          Create Table
        </Button>
      </div>
    </div>
  );
};

// File: src/components/table/TableDialogGrid.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Plus, Minus } from 'lucide-react';
import { TableFormatControls } from './TableFormatControls';
import { TableGridCell } from './TableGridCell';

interface TableDialogGridProps {
  gridData: Array<Array<{ value: string; format: any }>>;
  onAddColumn: () => void;
  onAddRow: () => void;
  onRemoveColumn: (index: number) => void;
  onRemoveRow: (index: number) => void;
  onUpdateCell: (rowIndex: number, colIndex: number, value: string) => void;
  onFormatChange: (format: string, rowIndex: number, colIndex: number) => void;
}

export const TableDialogGrid = ({
  gridData,
  onAddColumn,
  onAddRow,
  onRemoveColumn,
  onRemoveRow,
  onUpdateCell,
  onFormatChange,
}: TableDialogGridProps) => {
  return (
    <div className="relative overflow-hidden rounded-lg border border-gray-200 shadow-sm bg-white">
      <div className="grid-controls flex justify-end gap-2 p-2 bg-gray-50/80 backdrop-blur-sm border-b">
        <Button
          variant="outline"
          size="sm"
          onClick={onAddColumn}
          className="flex items-center gap-1 bg-white hover:bg-primary/5"
        >
          <Plus className="h-3 w-3" /> Column
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={onAddRow}
          className="flex items-center gap-1 bg-white hover:bg-primary/5"
        >
          <Plus className="h-3 w-3" /> Row
        </Button>
      </div>
      <div className="grid-content p-4 overflow-x-auto">
        <div 
          className="grid gap-2" 
          style={{ 
            gridTemplateColumns: `repeat(${gridData[0].length + 1}, minmax(min-content, 1fr))` 
          }}
        >
          <div></div>
          {gridData[0].map((_, colIndex) => (
            <div key={`col-${colIndex}`} className="flex justify-center">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onRemoveColumn(colIndex)}
                className="h-6 w-6 p-0 hover:bg-destructive/10 hover:text-destructive"
                disabled={gridData[0].length <= 1}
              >
                <Minus className="h-3 w-3" />
              </Button>
            </div>
          ))}
          
          {gridData.map((row, rowIndex) => (
            <React.Fragment key={`row-${rowIndex}`}>
              <div className="flex items-center justify-center">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onRemoveRow(rowIndex)}
                  className="h-6 w-6 p-0 hover:bg-destructive/10 hover:text-destructive"
                  disabled={gridData.length <= 1}
                >
                  <Minus className="h-3 w-3" />
                </Button>
              </div>
              {row.map((cell, colIndex) => (
                <div key={`cell-${rowIndex}-${colIndex}`} className="relative">
                  <TableFormatControls
                    onFormatChange={(format) => onFormatChange(format, rowIndex, colIndex)}
                    isHeader={rowIndex === 0}
                    activeFormats={cell.format}
                  />
                  <TableGridCell
                    value={cell.value}
                    onChange={(value) => onUpdateCell(rowIndex, colIndex, value)}
                    isHeader={rowIndex === 0}
                    format={cell.format}
                  />
                </div>
              ))}
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

// File: src/components/table/TableDialogHeader.tsx

import React from 'react';
import { DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Table2 } from 'lucide-react';

export const TableDialogHeader = () => {
  return (
    <DialogHeader>
      <DialogTitle className="flex items-center gap-2 text-lg font-serif">
        <Table2 className="w-5 h-5 text-primary" />
        Create New Table
      </DialogTitle>
      <p className="text-sm text-muted-foreground mt-1">
        Design your table with an Excel-like interface. Add rows and columns as needed.
      </p>
    </DialogHeader>
  );
};

// File: src/components/table/TableFormatControls.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { 
  AlignLeft, 
  AlignCenter, 
  AlignRight, 
  Bold, 
  Italic,
  Underline,
  Heading,
  Type,
  MinusSquare
} from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { cn } from '@/lib/utils';

interface TableFormatControlsProps {
  onFormatChange: (format: string) => void;
  isHeader?: boolean;
  activeFormats?: {
    align?: 'left' | 'center' | 'right';
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    headerStyle?: 'none' | 'primary' | 'secondary';
  };
}

export const TableFormatControls = ({ 
  onFormatChange, 
  isHeader = false,
  activeFormats = {}
}: TableFormatControlsProps) => {
  return (
    <div className="table-editor-controls">
      <div className="format-group">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('align-left')}
          className={cn("format-button", activeFormats.align === 'left' && "active")}
        >
          <AlignLeft className="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('align-center')}
          className={cn("format-button", activeFormats.align === 'center' && "active")}
        >
          <AlignCenter className="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('align-right')}
          className={cn("format-button", activeFormats.align === 'right' && "active")}
        >
          <AlignRight className="h-4 w-4" />
        </Button>
      </div>
      
      <Separator orientation="vertical" className="h-6" />
      
      <div className="format-group">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('bold')}
          className={cn("format-button", activeFormats.bold && "active")}
        >
          <Bold className="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('italic')}
          className={cn("format-button", activeFormats.italic && "active")}
        >
          <Italic className="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onFormatChange('underline')}
          className={cn("format-button", activeFormats.underline && "active")}
        >
          <Underline className="h-4 w-4" />
        </Button>
      </div>

      {isHeader && (
        <>
          <Separator orientation="vertical" className="h-6" />
          <div className="format-group">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onFormatChange('header-primary')}
              className={cn(
                "format-button",
                activeFormats.headerStyle === 'primary' && "active"
              )}
              title="Primary Header Style"
            >
              <Heading className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onFormatChange('header-secondary')}
              className={cn(
                "format-button",
                activeFormats.headerStyle === 'secondary' && "active"
              )}
              title="Secondary Header Style"
            >
              <Type className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onFormatChange('header-none')}
              className={cn(
                "format-button",
                activeFormats.headerStyle === 'none' && "active"
              )}
              title="Remove Header Style"
            >
              <MinusSquare className="h-4 w-4" />
            </Button>
          </div>
        </>
      )}
    </div>
  );
};

// File: src/components/table/TableGridCell.tsx

import React from 'react';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';

interface TableGridCellProps {
  value: string;
  onChange: (value: string) => void;
  isHeader?: boolean;
  format?: {
    align?: 'left' | 'center' | 'right';
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    headerStyle?: 'none' | 'primary' | 'secondary';
  };
}

export const TableGridCell = ({ 
  value, 
  onChange, 
  isHeader = false,
  format = {}
}: TableGridCellProps) => {
  const cellClasses = cn(
    "table-editor-cell",
    {
      'font-bold': format.bold || (isHeader && format.headerStyle !== 'none'),
      'font-normal': format.headerStyle === 'none',
      'italic': format.italic,
      'underline': format.underline,
      'text-left': format.align === 'left',
      'text-center': format.align === 'center',
      'text-right': format.align === 'right',
      'bg-gray-50': isHeader && format.headerStyle === 'primary',
      'bg-gray-100/50': isHeader && format.headerStyle === 'secondary',
      'text-gray-900': isHeader && format.headerStyle === 'primary',
      'text-gray-700': isHeader && format.headerStyle === 'secondary',
      'uppercase tracking-wide text-xs': isHeader && format.headerStyle === 'primary',
      'capitalize': isHeader && format.headerStyle === 'secondary',
    }
  );

  return (
    <Input
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className={cellClasses}
      placeholder={isHeader ? "Header" : "Cell content"}
    />
  );
};

// File: src/components/testing/SystemTest.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, CheckCircle, RefreshCw, XCircle } from 'lucide-react';

interface TestResult {
  feature: string;
  status: 'success' | 'error' | 'pending';
  error?: string;
  duration?: number;
}

export const SystemTest = () => {
  const [results, setResults] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [progress, setProgress] = useState(0);
  const { toast } = useToast();

  const features = [
    { name: 'Authentication', test: testAuthentication },
    { name: 'Thesis Creation', test: testThesisCreation },
    { name: 'Citation Management', test: testCitationManagement },
    { name: 'Collaboration', test: testCollaboration },
    { name: 'Review System', test: testReviewSystem }
  ];

  async function testAuthentication(): Promise<TestResult> {
    console.log('Testing authentication...');
    try {
      const startTime = performance.now();
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) throw error;
      
      const duration = performance.now() - startTime;
      return {
        feature: 'Authentication',
        status: 'success',
        duration
      };
    } catch (error: any) {
      console.error('Authentication test failed:', error);
      await reportIssue('Authentication', error);
      return {
        feature: 'Authentication',
        status: 'error',
        error: error.message
      };
    }
  }

  async function testThesisCreation(): Promise<TestResult> {
    console.log('Testing thesis creation...');
    try {
      const startTime = performance.now();
      
      // Test thesis table access
      const { error: thesisError } = await supabase
        .from('theses')
        .select('*')
        .limit(1);

      if (thesisError) throw thesisError;

      const duration = performance.now() - startTime;
      return {
        feature: 'Thesis Creation',
        status: 'success',
        duration
      };
    } catch (error: any) {
      console.error('Thesis creation test failed:', error);
      await reportIssue('Thesis Creation', error);
      return {
        feature: 'Thesis Creation',
        status: 'error',
        error: error.message
      };
    }
  }

  async function testCitationManagement(): Promise<TestResult> {
    console.log('Testing citation management...');
    try {
      const startTime = performance.now();
      
      // Test citations table access
      const { error: citationError } = await supabase
        .from('citations')
        .select('*')
        .limit(1);

      if (citationError) throw citationError;

      const duration = performance.now() - startTime;
      return {
        feature: 'Citation Management',
        status: 'success',
        duration
      };
    } catch (error: any) {
      console.error('Citation management test failed:', error);
      await reportIssue('Citation Management', error);
      return {
        feature: 'Citation Management',
        status: 'error',
        error: error.message
      };
    }
  }

  async function testCollaboration(): Promise<TestResult> {
    console.log('Testing collaboration features...');
    try {
      const startTime = performance.now();
      
      // Test collaborators table access
      const { error: collaboratorError } = await supabase
        .from('thesis_collaborators')
        .select('*')
        .limit(1);

      if (collaboratorError) throw collaboratorError;

      const duration = performance.now() - startTime;
      return {
        feature: 'Collaboration',
        status: 'success',
        duration
      };
    } catch (error: any) {
      console.error('Collaboration test failed:', error);
      await reportIssue('Collaboration', error);
      return {
        feature: 'Collaboration',
        status: 'error',
        error: error.message
      };
    }
  }

  async function testReviewSystem(): Promise<TestResult> {
    console.log('Testing review system...');
    try {
      const startTime = performance.now();
      
      // Test reviews table access
      const { error: reviewError } = await supabase
        .from('thesis_reviews')
        .select('*')
        .limit(1);

      if (reviewError) throw reviewError;

      const duration = performance.now() - startTime;
      return {
        feature: 'Review System',
        status: 'success',
        duration
      };
    } catch (error: any) {
      console.error('Review system test failed:', error);
      await reportIssue('Review System', error);
      return {
        feature: 'Review System',
        status: 'error',
        error: error.message
      };
    }
  }

  async function reportIssue(component: string, error: any) {
    console.log('Reporting issue for component:', component, error);
    try {
      const { error: reportError } = await supabase
        .from('app_issues')
        .insert([{
          component_name: component,
          error_message: error.message,
          error_stack: error.stack,
          browser_info: navigator.userAgent,
          route_path: window.location.pathname
        }]);

      if (reportError) {
        console.error('Failed to report issue:', reportError);
      }
    } catch (err) {
      console.error('Error reporting issue:', err);
    }
  }

  const runTests = async () => {
    console.log('Starting system tests...');
    setIsRunning(true);
    setResults([]);
    setProgress(0);

    const totalTests = features.length;
    let completedTests = 0;

    for (const feature of features) {
      const result = await feature.test();
      setResults(prev => [...prev, result]);
      completedTests++;
      setProgress((completedTests / totalTests) * 100);
    }

    setIsRunning(false);
    toast({
      title: "Tests Completed",
      description: `${results.filter(r => r.status === 'success').length} of ${totalTests} tests passed`,
    });
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>System Test Dashboard</span>
          <Button
            onClick={runTests}
            disabled={isRunning}
            className="gap-2"
          >
            {isRunning ? (
              <RefreshCw className="w-4 h-4 animate-spin" />
            ) : (
              <RefreshCw className="w-4 h-4" />
            )}
            {isRunning ? 'Running Tests...' : 'Run Tests'}
          </Button>
        </CardTitle>
        {isRunning && (
          <Progress value={progress} className="w-full" />
        )}
      </CardHeader>
      <CardContent className="space-y-4">
        {results.map((result, index) => (
          <div
            key={index}
            className="flex items-center justify-between p-4 rounded-lg border bg-card"
          >
            <div className="flex items-center gap-3">
              {result.status === 'success' ? (
                <CheckCircle className="w-5 h-5 text-green-500" />
              ) : result.status === 'error' ? (
                <XCircle className="w-5 h-5 text-red-500" />
              ) : (
                <AlertTriangle className="w-5 h-5 text-yellow-500" />
              )}
              <div>
                <h3 className="font-medium">{result.feature}</h3>
                {result.error && (
                  <p className="text-sm text-destructive">{result.error}</p>
                )}
              </div>
            </div>
            <div className="flex items-center gap-2">
              {result.duration && (
                <Badge variant="secondary">
                  {result.duration.toFixed(0)}ms
                </Badge>
              )}
              <Badge
                variant={
                  result.status === 'success'
                    ? 'secondary'
                    : result.status === 'error'
                    ? 'destructive'
                    : 'default'
                }
              >
                {result.status}
              </Badge>
            </div>
          </div>
        ))}
        {!isRunning && results.length === 0 && (
          <div className="text-center text-muted-foreground py-8">
            Click "Run Tests" to start system diagnostics
          </div>
        )}
      </CardContent>
    </Card>
  );
};


// File: src/components/thesis/CollaboratorsList.tsx

import { Users } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Skeleton } from "@/components/ui/skeleton";

interface Collaborator {
  user_id: string;
  role: string;
  profiles?: {
    email: string;
    role: string;
    roles?: {
      name: string;
    };
  };
}

interface CollaboratorsListProps {
  collaborators: Collaborator[];
  thesisId: string;
  isLoading?: boolean;
}

export const CollaboratorsList = ({ 
  collaborators, 
  thesisId,
  isLoading = false 
}: CollaboratorsListProps) => {
  console.log('Rendering CollaboratorsList:', { collaboratorsCount: collaborators.length, thesisId });

  const getRoleColor = (role: string) => {
    switch (role.toLowerCase()) {
      case 'owner':
        return 'bg-primary text-primary-foreground';
      case 'editor':
        return 'bg-blue-500 text-white';
      case 'viewer':
        return 'bg-secondary text-secondary-foreground';
      case 'admin':
        return 'bg-destructive text-destructive-foreground';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };

  const getInitials = (email: string) => {
    return email.split('@')[0].substring(0, 2).toUpperCase();
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="gap-2"
        >
          <Users className="w-4 h-4" />
          Collaborators ({isLoading ? '...' : collaborators.length})
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80" align="end">
        <ScrollArea className="h-[300px] pr-4">
          <div className="space-y-4">
            <h4 className="font-medium leading-none mb-4">Thesis Collaborators</h4>
            {isLoading ? (
              <div className="space-y-3">
                {[1, 2, 3].map((i) => (
                  <div key={i} className="flex items-center gap-2">
                    <Skeleton className="h-8 w-8 rounded-full" />
                    <div className="space-y-2 flex-1">
                      <Skeleton className="h-4 w-3/4" />
                    </div>
                  </div>
                ))}
              </div>
            ) : collaborators.length === 0 ? (
              <p className="text-sm text-muted-foreground text-center py-4">
                No collaborators yet
              </p>
            ) : (
              <div className="space-y-3">
                {collaborators.map((collaborator) => (
                  <div
                    key={collaborator.user_id}
                    className="flex items-center gap-3 p-2 rounded-lg hover:bg-muted/50 transition-colors"
                  >
                    <Avatar className="h-8 w-8">
                      <AvatarImage 
                        src={`https://api.dicebear.com/7.x/initials/svg?seed=${collaborator.profiles?.email}`} 
                        alt={collaborator.profiles?.email} 
                      />
                      <AvatarFallback>
                        {collaborator.profiles?.email ? getInitials(collaborator.profiles.email) : '??'}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {collaborator.profiles?.email || 'Unknown User'}
                      </p>
                      <div className="flex gap-2 mt-1">
                        <Badge 
                          variant="secondary"
                          className={`text-xs ${getRoleColor(collaborator.role)}`}
                        >
                          {collaborator.role}
                        </Badge>
                        {collaborator.profiles?.roles?.name === 'admin' && (
                          <Badge variant="destructive" className="text-xs">
                            Site Admin
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </ScrollArea>
      </PopoverContent>
    </Popover>
  );
};

// File: src/components/thesis/ThesisContent.tsx

import React from 'react';
import { Chapter, Section } from '@/types/thesis';
import { ChapterManager } from '../ChapterManager';
import { Input } from '@/components/ui/input';
import { MarkdownEditor } from '../MarkdownEditor';
import { ChatMessages } from '../collaboration/ChatMessages';

interface ThesisContentProps {
  frontMatter: Section[];
  chapters: Chapter[];
  backMatter: Section[];
  activeSection: string;
  onContentChange: (id: string, content: string) => void;
  onTitleChange: (id: string, title: string) => void;
  onUpdateChapter: (chapter: Chapter) => void;
  onAddChapter: (chapter: Chapter) => void;
  thesisId: string;
}

export const ThesisContent = ({
  frontMatter,
  chapters,
  backMatter,
  activeSection,
  onContentChange,
  onTitleChange,
  onUpdateChapter,
  onAddChapter,
  thesisId
}: ThesisContentProps) => {
  const renderSectionContent = (section: Section) => {
    const isActive = activeSection === section.id;
    if (!isActive) return null;

    return (
      <div key={section.id} className="editor-section space-y-6">
        <div className="flex items-center gap-3 mb-4">
          <Input
            value={section.title}
            onChange={(e) => onTitleChange(section.id, e.target.value)}
            className="text-xl font-serif border-none bg-transparent px-0 focus-visible:ring-0"
            placeholder="Section Title"
          />
        </div>
        <div className="mb-6">
          <MarkdownEditor
            value={section.content}
            onChange={(value) => onContentChange(section.id, value || '')}
            placeholder="Start writing..."
          />
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {frontMatter.map(section => renderSectionContent(section))}
          
          <ChapterManager
            chapters={chapters}
            onUpdateChapter={onUpdateChapter}
            onAddChapter={onAddChapter}
          />
          
          {backMatter.map(section => renderSectionContent(section))}
        </div>
        
        <div className="lg:col-span-1">
          <ChatMessages thesisId={thesisId} />
        </div>
      </div>
    </div>
  );
};

// File: src/components/thesis/ThesisCreationForm.tsx

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from 'react-router-dom';
import { useForm } from '@/hooks/useForm';
import { useThesisCreation } from '@/components/thesis/form/useThesisCreation';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { BasicThesisFields } from './form/BasicThesisFields';
import { InstitutionFields } from './form/InstitutionFields';
import { AuthorFields } from './form/AuthorFields';
import { CommitteeFields } from './form/CommitteeFields';
import { ArrowLeft } from 'lucide-react';

export const ThesisCreationForm = () => {
  const {
    values,
    errors,
    isSubmitting,
    handleChange,
    handleSubmit,
    handleArrayChange
  } = useForm({
    initialValues: {
      title: '',
      description: '',
      keywords: '',
      supervisorEmail: '',
      universityName: '',
      departmentName: '',
      authorName: '',
      thesisDate: '',
      committeeMembers: ['', '', ''],
    },
    validate: (values) => {
      const err: any = {};
      if (!values.title) {
        err.title = "Title is required";
      }
      if (!values.description) {
        err.description = "Description is required";
      }
      if (!values.keywords) {
        err.keywords = "Keywords are required";
      }
      if (!values.supervisorEmail) {
        err.supervisorEmail = "Supervisor email is required";
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.supervisorEmail)) {
        err.supervisorEmail = "Invalid email address";
      }
      return err;
    },
    onSubmit: async (values) => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user?.id) {
        setError('You must be logged in to create a thesis');
        return;
      }

      // First, look up the supervisor's profile
      const { data: supervisorProfile, error: supervisorError } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('email', values.supervisorEmail.toLowerCase())
        .maybeSingle();

      if (supervisorError) {
        console.error('Error looking up supervisor:', supervisorError);
        setError('Failed to find supervisor profile');
        return;
      }

      if (!supervisorProfile) {
        setError('Supervisor not found. Please ensure the email is correct.');
        return;
      }

      // Create the thesis with supervisor_id
      const metadata = {
        ...values,
        keywords: values.keywords
      };

      const result = await createThesis(metadata, session.user.id, supervisorProfile.id);

      if (result?.thesisId) {
        // Create a notification for the supervisor
        const { error: notificationError } = await supabase
          .from('notifications')
          .insert({
            user_id: supervisorProfile.id,
            thesis_id: result.thesisId,
            type: 'supervisor_request',
            message: `You have been assigned as supervisor for thesis "${values.title}"`
          });

        if (notificationError) {
          console.error('Error creating notification:', notificationError);
          toast({
            title: "Warning",
            description: "Thesis created but failed to notify supervisor",
            variant: "destructive",
          });
        }

        // Navigate to the thesis page
        navigate(`/thesis/${result.thesisId}`);
      }
    },
  });

  const [error, setError] = useState<string | null>(null);
  const { createThesis } = useThesisCreation();
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      if (authError || !session) {
        console.error('Authentication error:', authError);
        toast({
          title: "Authentication Required",
          description: "Please sign in to create a thesis.",
          variant: "destructive",
        });
        navigate('/auth');
      }
    };

    checkAuth();
  }, [navigate, toast]);

  const handleCancel = () => {
    navigate(-1);
  };

  const handleCommitteeMemberChange = (index: number, value: string) => {
    handleArrayChange('committeeMembers', index, value);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 max-w-2xl mx-auto p-6 relative">
      <Button
        variant="ghost"
        size="icon"
        className="absolute -top-2 -left-2"
        onClick={() => navigate(-1)}
      >
        <ArrowLeft className="h-6 w-6" />
      </Button>

      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Create New Thesis</CardTitle>
        </CardHeader>
        <CardContent>
          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="space-y-6">
            <BasicThesisFields values={values} handleChange={handleChange} />
            <InstitutionFields values={values} handleChange={handleChange} />
            <AuthorFields values={values} handleChange={handleChange} />
            <CommitteeFields
              committeeMembers={values.committeeMembers}
              handleCommitteeMemberChange={handleCommitteeMemberChange}
            />
            
            <div className="flex gap-4">
              <Button 
                type="submit" 
                disabled={isSubmitting} 
                className="flex-1"
              >
                {isSubmitting ? 'Creating...' : 'Create Thesis'}
              </Button>
              <Button 
                type="button" 
                variant="destructive" 
                onClick={handleCancel}
                className="flex-1"
              >
                Cancel
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </form>
  );
};

// File: src/components/thesis/ThesisCreationModal.tsx

import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ThesisTemplateSelector } from './ThesisTemplateSelector';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { PlusCircle } from 'lucide-react';

interface ThesisCreationModalProps {
  onThesisCreated?: () => void;
}

export const ThesisCreationModal: React.FC<ThesisCreationModalProps> = ({ onThesisCreated }) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [open, setOpen] = React.useState(false);

  const handleTemplateSelect = async (template: any) => {
    try {
      console.log('Creating new thesis from template:', template);
      
      const { data: session } = await supabase.auth.getSession();
      if (!session?.session?.user) {
        throw new Error('User not authenticated');
      }

      const { data: thesis, error } = await supabase
        .from('theses')
        .insert({
          title: 'Untitled Thesis',
          content: template.structure,
          user_id: session.session.user.id,
        })
        .select()
        .single();

      if (error) throw error;

      if (!thesis) throw new Error('Failed to create thesis');

      // Add the user as an owner collaborator
      const { error: collabError } = await supabase
        .from('thesis_collaborators')
        .insert({
          thesis_id: thesis.id,
          user_id: session.session.user.id,
          role: 'owner'
        });

      if (collabError) throw collabError;

      console.log('Thesis created successfully:', thesis);
      
      toast({
        title: "Success",
        description: "New thesis created from template",
      });

      setOpen(false);
      if (onThesisCreated) {
        onThesisCreated();
      }
      navigate(`/thesis/${thesis.id}`);
    } catch (error: any) {
      console.error('Error creating thesis:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create thesis",
        variant: "destructive",
      });
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button className="gap-2">
          <PlusCircle className="w-4 h-4" />
          New Thesis
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Choose a Template</DialogTitle>
        </DialogHeader>
        <ThesisTemplateSelector onSelect={handleTemplateSelect} />
      </DialogContent>
    </Dialog>
  );
};

// File: src/components/thesis/ThesisHeader.tsx

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { CollaboratorsList } from './CollaboratorsList';
import { UserSection } from './header/UserSection';
import { HeaderActions } from './header/HeaderActions';
import { Collaborator } from '@/types/collaborator';

interface ThesisHeaderProps {
  showPreview: boolean;
  onTogglePreview: () => void;
  thesisId: string;
  thesisTitle: string;
  isAdmin?: boolean;
  thesisData: any;
}

export const ThesisHeader = ({ 
  showPreview, 
  onTogglePreview,
  thesisId,
  thesisTitle,
  isAdmin = false,
  thesisData
}: ThesisHeaderProps) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [userEmail, setUserEmail] = useState<string>('');
  const [userRole, setUserRole] = useState<string>('');
  const [collaborators, setCollaborators] = useState<Collaborator[]>([]);
  const [currentUserRole, setCurrentUserRole] = useState<string | null>(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          navigate('/auth');
          return;
        }

        const { data: profile, error } = await supabase
          .from('profiles')
          .select(`
            email,
            roles (
              name
            )
          `)
          .eq('id', session.user.id)
          .single();

        if (error) {
          console.error('Error fetching profile:', error);
          return;
        }

        if (profile) {
          setUserEmail(profile.email);
          setUserRole(profile.roles?.name || '');
        }

        const { data: collaboratorData } = await supabase
          .from('thesis_collaborators')
          .select('role')
          .eq('thesis_id', thesisId)
          .eq('user_id', session.user.id)
          .single();

        setCurrentUserRole(collaboratorData?.role || null);
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, [thesisId, navigate]);

  useEffect(() => {
    const fetchCollaborators = async () => {
      try {
        const { data, error } = await supabase
          .from('thesis_collaborators')
          .select(`
            user_id,
            role,
            profiles (
              email,
              roles (
                name
              )
            )
          `)
          .eq('thesis_id', thesisId);

        if (error) {
          console.error('Error fetching collaborators:', error);
          return;
        }

        if (data) {
          setCollaborators(data as Collaborator[]);
        }
      } catch (error) {
        console.error('Error fetching collaborators:', error);
      }
    };

    if (thesisId) {
      fetchCollaborators();
    }
  }, [thesisId]);

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        toast({
          title: "Error signing out",
          description: error.message,
          variant: "destructive",
        });
        return;
      }
      navigate('/auth');
    } catch (error: any) {
      console.error('Error during logout:', error);
      toast({
        title: "Error signing out",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
      navigate('/auth');
    }
  };

  const handleSaveToJson = () => {
    try {
      const jsonData = JSON.stringify(thesisData, null, 2);
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `thesis_${thesisId}_${new Date().toISOString()}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast({
        title: "Success",
        description: "Thesis saved as JSON file.",
      });
    } catch (error) {
      console.error('Error saving thesis to JSON:', error);
      toast({
        title: "Error",
        description: "Failed to save thesis as JSON file.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex justify-between items-center">
      <h1 className="text-2xl font-serif">Thesis Editor</h1>
      <div className="flex items-center gap-4">
        {userEmail && <UserSection userEmail={userEmail} userRole={userRole} />}
        <CollaboratorsList collaborators={collaborators} thesisId={thesisId} />
        <HeaderActions
          showPreview={showPreview}
          onTogglePreview={onTogglePreview}
          onSaveToJson={handleSaveToJson}
        />
      </div>
    </div>
  );
};


// File: src/components/thesis/ThesisList.tsx

import { useCallback, useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from "@/components/ui/scroll-area";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { ArrowDown, ArrowUp, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { useThesesList } from '@/hooks/useThesesList';
import { ThesisListItem } from './ThesisListItem';
import { supabase } from '@/integrations/supabase/client';

export const ThesisList = () => {
  const [open, setOpen] = useState(false);
  const [loadingThesis, setLoadingThesis] = useState<string | null>(null);
  const { thesisList, isLoading, error, fetchTheses } = useThesesList();
  const { toast } = useToast();
  const navigate = useNavigate();

  const handleLoadThesis = async (thesisId: string) => {
    try {
      console.log('üìù Loading thesis:', thesisId);
      setLoadingThesis(thesisId);
      
      const { data: session } = await supabase.auth.getSession();
      if (!session?.session?.user) {
        console.error('‚ùå No authenticated user found');
        toast({
          title: "Authentication Error",
          description: "Please sign in to view this thesis",
          variant: "destructive",
        });
        return;
      }

      const { data: collaborator, error: collaboratorError } = await supabase
        .from('thesis_collaborators')
        .select('role')
        .eq('thesis_id', thesisId)
        .eq('user_id', session.session.user.id)
        .maybeSingle();

      if (collaboratorError) {
        console.error('‚ùå Error checking thesis access:', collaboratorError);
        toast({
          title: "Access Error",
          description: "You don't have permission to view this thesis",
          variant: "destructive",
        });
        return;
      }

      navigate(`/thesis/${thesisId}`);
      setOpen(false);
      toast({
        title: "Loading thesis",
        description: "Please wait while we load your thesis...",
      });
    } catch (error: any) {
      console.error('‚ùå Error loading thesis:', error);
      toast({
        title: "Error",
        description: "Failed to load thesis. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoadingThesis(null);
    }
  };

  // Only fetch theses when the popover is opened
  const handleToggleOpen = useCallback(() => {
    setOpen((prevOpen) => !prevOpen);
  }, []);

  // Only fetch theses once when the popover is opened
  useEffect(() => {
    if (open) {
      console.log('üîÑ Fetching theses list...');
      fetchTheses();
    }
  }, [open]);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          onClick={handleToggleOpen}
          className="gap-2 bg-transparent border-gray-700 text-white hover:bg-white/5 font-sans"
          disabled={isLoading}
        >
          {isLoading ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : open ? (
            <ArrowUp className="w-4 h-4" />
          ) : (
            <ArrowDown className="w-4 h-4" />
          )}
          Load Thesis
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 bg-[#1A1F2C] border-gray-700">
        <ScrollArea className="h-[200px] pr-4">
          {error ? (
            <div className="text-center py-4">
              <p className="text-red-400 text-sm">{error}</p>
              <Button
                variant="ghost"
                onClick={fetchTheses}
                className="mt-2 text-gray-300 hover:text-white"
              >
                Try Again
              </Button>
            </div>
          ) : (
            <div className="space-y-2">
              {thesisList.map((thesis) => (
                <ThesisListItem
                  key={thesis.id}
                  id={thesis.id}
                  title={thesis.title}
                  isLoading={loadingThesis === thesis.id}
                  onSelect={handleLoadThesis}
                />
              ))}
              {thesisList.length === 0 && !isLoading && (
                <p className="text-center text-sm text-gray-400 py-4 font-sans">
                  No theses found
                </p>
              )}
              {isLoading && (
                <div className="flex justify-center py-4">
                  <Loader2 className="w-6 h-6 animate-spin text-[#9b87f5]" />
                </div>
              )}
            </div>
          )}
        </ScrollArea>
      </PopoverContent>
    </Popover>
  );
};

// File: src/components/thesis/ThesisListItem.tsx

import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';

interface ThesisListItemProps {
  id: string;
  title: string;
  isLoading: boolean;
  onSelect: (id: string) => void;
}

export const ThesisListItem = ({ id, title, isLoading, onSelect }: ThesisListItemProps) => {
  return (
    <Button
      variant="ghost"
      className="w-full text-left text-gray-300 hover:bg-white/5 hover:text-white font-sans"
      onClick={() => onSelect(id)}
      disabled={isLoading}
    >
      {title}
      {isLoading && <Loader2 className="w-4 h-4 ml-2 animate-spin" />}
    </Button>
  );
};

// File: src/components/thesis/ThesisSaveButton.tsx

// File: src/components/thesis/ThesisSaveButton.tsx
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Thesis } from "@/types/thesis";
import { Save } from "lucide-react";
import { useState } from "react";
import { Json } from '@/integrations/supabase/types';


interface ThesisSaveButtonProps {
  thesisId: string;
  thesisData: Thesis;
}

export const ThesisSaveButton = ({ thesisId, thesisData }: ThesisSaveButtonProps) => {
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();

  const handleSave = async () => {
    try {
      setIsSaving(true);
      console.log('Starting thesis save operation:', { thesisId, content: thesisData });
      
      // First check if thesis exists
      const { data: existingThesis, error: checkError } = await supabase
        .from('theses')
        .select('*')
        .eq('id', thesisId)
        .maybeSingle();

      if (checkError) {
        console.error('Error checking thesis:', checkError);
        throw checkError;
      }

      if (!existingThesis) {
        console.error('Thesis not found:', thesisId);
        throw new Error('Thesis not found. Please refresh the page and try again.');
      }

      // Convert Thesis object to a JSON-compatible format
      const thesisContent = JSON.parse(JSON.stringify({
        metadata: thesisData.metadata,
        frontMatter: thesisData.frontMatter,
        chapters: thesisData.chapters,
        backMatter: thesisData.backMatter
      })) as unknown as Json;

      const { data, error } = await supabase
        .from('theses')
        .update({ 
          content: thesisContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', thesisId)
        .select()
        .maybeSingle();

      if (error) {
        console.error('Error saving thesis:', error);
        throw error;
      }

      if (!data) {
        throw new Error('Failed to save thesis. Please try again.');
      }

      console.log('Thesis saved successfully:', data);

      toast({
        title: "Success",
        description: "Your thesis has been saved.",
      });
    } catch (error: any) {
      console.error('Error in save operation:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to save thesis. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Button 
      onClick={handleSave} 
      disabled={isSaving}
      className="gap-2"
    >
      <Save className="h-4 w-4" />
      {isSaving ? 'Saving...' : 'Save'}
    </Button>
  );
};

// File: src/components/thesis/ThesisTemplateSelector.tsx

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { motion } from 'framer-motion';

interface ThesisTemplate {
  id: string;
  name: string;
  description: string;
  structure: any;
  language: string;
}

interface ThesisTemplateSelectorProps {
  onSelect: (template: ThesisTemplate) => void;
}

export const ThesisTemplateSelector: React.FC<ThesisTemplateSelectorProps> = ({ onSelect }) => {
  const { toast } = useToast();
  
  const { data: templates, isLoading, error } = useQuery({
    queryKey: ['thesis-templates'],
    queryFn: async () => {
      console.log('Fetching thesis templates');
      const { data, error } = await supabase
        .from('thesis_templates')
        .select('*')
        .order('created_at', { ascending: true });

      if (error) {
        console.error('Error fetching templates:', error);
        throw error;
      }

      console.log('Fetched templates:', data);
      return data as ThesisTemplate[];
    }
  });

  if (error) {
    toast({
      title: "Error",
      description: "Failed to load thesis templates",
      variant: "destructive",
    });
  }

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {[1, 2].map((i) => (
          <Skeleton key={i} className="h-[200px] w-full" />
        ))}
      </div>
    );
  }

  return (
    <ScrollArea className="h-[400px]">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
        {templates?.map((template, index) => (
          <motion.div
            key={template.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card className="p-6 space-y-4 hover:shadow-lg transition-shadow cursor-pointer">
              <h3 className="text-lg font-medium">{template.name}</h3>
              <p className="text-sm text-muted-foreground">{template.description}</p>
              <Button 
                onClick={() => onSelect(template)}
                className="w-full"
              >
                Use This Template
              </Button>
            </Card>
          </motion.div>
        ))}
      </div>
    </ScrollArea>
  );
};

// File: src/components/thesis/ThesisToolbar.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Download, Eye, EyeOff, LogOut } from 'lucide-react';
import { ThesisSaveButton } from './ThesisSaveButton';
import { Thesis } from '@/types/thesis';
import { generateThesisDocx } from '@/utils/docxExport';
import { Packer } from 'docx';
import { useToast } from '@/hooks/use-toast';
import { UserInfo } from './UserInfo';
import { CollaboratorSection } from './toolbar/CollaboratorSection';
import { useUser } from '@/hooks/useUser';
import { useCollaboratorPermissions } from '@/hooks/useCollaboratorPermissions';
import { CollaboratorWithProfile } from '@/types/collaborator';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface ThesisToolbarProps {
  thesisId: string;
  thesisData: Thesis;
  showPreview: boolean;
  onTogglePreview: () => void;
}

export const ThesisToolbar = ({
  thesisId,
  thesisData,
  showPreview,
  onTogglePreview,
}: ThesisToolbarProps) => {
  const { toast } = useToast();
  const { userEmail, userRole, handleLogout } = useUser();
  const {
    collaborators,
    canManageCollaborators,
    currentUserRole,
    userProfile,
    loading,
    error,
  } = useCollaboratorPermissions(thesisId);

  const handleExport = async (type: 'academic') => {
    try {
      console.log(`Starting ${type} DOCX export with thesis data:`, thesisData);
      const doc = await generateThesisDocx(thesisData);
      console.log('Document generated, converting to blob...');
      
      const blob = await Packer.toBlob(doc);
      console.log('Blob created, creating download link...');
      
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${thesisData.frontMatter[0]?.title || 'thesis'}_${type}.docx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      toast({
        title: "Success",
        description: "Your thesis has been exported as a DOCX file.",
      });
    } catch (error: any) {
      console.error('Error exporting DOCX:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to export thesis as DOCX. Please try again.",
        variant: "destructive",
      });
    }
  };

  const canManageCollaboratorsProp = currentUserRole === 'owner' || currentUserRole === 'admin' || userProfile?.roles?.name === 'admin';

  return (
    <div className="flex items-center justify-between">
      <div className="flex items-center gap-2">
        <ThesisSaveButton thesisId={thesisId} thesisData={thesisData} />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="gap-2">
              <Download className="h-4 w-4" />
              Export
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem onClick={() => handleExport('academic')}>
              Academic Format
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        {userEmail && <UserInfo email={userEmail} role={userRole} />}
        <CollaboratorSection
          collaborators={collaborators as CollaboratorWithProfile[]}
          thesisId={thesisId}
          thesisTitle={thesisData.frontMatter[0]?.title || 'Untitled Thesis'}
          canManageCollaborators={canManageCollaboratorsProp}
          isAdmin={userProfile?.roles?.name === 'admin'}
        />
      </div>
      <div className="flex items-center gap-2">
        <Button onClick={onTogglePreview} variant="outline" className="gap-2">
          {showPreview ? (
            <>
              <EyeOff className="h-4 w-4" />
              Hide Preview
            </>
          ) : (
            <>
              <Eye className="h-4 w-4" />
              Show Preview
            </>
          )}
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={handleLogout}
          className="gap-2"
        >
          <LogOut className="h-4 w-4" />
          Logout
        </Button>
      </div>
    </div>
  );
};

// File: src/components/thesis/UserInfo.tsx

// File: src/components/thesis/UserInfo.tsx
import { User } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface UserInfoProps {
  email: string;
  role: string;
}

export const UserInfo = ({ email, role }: UserInfoProps) => {
  return (
    <div className="flex items-center gap-2">
      <User className="w-4 h-4" />
      <span className="text-sm">{email}</span>
      <Badge variant="secondary" className="text-xs">
        {role}
      </Badge>
    </div>
  );
};

// File: src/components/thesis/editor/ThesisEditorContent.tsx

import React from 'react';
import { ThesisContent } from '../ThesisContent';
import { Chapter, Section } from '@/types/thesis';
import { useParams } from 'react-router-dom';

interface ThesisEditorContentProps {
  frontMatter: Section[];
  chapters: Chapter[];
  backMatter: Section[];
  activeSection: string;
  onContentChange: (id: string, content: string) => void;
  onTitleChange: (id: string, title: string) => void;
  onUpdateChapter: (chapter: Chapter) => void;
  onAddChapter: (chapter: Chapter) => void;
}

export const ThesisEditorContent: React.FC<ThesisEditorContentProps> = ({
  frontMatter,
  chapters,
  backMatter,
  activeSection,
  onContentChange,
  onTitleChange,
  onUpdateChapter,
  onAddChapter
}) => {
  const { thesisId } = useParams<{ thesisId: string }>();

  console.log('ThesisEditorContent rendering with thesisId:', thesisId);

  if (!thesisId) {
    console.error('No thesis ID found in URL params');
    return null;
  }

  return (
    <ThesisContent
      frontMatter={frontMatter}
      chapters={chapters}
      backMatter={backMatter}
      activeSection={activeSection}
      onContentChange={onContentChange}
      onTitleChange={onTitleChange}
      onUpdateChapter={onUpdateChapter}
      onAddChapter={onAddChapter}
      thesisId={thesisId}
    />
  );
};

// File: src/components/thesis/editor/ThesisEditorHeader.tsx

import React from 'react';
import { ThesisToolbar } from '../ThesisToolbar';
import { Thesis } from '@/types/thesis';

interface ThesisEditorHeaderProps {
  thesis: Thesis;
  showPreview: boolean;
  onTogglePreview: () => void;
}

export const ThesisEditorHeader: React.FC<ThesisEditorHeaderProps> = ({
  thesis,
  showPreview,
  onTogglePreview
}) => {
  console.log('üéØ Rendering ThesisEditorHeader with thesis:', thesis?.id);
  
  return (
    <div className="flex justify-between items-center">
      <ThesisToolbar
        thesisId={thesis?.id || ''}
        thesisData={thesis}
        showPreview={showPreview}
        onTogglePreview={onTogglePreview}
      />
    </div>
  );
};

// File: src/components/thesis/editor/ThesisEditorMain.tsx

import React, { useState, useRef } from 'react';
import { ThesisEditorContent } from './ThesisEditorContent';
import { ThesisEditorPreview } from './ThesisEditorPreview';
import { Chapter, Thesis } from '@/types/thesis';
import { useThesisRealtime } from '@/hooks/useThesisRealtime';
import { useToast } from '@/hooks/use-toast';

interface ThesisEditorMainProps {
  thesis: Thesis | null;
  activeSection: string;
  showPreview: boolean;
  previewRef: React.RefObject<HTMLDivElement>;
  onContentChange: (id: string, content: string) => void;
  onTitleChange: (id: string, title: string) => void;
  onUpdateChapter: (chapter: Chapter) => void;
  onAddChapter: (chapter: Chapter) => void;
}

export const ThesisEditorMain: React.FC<ThesisEditorMainProps> = ({
  thesis,
  activeSection,
  showPreview,
  previewRef,
  onContentChange,
  onTitleChange,
  onUpdateChapter,
  onAddChapter
}) => {
     const { toast } = useToast();
      const [localThesis, setLocalThesis] = useState(thesis);

    useThesisRealtime(thesis?.id, localThesis, setLocalThesis);


    const handleUpdateSectionData = (updatedSection: any) => {
        if (!localThesis) return;
      const updateThesis = () => {
             setLocalThesis((prev) => {
             if(!prev) return null;

             const frontMatter = prev.frontMatter.map((s) => (s.id === updatedSection.id ? updatedSection : s));
             const chapters = prev.chapters.map((chapter) => {
                 return {
                     ...chapter,
                    sections: chapter.sections.map(s => s.id === updatedSection.id ? updatedSection : s)
                 }
             });
               const backMatter = prev.backMatter.map((s) => (s.id === updatedSection.id ? updatedSection : s));

            return {
                ...prev,
                frontMatter,
                chapters,
                backMatter,
             };
         });
        }

      updateThesis()
  };


   const handleContentChange = (id: string, content: string) => {
       if (!localThesis) return;
        setLocalThesis((prev) => {
             if(!prev) return null;
        
            const frontMatter = prev.frontMatter.map(section =>
             section.id === id ? { ...section, content } : section
           );
           const chapters = prev.chapters.map(chapter => ({
                ...chapter,
                 sections: chapter.sections.map(section =>
              section.id === id ? { ...section, content } : section
                )
            }));
           const backMatter = prev.backMatter.map(section =>
              section.id === id ? { ...section, content } : section
            );
            
            return {
                ...prev,
                frontMatter,
                chapters,
                backMatter
            };
           
      });
      onContentChange(id, content);
    };

     const handleTitleChange = (id: string, title: string) => {
         if (!localThesis) return;
        setLocalThesis((prev) => {
             if(!prev) return null;
        
           const frontMatter = prev.frontMatter.map(section =>
                section.id === id ? { ...section, title } : section
              );
          const chapters = prev.chapters.map(chapter => ({
            ...chapter,
            sections: chapter.sections.map(section =>
                section.id === id ? { ...section, title } : section
             )
           }));
            const backMatter = prev.backMatter.map(section =>
            section.id === id ? { ...section, title } : section
              );
            
                return {
                ...prev,
                frontMatter,
                chapters,
                backMatter
               };
             
        });
      onTitleChange(id, title);
    };

    const handleAddSectionTask = (sectionId: string) => {
       if (!localThesis) return;
        setLocalThesis((prev) => {
           if(!prev) return null;
           const frontMatter = prev.frontMatter.map((s) => {
               if(s.id === sectionId){
                    return {
                      ...s,
                         tasks: [...(s.tasks || []),{ id: Date.now().toString(), description: 'New Task', status: 'pending' }]
                    }
               }
              return s;
           })
            const chapters = prev.chapters.map(chapter => ({
                ...chapter,
               sections: chapter.sections.map(s => {
                   if (s.id === sectionId) {
                        return {
                         ...s,
                       tasks: [...(s.tasks || []),{ id: Date.now().toString(), description: 'New Task', status: 'pending' }]
                        }
                    }
                   return s;
                })
           }))

            const backMatter = prev.backMatter.map(s => {
               if(s.id === sectionId){
                     return {
                         ...s,
                       tasks: [...(s.tasks || []),{ id: Date.now().toString(), description: 'New Task', status: 'pending' }]
                   }
               }
                return s;
           })
            
             return {
              ...prev,
              frontMatter,
              chapters,
              backMatter
            };

           });
    }

    const handleUpdateSectionTask = (sectionId: string, taskId: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => {
        if(!localThesis) return
       setLocalThesis((prev) => {
           if(!prev) return null;

            const frontMatter = prev.frontMatter.map((s) => {
              if(s.id === sectionId){
                 const updatedTasks = s.tasks.map((task) =>
                    task.id === taskId ? { ...task, status: status } : task
                   )
                    return { ...s, tasks: updatedTasks};
               }
               return s
            });
            const chapters = prev.chapters.map(chapter => ({
                 ...chapter,
                 sections: chapter.sections.map(s => {
                      if(s.id === sectionId){
                            const updatedTasks = s.tasks.map((task) =>
                                task.id === taskId ? { ...task, status } : task
                              )
                            return { ...s, tasks: updatedTasks}
                       }
                        return s
                  })
             }))
               const backMatter = prev.backMatter.map((s) => {
                 if(s.id === sectionId){
                     const updatedTasks = s.tasks.map((task) =>
                       task.id === taskId ? { ...task, status } : task
                     )
                      return { ...s, tasks: updatedTasks};
                 }
                 return s
             });

               return {
                ...prev,
                frontMatter,
                 chapters,
                backMatter
             };
       })
  };

      const handleSectionTaskDescriptionChange = (sectionId: string, taskId: string, newDescription: string) => {
         if(!localThesis) return;

       setLocalThesis((prev) => {
              if(!prev) return null;

            const frontMatter = prev.frontMatter.map((s) => {
              if(s.id === sectionId){
                     const updatedTasks = s.tasks.map((task) =>
                     task.id === taskId ? { ...task, description: newDescription } : task
                     )
                     return { ...s, tasks: updatedTasks };
                }
               return s;
           })
            const chapters = prev.chapters.map(chapter => ({
                 ...chapter,
                 sections: chapter.sections.map(s => {
                        if(s.id === sectionId){
                            const updatedTasks = s.tasks.map((task) =>
                                task.id === taskId ? { ...task, description: newDescription } : task
                            )
                           return { ...s, tasks: updatedTasks}
                        }
                       return s;
                   })
               }))
            const backMatter = prev.backMatter.map(s => {
               if(s.id === sectionId){
                     const updatedTasks = s.tasks.map((task) =>
                         task.id === taskId ? { ...task, description: newDescription } : task
                   )
                     return { ...s, tasks: updatedTasks };
                }
               return s;
            })
            
               return {
                ...prev,
                frontMatter,
                 chapters,
                backMatter
               };
       })
  };
  
  return (
    <main className="flex-1 p-8 flex">
      <div className={`transition-all duration-300 ${showPreview ? 'w-1/2' : 'w-full'}`}>
        <div className="max-w-4xl mx-auto space-y-6">
          <ThesisEditorContent
              frontMatter={localThesis?.frontMatter || []}
            chapters={localThesis?.chapters || []}
            backMatter={localThesis?.backMatter || []}
            activeSection={activeSection}
            onContentChange={handleContentChange}
            onTitleChange={handleTitleChange}
            onUpdateChapter={onUpdateChapter}
            onAddChapter={onAddChapter}
            onUpdateSectionData={handleUpdateSectionData}
            onAddSectionTask={handleAddSectionTask}
            onUpdateSectionTask={handleUpdateSectionTask}
            onChangeSectionTaskDescription={handleSectionTaskDescriptionChange}
          />
        </div>
      </div>
        {showPreview && localThesis && (
        <div className="w-1/2 pl-8 border-l">
          <ThesisEditorPreview thesis={localThesis} previewRef={previewRef} />
        </div>
      )}
    </main>
  );
};

// File: src/components/thesis/editor/ThesisEditorPreview.tsx

import React from 'react';
import { ThesisPreview } from '../../ThesisPreview';
import { Thesis } from '@/types/thesis';

interface ThesisEditorPreviewProps {
  thesis: Thesis;
  previewRef: React.RefObject<HTMLDivElement>;
}

export const ThesisEditorPreview: React.FC<ThesisEditorPreviewProps> = ({
  thesis,
  previewRef
}) => {
  return (
    <div ref={previewRef}>
      <ThesisPreview thesis={thesis} />
    </div>
  );
};

// File: src/components/thesis/editor/ThesisEditorStatus.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { Users, ChevronDown, ChevronUp, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { ThesisTracker } from '../tracker/ThesisTracker';
import { ThesisPlanning } from '../planning/ThesisPlanning';
import { CollaboratorPresence } from '@/components/collaboration/CollaboratorPresence';
import { Thesis } from '@/types/thesis';

interface ThesisEditorStatusProps {
  thesis: Thesis;
  thesisId: string;
  progress: number;
  showTracker: boolean;
  setShowTracker: (show: boolean) => void;
}

export const ThesisEditorStatus: React.FC<ThesisEditorStatusProps> = ({
  thesis,
  thesisId,
  progress,
  showTracker,
  setShowTracker
}) => {
  return (
    <div className="space-y-6">
      <Collapsible open={showTracker} onOpenChange={setShowTracker}>
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2">
            <RefreshCw className="w-4 h-4 animate-spin text-primary" />
            <span className="text-sm text-muted-foreground">Auto-updating</span>
            <span className="text-sm font-medium">{progress}% Complete</span>
          </div>
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="sm">
              {showTracker ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )}
            </Button>
          </CollapsibleTrigger>
        </div>
        <CollapsibleContent className="space-y-4">
          <ThesisTracker thesis={thesis} />
          <ThesisPlanning thesis={thesis} />
        </CollapsibleContent>
      </Collapsible>
      
      <Card className="p-4 mb-4 bg-white/50 backdrop-blur-sm border border-primary/10">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Users className="w-4 h-4" />
          <span className="font-medium">Active Collaborators</span>
        </div>
        <CollaboratorPresence thesisId={thesisId} />
      </Card>
    </div>
  );
};

// File: src/components/thesis/form/AuthorFields.tsx

import React from 'react';
import { Input } from "@/components/ui/input";

interface AuthorFieldsProps {
  values: {
    authorName: string;
    thesisDate: string;
  };
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export const AuthorFields = ({ values, handleChange }: AuthorFieldsProps) => {
  return (
    <>
      <div>
        <label htmlFor="authorName" className="block text-sm font-medium mb-1">
          Author Name
        </label>
        <Input
          id="authorName"
          name="authorName"
          value={values.authorName}
          onChange={handleChange}
          placeholder="Enter author name"
          required
        />
      </div>

      <div>
        <label htmlFor="thesisDate" className="block text-sm font-medium mb-1">
          Thesis Date
        </label>
        <Input
          id="thesisDate"
          name="thesisDate"
          value={values.thesisDate}
          onChange={handleChange}
          placeholder="Enter date of thesis submission"
          required
        />
      </div>
    </>
  );
};

// File: src/components/thesis/form/BasicThesisFields.tsx

import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface BasicThesisFieldsProps {
  values: {
    title: string;
    description: string;
    keywords: string;
    supervisorEmail?: string;
  };
  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
}

export const BasicThesisFields = ({
  values,
  handleChange,
}: BasicThesisFieldsProps) => {
  return (
    <div className="space-y-4">
      <div>
        <Label htmlFor="title">Title</Label>
        <Input
          id="title"
          name="title"
          value={values.title}
          onChange={handleChange}
          placeholder="Enter thesis title"
          required
        />
      </div>

      <div>
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          value={values.description}
          onChange={handleChange}
          placeholder="Brief description of your thesis"
          required
        />
      </div>

      <div>
        <Label htmlFor="keywords">Keywords</Label>
        <Input
          id="keywords"
          name="keywords"
          value={values.keywords}
          onChange={handleChange}
          placeholder="Enter keywords separated by commas"
          required
        />
        <p className="text-sm text-muted-foreground mt-1">
          Separate keywords with commas (e.g., AI, Machine Learning, Data Science)
        </p>
      </div>

      <div>
        <Label htmlFor="supervisorEmail">Supervisor Email</Label>
        <Input
          id="supervisorEmail"
          name="supervisorEmail"
          type="email"
          value={values.supervisorEmail || ''}
          onChange={handleChange}
          placeholder="Enter your supervisor's email"
          required
        />
      </div>
    </div>
  );
};

// File: src/components/thesis/form/CommitteeFields.tsx

import React from 'react';
import { Input } from "@/components/ui/input";

interface CommitteeFieldsProps {
  committeeMembers: string[];
  handleCommitteeMemberChange: (index: number, value: string) => void;
}

export const CommitteeFields = ({ committeeMembers, handleCommitteeMemberChange }: CommitteeFieldsProps) => {
  return (
    <div>
      <label className="block text-sm font-medium mb-1">
        Committee Members
      </label>
      {committeeMembers.map((member, index) => (
        <Input
          key={index}
          name={`committeeMembers[${index}]`}
          value={member}
          onChange={(e) => handleCommitteeMemberChange(index, e.target.value)}
          placeholder={`Committee Member ${index + 1}`}
          className="mb-2"
        />
      ))}
    </div>
  );
};

// File: src/components/thesis/form/InstitutionFields.tsx

import React from 'react';
import { Input } from "@/components/ui/input";

interface InstitutionFieldsProps {
  values: {
    universityName: string;
    departmentName: string;
  };
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export const InstitutionFields = ({ values, handleChange }: InstitutionFieldsProps) => {
  return (
    <>
      <div>
        <label htmlFor="universityName" className="block text-sm font-medium mb-1">
          University Name
        </label>
        <Input
          id="universityName"
          name="universityName"
          value={values.universityName}
          onChange={handleChange}
          placeholder="Enter university name"
          required
        />
      </div>

      <div>
        <label htmlFor="departmentName" className="block text-sm font-medium mb-1">
          Department Name
        </label>
        <Input
          id="departmentName"
          name="departmentName"
          value={values.departmentName}
          onChange={handleChange}
          placeholder="Enter department name"
          required
        />
      </div>
    </>
  );
};

// File: src/components/thesis/form/ThesisMetadataFields.tsx

import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

interface ThesisMetadataFieldsProps {
  title: string;
  description: string;
  keywords: string;
  supervisorEmail?: string;
  setTitle: (value: string) => void;
  setDescription: (value: string) => void;
  setKeywords: (value: string) => void;
  setSupervisorEmail?: (value: string) => void;
}

export const ThesisMetadataFields = ({
  title,
  description,
  keywords,
  supervisorEmail,
  setTitle,
  setDescription,
  setKeywords,
  setSupervisorEmail,
}: ThesisMetadataFieldsProps) => {
  return (
    <div className="space-y-4">
      <div>
        <label htmlFor="title" className="block text-sm font-medium mb-1">
          Title
        </label>
        <Input
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Enter thesis title"
          required
        />
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium mb-1">
          Description
        </label>
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Brief description of your thesis"
          required
        />
      </div>

      <div>
        <label htmlFor="keywords" className="block text-sm font-medium mb-1">
          Keywords
        </label>
        <Input
          id="keywords"
          value={keywords}
          onChange={(e) => setKeywords(e.target.value)}
          placeholder="Enter keywords separated by commas"
          required
        />
        <p className="text-sm text-muted-foreground mt-1">
          Separate keywords with commas (e.g., AI, Machine Learning, Data Science)
        </p>
      </div>

      {setSupervisorEmail && (
        <div>
          <label htmlFor="supervisorEmail" className="block text-sm font-medium mb-1">
            Supervisor Email
          </label>
          <Input
            id="supervisorEmail"
            type="email"
            value={supervisorEmail || ''}
            onChange={(e) => setSupervisorEmail(e.target.value)}
            placeholder="Enter your supervisor's email"
            required
          />
        </div>
      )}
    </div>
  );
};

// File: src/components/thesis/form/useThesisCreation.ts

import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Json } from '@/integrations/supabase/types';
import { ThesisSectionType } from '@/types/thesis';

interface ThesisMetadata {
  title: string;
  description: string;
  keywords: string;
  supervisorEmail?: string;
  universityName?: string;
  departmentName?: string;
  authorName?: string;
  thesisDate?: string;
  committeeMembers?: string[];
}

export const useThesisCreation = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const createThesis = async (
    metadata: ThesisMetadata,
    userId: string,
    supervisorId: string
  ) => {
    setIsSubmitting(true);
    try {
      console.log('Starting thesis creation with metadata:', metadata);

      const thesisId = crypto.randomUUID();

      const keywordsArray = metadata.keywords
        ? metadata.keywords.split(',').map(k => k.trim()).filter(k => k)
        : [];

      const thesisContent = {
        metadata: {
          description: metadata.description,
          keywords: keywordsArray,
          createdAt: new Date().toISOString(),
          universityName: metadata.universityName,
          departmentName: metadata.departmentName,
          authorName: metadata.authorName,
          thesisDate: metadata.thesisDate,
          committeeMembers: metadata.committeeMembers
        },
        frontMatter: [
          {
            id: crypto.randomUUID(),
            title: metadata.title,
            content: '',
            type: 'title' as ThesisSectionType,
            required: true,
            order: 1,
            figures: [],
            tables: [],
            citations: []
          },
          {
            id: crypto.randomUUID(),
            title: 'Abstract',
            content: metadata.description,
            type: 'abstract' as ThesisSectionType,
            required: true,
            order: 2,
            figures: [],
            tables: [],
            citations: []
          }
        ],
        chapters: [],
        backMatter: [
          {
            id: crypto.randomUUID(),
            title: 'References',
            content: '',
            type: 'references' as ThesisSectionType,
            required: true,
            order: 1,
            figures: [],
            tables: [],
            citations: [],
            references: []
          }
        ]
      } as Json;

      console.log('Creating thesis with content:', { thesisId, title: metadata.title, content: thesisContent, userId });

      // Create thesis with metadata and ensure user_id is set
      const { error: thesisError } = await supabase
        .from('theses')
        .insert({
          id: thesisId,
          title: metadata.title,
          content: thesisContent,
          user_id: userId,
          supervisor_id: supervisorId,
          supervisor_email: metadata.supervisorEmail
        });

      if (thesisError) {
        console.error('Error creating thesis:', thesisError);
        throw thesisError;
      }

      // Add user as owner
      const { error: collaboratorError } = await supabase
        .from('thesis_collaborators')
        .insert({
          thesis_id: thesisId,
          user_id: userId,
          role: 'owner'
        });

      if (collaboratorError) {
        console.error('Error adding thesis owner:', collaboratorError);
        // Rollback thesis creation
        await supabase
          .from('theses')
          .delete()
          .eq('id', thesisId);
        throw collaboratorError;
      }

      toast({
        title: "Success",
        description: "Your thesis has been created successfully.",
      });

      // Return thesisId and title
      return {
        thesisId,
        title: metadata.title
      };

    } catch (error: any) {
      console.error('Error in thesis creation:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create thesis. Please try again.",
        variant: "destructive",
      });
      return null;
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    createThesis,
    isSubmitting
  };
};

// File: src/components/thesis/header/HeaderActions.tsx

import { Button } from '@/components/ui/button';
import { Eye, EyeOff, Save, LogOut } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

interface HeaderActionsProps {
  showPreview: boolean;
  onTogglePreview: () => void;
  onSaveToJson: () => void;
}

export const HeaderActions = ({
  showPreview,
  onTogglePreview,
  onSaveToJson,
}: HeaderActionsProps) => {
  const { handleLogout } = useAuth();
  const { toast } = useToast();

  const handleLogoutClick = async () => {
    try {
      console.log('üîÑ Initiating logout from HeaderActions...');
      await handleLogout();
    } catch (error) {
      console.error('‚ùå Error during logout:', error);
      toast({
        title: "Error signing out",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex items-center gap-2">
      <Button
        variant="outline"
        size="sm"
        onClick={onTogglePreview}
        className="gap-2"
      >
        {showPreview ? (
          <>
            <EyeOff className="w-4 h-4" />
            Hide Preview
          </>
        ) : (
          <>
            <Eye className="w-4 h-4" />
            Show Preview
          </>
        )}
      </Button>
      <Button
        variant="outline"
        size="sm"
        onClick={onSaveToJson}
        className="gap-2"
      >
        <Save className="w-4 h-4" />
        Save as JSON
      </Button>
      <Button
        variant="outline"
        size="sm"
        onClick={handleLogoutClick}
        className="gap-2"
      >
        <LogOut className="w-4 h-4" />
        Logout
      </Button>
    </div>
  );
};

// File: src/components/thesis/header/UserSection.tsx

import { User } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface UserSectionProps {
  userEmail: string;
  userRole: string;
}

export const UserSection = ({ userEmail, userRole }: UserSectionProps) => {
  return (
    <div className="flex items-center gap-2">
      <User className="w-4 h-4" />
      <span className="text-sm">{userEmail}</span>
      <Badge variant="secondary" className="text-xs">
        {userRole}
      </Badge>
    </div>
  );
};

// File: src/components/thesis/planning/ThesisPlanning.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Calendar, Clock, Target, AlertCircle } from 'lucide-react';
import { motion } from 'framer-motion';
import { Thesis } from '@/types/thesis';
import { format } from 'date-fns';

interface ThesisPlanningProps {
  thesis: Thesis;
}

export const ThesisPlanning: React.FC<ThesisPlanningProps> = ({ thesis }) => {
  const startDate = new Date(thesis.created_at);
  const today = new Date();
  const estimatedEndDate = new Date(startDate);
  estimatedEndDate.setMonth(estimatedEndDate.getMonth() + 6); // Default 6 months duration
  
  const totalDays = Math.ceil((estimatedEndDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
  const daysElapsed = Math.ceil((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
  const daysRemaining = Math.max(0, totalDays - daysElapsed);
  const progress = Math.min(100, Math.round((daysElapsed / totalDays) * 100));

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Target className="w-5 h-5 text-primary" />
          Thesis Timeline
        </h3>
        
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Timeline Progress</span>
            <span>{progress}%</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <motion.div 
            whileHover={{ scale: 1.02 }}
            className="p-4 rounded-lg bg-white/30 space-y-2"
          >
            <div className="flex items-center gap-2 text-sm font-medium">
              <Calendar className="w-4 h-4 text-primary" />
              Start Date
            </div>
            <p className="text-sm text-muted-foreground">
              {format(startDate, 'PPP')}
            </p>
          </motion.div>

          <motion.div 
            whileHover={{ scale: 1.02 }}
            className="p-4 rounded-lg bg-white/30 space-y-2"
          >
            <div className="flex items-center gap-2 text-sm font-medium">
              <Target className="w-4 h-4 text-primary" />
              Target Completion
            </div>
            <p className="text-sm text-muted-foreground">
              {format(estimatedEndDate, 'PPP')}
            </p>
          </motion.div>
        </div>

        <div className="mt-4 space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4 text-primary" />
              <span className="text-sm font-medium">Time Remaining</span>
            </div>
            <span className="text-sm text-muted-foreground">
              {daysRemaining} days
            </span>
          </div>

          {daysRemaining < 30 && (
            <div className="flex items-center gap-2 text-yellow-600 bg-yellow-50 p-3 rounded-lg">
              <AlertCircle className="w-4 h-4" />
              <span className="text-sm">Less than a month remaining!</span>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

// File: src/components/thesis/preview/AbstractSection.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import MDEditor from '@uiw/react-md-editor';

interface AbstractSectionProps {
  abstractSection?: Section;
}

export const AbstractSection = ({ abstractSection }: AbstractSectionProps) => {
  return (
    <div className="thesis-page">
      <div className="thesis-header">Abstract</div>
      <div className="thesis-content thesis-abstract">
        <h2 className="text-2xl font-serif mb-4">Abstract</h2>
        <MDEditor.Markdown 
          source={abstractSection?.content || "No Abstract Provided"}
          className="prose prose-sm max-w-none"
        />
      </div>
      <div className="thesis-footer">
        <span>Page <span className="page-number"></span></span>
      </div>
    </div>
  );
};

// File: src/components/thesis/preview/ArabicTitlePage.tsx

import React from 'react';
import { Thesis } from '@/types/thesis';
import { GraduationCap, BookOpen, Award } from 'lucide-react';

interface ArabicTitlePageProps {
  thesis: Thesis;
  titleSection?: { content: string };
}

export const ArabicTitlePage = ({ thesis, titleSection }: ArabicTitlePageProps) => {
  return (
    <div className="thesis-page title-page" dir="rtl">
      <div className="thesis-title-content text-right">
        <div className="university-decoration">
          <GraduationCap className="title-icon text-primary mx-auto" size={48} />
        </div>
        <div className="university-name text-2xl font-bold mb-4">
          {thesis.metadata?.universityName || "ÿßÿ≥ŸÖ ÿßŸÑÿ¨ÿßŸÖÿπÿ©"}
        </div>
        <div className="department-name text-xl mb-8">
          {thesis.metadata?.departmentName || "ÿßÿ≥ŸÖ ÿßŸÑŸÇÿ≥ŸÖ"}
        </div>
        
        <div className="thesis-decoration">
          <BookOpen className="title-icon text-primary-light mx-auto" size={36} />
        </div>
        <div className="thesis-main-title text-3xl font-bold mb-8">
          {titleSection?.content || "ÿπŸÜŸàÿßŸÜ ÿßŸÑÿ£ÿ∑ÿ±Ÿàÿ≠ÿ©"}
        </div>
        
        <div className="thesis-subtitle text-lg mb-8">
          ÿ±ÿ≥ÿßŸÑÿ© ŸÖŸÇÿØŸÖÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿØÿ±ÿ¨ÿ©<br />
          ÿßŸÑÿØŸÉÿ™Ÿàÿ±ÿßŸá ŸÅŸä ÿßŸÑŸÅŸÑÿ≥ŸÅÿ©
        </div>
        
        <div className="author-decoration">
          <Award className="title-icon text-primary mx-auto" size={32} />
        </div>
        <div className="thesis-author mb-8">
          ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ∑ÿßŸÑÿ®/ÿ©<br />
          {thesis.metadata?.authorName || "ÿßÿ≥ŸÖ ÿßŸÑÿ®ÿßÿ≠ÿ´/ÿ©"}
        </div>
        
        <div className="thesis-date mb-8">
          {thesis.metadata?.thesisDate || "ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸáÿ¨ÿ±Ÿä / ÿßŸÑŸÖŸäŸÑÿßÿØŸä"}
        </div>
        
        <div className="thesis-committee">
          ŸÑÿ¨ŸÜÿ© ÿßŸÑÿ•ÿ¥ÿ±ÿßŸÅ:<br />
          {thesis.metadata?.committeeMembers?.map((member, index) => (
            <React.Fragment key={index}>
              {member}
              <br />
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

// File: src/components/thesis/preview/ContentElements.tsx

import React from 'react';
import { Figure, Table, Citation } from '@/types/thesis';
import { cn } from '@/lib/utils';
import { ThesisPreviewElement } from './ThesisPreviewElement';

interface ContentElementsProps {
  figures?: Figure[];
  tables?: Table[];
  citations?: Citation[];
  elementPositions: Array<{
    id: string;
    type: 'figure' | 'table' | 'citation';
    position: 'inline' | 'top' | 'bottom' | 'custom';
    customPosition?: {
      x: number;
      y: number;
    };
  }>;
  onElementClick: (id: string, type: 'figure' | 'table' | 'citation') => void;
  onPositionChange: (elementId: string, position: { x: number; y: number }) => void;
}

export const ContentElements = ({
  figures,
  tables,
  citations,
  elementPositions,
  onElementClick,
  onPositionChange
}: ContentElementsProps) => {
  const getElementPosition = (elementId: string) => {
    const position = elementPositions.find(p => p.id === elementId);
    return position?.position || 'inline';
  };

  const getCustomPosition = (elementId: string) => {
    const position = elementPositions.find(p => p.id === elementId);
    return position?.customPosition;
  };

  const renderFigures = (position: string = 'inline') => {
    if (!figures || figures.length === 0) return null;
    
    const positionedFigures = figures.filter(figure => 
      getElementPosition(figure.id) === position
    );

    if (positionedFigures.length === 0) return null;

    return (
      <div className="figures-container space-y-8 my-8">
        {positionedFigures.map((figure) => (
          <ThesisPreviewElement
            key={figure.id}
            id={figure.id}
            type="figure"
            position={getElementPosition(figure.id)}
            customPosition={getCustomPosition(figure.id)}
            onClick={onElementClick}
            onPositionChange={(pos) => onPositionChange(figure.id, pos)}
          >
            <figure className="text-center page-break-inside-avoid">
              <img 
                src={figure.imageUrl} 
                alt={figure.altText}
                className="mx-auto max-w-full h-auto rounded-lg shadow-md"
              />
              <figcaption className="mt-4 text-sm text-gray-600 italic">
                Figure {figure.number}: {figure.caption}
              </figcaption>
            </figure>
          </ThesisPreviewElement>
        ))}
      </div>
    );
  };

  const renderTables = (position: string = 'inline') => {
    if (!tables || tables.length === 0) return null;

    const positionedTables = tables.filter(table => 
      getElementPosition(table.id) === position
    );

    if (positionedTables.length === 0) return null;

    return positionedTables.map((table) => (
      <ThesisPreviewElement
        key={table.id}
        id={table.id}
        type="table"
        position={getElementPosition(table.id)}
        customPosition={getCustomPosition(table.id)}
        onClick={onElementClick}
        onPositionChange={(pos) => onPositionChange(table.id, pos)}
      >
        <div className="my-8 page-break-inside-avoid">
          <div className="overflow-x-auto">
            <div dangerouslySetInnerHTML={{ __html: table.content }} />
          </div>
          {table.caption && (
            <p className="mt-2 text-sm text-gray-600 text-center">
              Table {table.id}: {table.caption}
            </p>
          )}
        </div>
      </ThesisPreviewElement>
    ));
  };

  const renderCitations = (position: string = 'inline') => {
    if (!citations || citations.length === 0) return null;

    const positionedCitations = citations.filter(citation => 
      getElementPosition(citation.id) === position
    );

    if (positionedCitations.length === 0) return null;

    return (
      <div className="citations-section mt-8 border-t pt-4 page-break-inside-avoid">
        <h3 className="text-lg font-serif mb-2">Citations</h3>
        <div className="space-y-2">
          {positionedCitations.map((citation) => (
            <ThesisPreviewElement
              key={citation.id}
              id={citation.id}
              type="citation"
              position={getElementPosition(citation.id)}
              customPosition={getCustomPosition(citation.id)}
              onClick={onElementClick}
              onPositionChange={(pos) => onPositionChange(citation.id, pos)}
            >
              <div className="citation-reference text-sm">
                {citation.authors.join(', ')} ({citation.year}). {citation.text}.
                {citation.journal && ` ${citation.journal}.`}
                {citation.doi && ` DOI: ${citation.doi}`}
              </div>
            </ThesisPreviewElement>
          ))}
        </div>
      </div>
    );
  };

  return (
    <>
      {renderFigures('top')}
      {renderTables('top')}
      {renderCitations('top')}
      
      {renderFigures('inline')}
      {renderTables('inline')}
      {renderCitations('inline')}
      
      {renderFigures('bottom')}
      {renderTables('bottom')}
      {renderCitations('bottom')}
      
      {renderFigures('custom')}
      {renderTables('custom')}
      {renderCitations('custom')}
    </>
  );
};

// File: src/components/thesis/preview/ContentSection.tsx

import React from 'react';
import { Section, Figure, Table, Citation } from '@/types/thesis';
import MDEditor from '@uiw/react-md-editor';
import { cn } from '@/lib/utils';
import { ContentElements } from './ContentElements';

interface ContentSectionProps {
  section: Section;
  chapterTitle?: string;
  elementPositions: Array<{
    id: string;
    type: 'figure' | 'table' | 'citation';
    position: 'inline' | 'top' | 'bottom' | 'custom';
    customPosition?: {
      x: number;
      y: number;
    };
  }>;
  onElementClick: (id: string, type: 'figure' | 'table' | 'citation') => void;
  onPositionChange: (elementId: string, position: { x: number; y: number }) => void;
}

export const ContentSection = ({ 
  section, 
  chapterTitle, 
  elementPositions,
  onElementClick,
  onPositionChange 
}: ContentSectionProps) => {
  const isSpecialSection = section.type === 'references' || section.type === 'table-of-contents';

  return (
    <div key={section.id} className={cn(
      "thesis-page relative mb-8 p-8",
      isSpecialSection && "special-section",
      section.type === 'table-of-contents' && "toc-section"
    )}>
      <div className="thesis-header">
        {chapterTitle ? `Chapter ${chapterTitle} - ${section.title}` : section.title}
      </div>
      <div className={cn(
        "thesis-content",
        section.type === 'references' && "thesis-references",
        "prose prose-sm max-w-none space-y-6"
      )}>
        {section.type !== 'table-of-contents' && (
          <>
            {chapterTitle && <h2 className="text-2xl font-serif mb-4 page-break-after-avoid">{section.title}</h2>}
            <div className="page-break-inside-avoid">
              <MDEditor.Markdown source={section.content} />
            </div>
            
            <ContentElements
              figures={section.figures}
              tables={section.tables}
              citations={section.citations}
              elementPositions={elementPositions}
              onElementClick={onElementClick}
              onPositionChange={onPositionChange}
            />
          </>
        )}
        {section.type === 'table-of-contents' && (
          <div className="toc-content page-break-inside-avoid">
            <h2 className="text-2xl font-serif mb-4">Table of Contents</h2>
          </div>
        )}
      </div>
      <div className="thesis-footer">
        {!isSpecialSection && <span>Page <span className="page-number"></span></span>}
      </div>
    </div>
  );
};

// File: src/components/thesis/preview/ElementControls.tsx

import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ArrowUp, ArrowDown, Move, Maximize2, Minimize2, AlignLeft, AlignCenter, AlignRight } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { motion } from 'framer-motion';

interface ElementControlsProps {
  elementId: string;
  type: 'figure' | 'table' | 'citation';
  position: 'inline' | 'top' | 'bottom' | 'custom';
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  onUpdatePosition: (position: string) => void;
  onUpdateCoordinates: (x: number, y: number) => void;
  onUpdateSize: (width: number, height: number) => void;
  onClose: () => void;
}

export const ElementControls = ({
  elementId,
  type,
  position,
  x = 0,
  y = 0,
  width,
  height,
  onUpdatePosition,
  onUpdateCoordinates,
  onUpdateSize,
  onClose
}: ElementControlsProps) => {
  const { toast } = useToast();
  const [alignment, setAlignment] = useState<'left' | 'center' | 'right'>('left');
  const [marginTop, setMarginTop] = useState(0);
  const [marginBottom, setMarginBottom] = useState(0);

  const handlePositionChange = (newPosition: string) => {
    console.log('Updating element position:', { elementId, newPosition });
    onUpdatePosition(newPosition);
    
    toast({
      title: "Position Updated",
      description: `${type.charAt(0).toUpperCase() + type.slice(1)} position updated successfully`,
    });
  };

  const handleCoordinateChange = (newX: number, newY: number) => {
    console.log('Updating element coordinates:', { elementId, x: newX, y: newY });
    onUpdateCoordinates(newX, newY);
  };

  const handleAlignmentChange = (newAlignment: 'left' | 'center' | 'right') => {
    setAlignment(newAlignment);
    let newX = x;
    if (newAlignment === 'center') newX = window.innerWidth / 2 - (width || 0) / 2;
    if (newAlignment === 'right') newX = window.innerWidth - (width || 0) - 20;
    handleCoordinateChange(newX, y);
  };

  const handleMarginChange = (top: number, bottom: number) => {
    setMarginTop(top);
    setMarginBottom(bottom);
    handleCoordinateChange(x, y + top);
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      transition={{ duration: 0.2 }}
    >
      <Card className="fixed z-50 p-4 space-y-4 shadow-lg w-80 bg-background/95 backdrop-blur">
        <div className="flex justify-between items-center">
          <h3 className="text-sm font-medium">
            {type.charAt(0).toUpperCase() + type.slice(1)} Controls
          </h3>
          <Button variant="ghost" size="sm" onClick={onClose}>√ó</Button>
        </div>

        <div className="space-y-4">
          <div className="space-y-2">
            <Label>Position Type</Label>
            <Select value={position} onValueChange={handlePositionChange}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="inline">Inline with Text</SelectItem>
                <SelectItem value="top">Top of Page</SelectItem>
                <SelectItem value="bottom">Bottom of Page</SelectItem>
                <SelectItem value="custom">Custom Position</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {position === 'custom' && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.2 }}
              className="space-y-4"
            >
              <div className="space-y-2">
                <Label>Alignment</Label>
                <div className="flex gap-2">
                  <Button
                    variant={alignment === 'left' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => handleAlignmentChange('left')}
                  >
                    <AlignLeft className="w-4 h-4" />
                  </Button>
                  <Button
                    variant={alignment === 'center' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => handleAlignmentChange('center')}
                  >
                    <AlignCenter className="w-4 h-4" />
                  </Button>
                  <Button
                    variant={alignment === 'right' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => handleAlignmentChange('right')}
                  >
                    <AlignRight className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              <div className="space-y-2">
                <Label>Margins</Label>
                <div className="space-y-4">
                  <div>
                    <Label className="text-xs">Top Margin (px)</Label>
                    <Slider
                      value={[marginTop]}
                      onValueChange={([value]) => handleMarginChange(value, marginBottom)}
                      max={100}
                      step={1}
                    />
                  </div>
                  <div>
                    <Label className="text-xs">Bottom Margin (px)</Label>
                    <Slider
                      value={[marginBottom]}
                      onValueChange={([value]) => handleMarginChange(marginTop, value)}
                      max={100}
                      step={1}
                    />
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-2">
                <div className="space-y-1">
                  <Label>X Position (px)</Label>
                  <Input
                    type="number"
                    value={x}
                    onChange={(e) => handleCoordinateChange(Number(e.target.value), y)}
                    min={0}
                    step={1}
                  />
                </div>
                <div className="space-y-1">
                  <Label>Y Position (px)</Label>
                  <Input
                    type="number"
                    value={y}
                    onChange={(e) => handleCoordinateChange(x, Number(e.target.value))}
                    min={0}
                    step={1}
                  />
                </div>
              </div>

              {(type === 'figure' || type === 'table') && (
                <div className="grid grid-cols-2 gap-2">
                  <div className="space-y-1">
                    <Label>Width (px)</Label>
                    <Input
                      type="number"
                      value={width}
                      onChange={(e) => onUpdateSize(Number(e.target.value), height || 0)}
                      min={0}
                      step={1}
                    />
                  </div>
                  <div className="space-y-1">
                    <Label>Height (px)</Label>
                    <Input
                      type="number"
                      value={height}
                      onChange={(e) => onUpdateSize(width || 0, Number(e.target.value))}
                      min={0}
                      step={1}
                    />
                  </div>
                </div>
              )}

              <div className="flex gap-2 justify-center pt-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePositionChange('inline')}
                  className="gap-1"
                >
                  <Move className="w-4 h-4" />
                  Reset Position
                </Button>
              </div>
            </motion.div>
          )}
        </div>
      </Card>
    </motion.div>
  );
};

// File: src/components/thesis/preview/ElementPositionManager.tsx

import React, { useState } from 'react';
import { Figure, Table, Citation } from '@/types/thesis';
import { ElementControls } from './ElementControls';

interface ElementPosition {
  id: string;
  type: 'figure' | 'table' | 'citation';
  position: 'inline' | 'top' | 'bottom' | 'custom';
  customPosition?: {
    x: number;
    y: number;
  };
  size?: {
    width: number;
    height: number;
  };
}

interface ElementPositionManagerProps {
  figures: Figure[];
  tables: Table[];
  citations: Citation[];
  onUpdatePosition: (elementId: string, position: ElementPosition) => void;
}

export const ElementPositionManager = ({
  figures,
  tables,
  citations,
  onUpdatePosition
}: ElementPositionManagerProps) => {
  const [selectedElement, setSelectedElement] = useState<ElementPosition | null>(null);
  const [isDragging, setIsDragging] = useState(false);

  const handleElementClick = (element: { id: string, type: ElementPosition['type'] }) => {
    console.log('Element clicked:', element);
    setSelectedElement({
      id: element.id,
      type: element.type,
      position: 'inline',
      customPosition: { x: 0, y: 0 }
    });
  };

  const handlePositionChange = (position: ElementPosition['position']) => {
    if (!selectedElement) return;
    console.log('Position changed:', position);
    
    onUpdatePosition(selectedElement.id, {
      ...selectedElement,
      position
    });
  };

  const handleCoordinatesChange = (x: number, y: number) => {
    if (!selectedElement) return;
    console.log('Coordinates changed:', { x, y });
    
    onUpdatePosition(selectedElement.id, {
      ...selectedElement,
      position: 'custom',
      customPosition: { x, y }
    });
  };

  const handleSizeChange = (width: number, height: number) => {
    if (!selectedElement) return;
    console.log('Size changed:', { width, height });
    
    onUpdatePosition(selectedElement.id, {
      ...selectedElement,
      size: { width, height }
    });
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = () => {
    setIsDragging(false);
  };

  return (
    <div className="relative">
      {selectedElement && (
        <ElementControls
          elementId={selectedElement.id}
          type={selectedElement.type}
          position={selectedElement.position}
          x={selectedElement.customPosition?.x}
          y={selectedElement.customPosition?.y}
          width={selectedElement.size?.width}
          height={selectedElement.size?.height}
          onUpdatePosition={handlePositionChange}
          onUpdateCoordinates={handleCoordinatesChange}
          onUpdateSize={handleSizeChange}
          onClose={() => setSelectedElement(null)}
        />
      )}

      <style>
        {`
          .interactive-element {
            cursor: ${isDragging ? 'grabbing' : 'grab'};
            transition: outline 0.2s ease;
            user-select: none;
          }
          .interactive-element:hover {
            outline: 2px solid #3b82f6;
          }
          .interactive-element.selected {
            outline: 2px solid #2563eb;
          }
        `}
      </style>
    </div>
  );
};

// File: src/components/thesis/preview/FrenchTitlePage.tsx

import React from 'react';
import { GraduationCap, BookOpen, Award } from 'lucide-react';
import { Section, Thesis } from '@/types/thesis';

interface FrenchTitlePageProps {
  thesis: Thesis;
  titleSection?: Section;
}

export const FrenchTitlePage = ({ thesis, titleSection }: FrenchTitlePageProps) => {
  return (
    <div className="thesis-page title-page">
      <div className="thesis-title-content">
        <div className="university-decoration">
          <GraduationCap className="title-icon text-primary" size={48} />
        </div>
        <div className="university-name">
          {thesis.metadata?.universityName || "Nom de l'Universit√©"}
        </div>
        <div className="department-name">
          {thesis.metadata?.departmentName || "D√©partement"}
        </div>
        
        <div className="thesis-decoration">
          <BookOpen className="title-icon text-primary-light" size={36} />
        </div>
        <div className="thesis-main-title">
          {titleSection?.content || "Titre de la th√®se"}
        </div>
        
        <div className="thesis-subtitle">
          Th√®se pr√©sent√©e en vue de l'obtention<br />
          du grade de Docteur en<br />
          {thesis.metadata?.departmentName || "[Discipline]"}
        </div>
        
        <div className="author-decoration">
          <Award className="title-icon text-primary" size={32} />
        </div>
        <div className="thesis-author">
          par<br />
          {thesis.metadata?.authorName || "Nom de l'auteur"}
        </div>
        
        <div className="thesis-date">
          {thesis.metadata?.thesisDate || "Mois Ann√©e"}
        </div>
        
        <div className="thesis-committee">
          Membres du jury :<br />
          {thesis.metadata?.committeeMembers?.map((member, index) => (
            <React.Fragment key={index}>
              {member}<br />
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

// File: src/components/thesis/preview/ThesisPreviewElement.tsx

import React, { useState, useRef } from 'react';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';

interface ThesisPreviewElementProps {
  id: string;
  type: 'figure' | 'table' | 'citation';
  position?: 'inline' | 'top' | 'bottom' | 'custom';
  customPosition?: { x: number; y: number };
  size?: { width: number; height: number };
  onClick: (id: string, type: 'figure' | 'table' | 'citation') => void;
  onPositionChange?: (position: { x: number; y: number }) => void;
  children: React.ReactNode;
}

export const ThesisPreviewElement = ({
  id,
  type,
  position = 'inline',
  customPosition,
  size,
  onClick,
  onPositionChange,
  children
}: ThesisPreviewElementProps) => {
  const [isDragging, setIsDragging] = useState(false);
  const elementRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const handleDragStart = (e: React.MouseEvent) => {
    if (position !== 'custom') return;
    
    setIsDragging(true);
    const rect = elementRef.current?.getBoundingClientRect();
    if (rect) {
      const offsetX = e.clientX - rect.left;
      const offsetY = e.clientY - rect.top;
      
      const handleMouseMove = (moveEvent: MouseEvent) => {
        if (!isDragging) return;
        
        const newX = moveEvent.clientX - offsetX;
        const newY = moveEvent.clientY - offsetY;
        
        if (onPositionChange) {
          onPositionChange({ x: newX, y: newY });
        }
      };

      const handleMouseUp = () => {
        setIsDragging(false);
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
        
        toast({
          title: "Position Updated",
          description: `${type.charAt(0).toUpperCase() + type.slice(1)} position updated`,
        });
      };

      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }
  };

  return (
    <div
      ref={elementRef}
      className={cn(
        "interactive-element",
        position === 'custom' && "absolute cursor-move",
        isDragging && "opacity-70",
        "transition-all duration-200"
      )}
      style={{
        ...(position === 'custom' && customPosition
          ? {
              top: customPosition.y,
              left: customPosition.x,
            }
          : {}),
        ...(size
          ? {
              width: size.width,
              height: size.height,
            }
          : {})
      }}
      onClick={() => onClick(id, type)}
      onMouseDown={handleDragStart}
    >
      {children}
    </div>
  );
};

// File: src/components/thesis/preview/TitlePage.tsx

import React from 'react';
import { Section, ThesisMetadata } from '@/types/thesis';
import { GraduationCap, BookOpen, Award } from 'lucide-react';

interface TitlePageProps {
  metadata: ThesisMetadata;
  titleSection?: Section;
}

export const TitlePage = ({ metadata, titleSection }: TitlePageProps) => {
  console.log('Rendering Title Page with data:', metadata);
  
  return (
    <div className="thesis-page title-page min-h-[297mm] flex flex-col items-center justify-between py-16 px-8">
      <div className="thesis-title-content w-full max-w-3xl mx-auto space-y-12 text-center">
        <div className="university-section space-y-4">
          <div className="university-decoration flex justify-center">
            <GraduationCap className="title-icon text-primary" size={48} />
          </div>
          <div className="university-name text-2xl font-semibold">
            {metadata?.universityName || "Your University Name"}
          </div>
          <div className="department-name text-xl">
            {metadata?.departmentName || "Department of Your Field"}
          </div>
        </div>
        
        <div className="thesis-section space-y-6 mt-16">
          <div className="thesis-decoration flex justify-center">
            <BookOpen className="title-icon text-primary-light" size={36} />
          </div>
          <div className="thesis-main-title text-3xl font-bold leading-relaxed">
            {titleSection?.content || "Untitled Thesis"}
          </div>
        </div>
        
        <div className="thesis-subtitle text-lg leading-relaxed mt-8">
          A thesis submitted in partial fulfillment<br />
          of the requirements for the degree of<br />
          Doctor of Philosophy
        </div>
        
        <div className="author-section space-y-4 mt-16">
          <div className="author-decoration flex justify-center">
            <Award className="title-icon text-primary" size={32} />
          </div>
          <div className="thesis-author text-xl">
            by<br />
            <span className="font-semibold">{metadata?.authorName || "Author Name"}</span>
          </div>
        </div>
        
        <div className="thesis-date text-lg mt-8">
          {metadata?.thesisDate || "Month Year"}
        </div>
        
        <div className="thesis-committee text-lg mt-12">
          <div className="font-semibold mb-2">Thesis Committee:</div>
          {metadata?.committeeMembers?.map((member, index) => (
            <div key={index} className="committee-member">
              {member}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// File: src/components/thesis/sidebar/TableOfContents.tsx

import React from 'react';
import { Section } from '@/types/thesis';
import { cn } from '@/lib/utils';
import { CollaboratorLocation } from '@/components/collaboration/CollaboratorLocation';
import { supabase } from '@/integrations/supabase/client';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { ScrollArea } from '@/components/ui/scroll-area';
import { TaskList } from './TaskList';
import { FileText, BookOpen, ChevronRight, ChevronDown } from 'lucide-react';

interface TableOfContentsProps {
  sections: Section[];
  activeSection: string;
  onSectionSelect: (id: string) => void;
  thesisId: string;
   onUpdateSectionData: (section: Section) => void;
  onAddSectionTask: (sectionId: string) => void;
  onUpdateSectionTask: (sectionId: string, taskId: string, status: 'pending' | 'in progress' | 'completed' | 'on hold') => void;
    onChangeSectionTaskDescription: (sectionId: string, taskId: string, newDescription: string) => void
}

export const TableOfContents = ({
  sections = [],
  activeSection,
  onSectionSelect,
  thesisId,
    onUpdateSectionData,
    onAddSectionTask,
     onUpdateSectionTask,
    onChangeSectionTaskDescription,
}: TableOfContentsProps) => {
  const [openSections, setOpenSections] = React.useState<string[]>(['frontMatter', 'mainContent', 'backMatter', 'figures', 'tables']);
  const [collaboratorLocations, setCollaboratorLocations] = React.useState<Record<string, any>>({});
  const presenceChannel = React.useRef<any>(null);

  React.useEffect(() => {
    if (!thesisId) return;

    // Set up presence channel
    presenceChannel.current = supabase.channel(`thesis:${thesisId}`);
    
    presenceChannel.current
      .on('presence', { event: 'sync' }, () => {
        const state = presenceChannel.current?.presenceState() || {};
        console.log('Presence state updated:', state);
        setCollaboratorLocations(state);
      })
      .on('presence', { event: 'join' }, ({ key, newPresences }) => {
        console.log('User joined:', key, newPresences);
      })
      .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
        console.log('User left:', key, leftPresences);
      })
      .subscribe(async (status: string) => {
        if (status === 'SUBSCRIBED') {
          const { data: { user } } = await supabase.auth.getUser();
          if (!user) return;

          // Track user's current section
          await presenceChannel.current?.track({
            user_id: user.id,
            email: user.email,
            section_id: activeSection,
            online_at: new Date().toISOString(),
          });
        }
      });

    return () => {
      if (presenceChannel.current) {
        supabase.removeChannel(presenceChannel.current);
      }
    };
  }, [thesisId]);

  // Update presence when active section changes
  React.useEffect(() => {
    const updatePresence = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user || !presenceChannel.current) return;

      await presenceChannel.current?.track({
        user_id: user.id,
        email: user.email,
        section_id: activeSection,
        online_at: new Date().toISOString(),
      });
    };

    updatePresence();
  }, [activeSection]);

  // Group sections by type
  const frontMatterSections = sections.filter(section => 
    ['title', 'abstract', 'acknowledgments'].includes(section.type || '')
  );
  
  const mainContentSections = sections.filter(section =>
    !['title', 'abstract', 'acknowledgments', 'references', 'appendix'].includes(section.type || '')
  );
  
  const backMatterSections = sections.filter(section =>
    ['references', 'appendix'].includes(section.type || '')
  );

  const toggleSection = (section: string) => {
    setOpenSections(prev =>
      prev.includes(section)
        ? prev.filter(s => s !== section)
        : [...prev, section]
    );
  };

  const getCollaboratorsInSection = (sectionId: string) => {
    return Object.values(collaboratorLocations)
      .flat()
      .filter((presence: any) => presence.section_id === sectionId);
  };

  const renderSectionItem = (section: Section) => {
    const collaborators = getCollaboratorsInSection(section.id);

    return (
      <button
        key={section.id}
        onClick={() => onSectionSelect(section.id)}
        className={cn(
          "w-full text-left px-3 py-2 rounded-md text-sm",
          "hover:bg-editor-hover transition-colors duration-200",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-editor-accent",
          "flex items-center justify-between group",
          activeSection === section.id && "bg-editor-active text-editor-accent font-medium"
        )}
      >
        <div className="flex items-center gap-2">
          <FileText className="w-4 h-4 text-editor-text group-hover:text-editor-accent transition-colors" />
          <span className="truncate">{section.title || 'Untitled Section'}</span>
        </div>
         {collaborators.length > 0 && (
          <div className="flex -space-x-2">
            {collaborators.map((collaborator: any) => (
              <CollaboratorLocation 
                key={collaborator.user_id} 
                collaborator={collaborator}
              />
            ))}
          </div>
        )}
      </button>
    );
  };

  const renderCollapsibleSection = (
    title: string,
    sectionsList: Section[],
    sectionKey: string,
    icon: React.ReactNode
  ) => (
    <Collapsible
      key={sectionKey}
      open={openSections.includes(sectionKey)}
      onOpenChange={() => toggleSection(sectionKey)}
      className="space-y-1"
    >
      <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
        {openSections.includes(sectionKey) ? (
          <ChevronDown className="w-4 h-4 mr-2" />
        ) : (
          <ChevronRight className="w-4 h-4 mr-2" />
        )}
        {icon}
        {title}
      </CollapsibleTrigger>
      <CollapsibleContent className="pl-4 space-y-1">
        {sectionsList.map(section => (
          <div className="space-y-2">
            {renderSectionItem(section)}
            <TaskList
                tasks={section.tasks}
                onUpdateTask={(taskId, status) => onUpdateSectionTask(section.id, taskId, status)}
                onAddTask={() => onAddSectionTask(section.id)}
                onChangeTaskDescription={(taskId, newDescription)=> onChangeSectionTaskDescription(section.id, taskId, newDescription)}
              />
            </div>
          ))}
      </CollapsibleContent>
    </Collapsible>
  );

  const renderElementsList = (
    title: string,
    elements: Array<{ id: string; title: string; parentSection: string }>,
    sectionKey: string,
    icon: React.ReactNode
  ) => (
    <Collapsible
      key={sectionKey}
      open={openSections.includes(sectionKey)}
      onOpenChange={() => toggleSection(sectionKey)}
      className="space-y-1"
    >
      <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
        {openSections.includes(sectionKey) ? (
          <ChevronDown className="w-4 h-4 mr-2" />
        ) : (
          <ChevronRight className="w-4 h-4 mr-2" />
        )}
        {icon}
        {title}
      </CollapsibleTrigger>
      <CollapsibleContent className="pl-4 space-y-1">
        {elements.map(element => (
          <button
            key={element.id}
            onClick={() => onSectionSelect(element.id)}
            className={cn(
              "w-full text-left px-3 py-2 rounded-md text-sm",
              "hover:bg-editor-hover transition-colors duration-200",
              "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-editor-accent",
              "flex flex-col gap-1",
              activeSection === element.id && "bg-editor-active text-editor-accent font-medium"
            )}
          >
            <span className="truncate font-medium">{element.title}</span>
            <span className="text-xs text-editor-text-light truncate">
              {element.parentSection}
            </span>
          </button>
        ))}
      </CollapsibleContent>
    </Collapsible>
  );

  return (
    <ScrollArea className="h-[calc(100vh-4rem)]">
      <div className="space-y-4">
        {frontMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Front Matter',
            frontMatterSections,
            'frontMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {mainContentSections.length > 0 && (
          renderCollapsibleSection(
            'Main Content',
            mainContentSections,
            'mainContent',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {backMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Back Matter',
            backMatterSections,
            'backMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
      </div>
    </ScrollArea>
  );
};

// File: src/components/thesis/sidebar/TaskList.tsx

import React, { useState } from 'react';
import { TaskItem } from '@/components/ui/TaskInput';
import { Button } from '@/components/ui/button';
import { PlusCircle, ChevronDown, ChevronUp } from 'lucide-react';
import { cn } from '@/lib/utils';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface TaskListProps {
  tasks: {
    id: string;
    description: string;
    status: 'pending' | 'in progress' | 'completed' | 'on hold';
    dueDate?: string;
      priority?: 'high' | 'medium' | 'low';
    }[];
   onUpdateTask: (taskId: string, newStatus: 'pending' | 'in progress' | 'completed' | 'on hold') => void;
    onAddTask: () => void;
    onChangeTaskDescription: (taskId: string, newDescription: string) => void
}

export const TaskList: React.FC<TaskListProps> = ({
  tasks = [],
    onUpdateTask,
    onAddTask,
    onChangeTaskDescription,
}) => {
  const [isOpen, setIsOpen] = useState(false);

    const handleToggleOpen = () => {
      setIsOpen(!isOpen)
    }
    
  return (
    <div className="space-y-2">
      <Collapsible open={isOpen} onOpenChange={handleToggleOpen} className="mt-4">
        <CollapsibleTrigger className="flex w-full justify-between hover:bg-editor-hover rounded-md py-2 px-3 items-center text-sm font-medium">
          <div className="flex items-center gap-1">
            <span className="">
              Tasks ({tasks.length})
            </span>
          </div>
           {isOpen ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="w-4 h-4" /> }
        </CollapsibleTrigger>
          <CollapsibleContent>
            <div className="pl-2 space-y-2">
                {tasks.map((task) => (
                    <TaskItem 
                      key={task.id}
                      id={task.id}
                      description={task.description}
                      status={task.status}
                      onToggleStatus={(newStatus) => onUpdateTask(task.id, newStatus)}
                      onChangeDescription={(newDescription)=> onChangeTaskDescription(task.id, newDescription)}
                     />
                ))}
                  <Button
                     onClick={onAddTask}
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start gap-2"
                  >
                    <PlusCircle className="h-4 w-4"/>
                    Add Task
                  </Button>
            </div>
          </CollapsibleContent>
      </Collapsible>
    </div>
  );
};

// File: src/components/thesis/sidebar/ThesisPlan.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { BookOpen, ChevronDown, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface ThesisPlanProps {
    sections: any[];
  activeSection: string;
  onSectionSelect: (id: string) => void;
  onUpdateSectionData: (section: any) => void;
}

export const ThesisPlan: React.FC<ThesisPlanProps> = ({
  sections,
  activeSection,
    onSectionSelect,
    onUpdateSectionData
}) => {
  const [openSections, setOpenSections] = React.useState<string[]>(['frontMatter', 'mainContent', 'backMatter']);

  const toggleSection = (section: string) => {
    setOpenSections(prev =>
      prev.includes(section)
        ? prev.filter(s => s !== section)
        : [...prev, section]
    );
  };

  const handleStatusChange = (sectionId: string, taskId: string, checked: boolean) => {
      const updatedSections = sections.map(section => {
        if (section.id === sectionId){
            const updatedTasks = section.tasks.map((task: any) =>
              task.id === taskId ? { ...task, status: checked ? 'completed' : 'pending' } : task
            );

            return {...section, tasks: updatedTasks};
        }
        return section
      });
      
        onUpdateSectionData(updatedSections);
    };


  const renderSectionItem = (section: any) => {
      return (
        <div key={section.id} className="space-y-2">
            <button
              onClick={() => onSectionSelect(section.id)}
               className={cn(
                  "w-full text-left px-3 py-2 rounded-md text-sm",
                   "hover:bg-editor-hover transition-colors duration-200",
                  "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-editor-accent",
                 "flex items-center gap-2 group"
                 ,
                  activeSection === section.id && "bg-editor-active text-editor-accent font-medium"
                )}
            >
               <span className="truncate">{section.title || 'Untitled Section'}</span>
            </button>
              <ul className="ml-4 space-y-1">
                {(section.tasks || []).map((task: any) => (
                  <li key={task.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Checkbox
                        checked={task.status === 'completed'}
                        onCheckedChange={(e) => handleStatusChange(section.id, task.id, e)}
                        id={task.id}
                      />
                      <span className="text-sm">{task.description}</span>
                    </div>
                  </li>
                  ))}
              </ul>
          </div>
      );
    };

  const renderCollapsibleSection = (
    title: string,
    sectionsList: any[],
    sectionKey: string,
    icon: React.ReactNode
  ) => (
    <Collapsible
      key={sectionKey}
      open={openSections.includes(sectionKey)}
      onOpenChange={() => toggleSection(sectionKey)}
      className="space-y-1"
    >
      <CollapsibleTrigger className="flex items-center w-full p-2 text-sm font-medium hover:bg-editor-hover rounded-md">
        {openSections.includes(sectionKey) ? (
          <ChevronDown className="w-4 h-4 mr-2" />
        ) : (
          <ChevronRight className="w-4 h-4 mr-2" />
        )}
        {icon}
        {title}
      </CollapsibleTrigger>
      <CollapsibleContent className="pl-4 space-y-1">
        {sectionsList.map(renderSectionItem)}
      </CollapsibleContent>
    </Collapsible>
  );

  const frontMatterSections = sections.filter(section => 
      ['title', 'abstract', 'acknowledgments'].includes(section.type || '')
    );
    
    const mainContentSections = sections.filter(section =>
      !['title', 'abstract', 'acknowledgments', 'references', 'appendix'].includes(section.type || '')
    );
    
    const backMatterSections = sections.filter(section =>
      ['references', 'appendix'].includes(section.type || '')
  );

  return (
    <div className="space-y-4">
           {frontMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Front Matter',
            frontMatterSections,
            'frontMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {mainContentSections.length > 0 && (
          renderCollapsibleSection(
            'Main Content',
            mainContentSections,
            'mainContent',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
        {backMatterSections.length > 0 && (
          renderCollapsibleSection(
            'Back Matter',
            backMatterSections,
            'backMatter',
            <BookOpen className="w-4 h-4 mr-2" />
          )
        )}
    </div>
  );
};

// File: src/components/thesis/toolbar/CollaboratorSection.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { UserPlus, Loader2 } from 'lucide-react';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CollaboratorInviteForm } from '@/components/collaboration/CollaboratorInviteForm';
import { useToast } from '@/hooks/use-toast';
import { CollaboratorWithProfile } from '@/types/collaborator';

interface CollaboratorSectionProps {
  collaborators: CollaboratorWithProfile[];
  thesisId: string;
  thesisTitle: string;
  canManageCollaborators: boolean;
  isAdmin: boolean;
}

export const CollaboratorSection = ({
  collaborators,
  thesisId,
  thesisTitle,
  canManageCollaborators,
  isAdmin
}: CollaboratorSectionProps) => {
  const { toast } = useToast();
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);
  const [isInviting, setIsInviting] = useState(false);

  console.log('CollaboratorSection props:', {
    collaboratorsCount: collaborators.length,
    thesisId,
    canManageCollaborators,
    isAdmin
  });

  const handleInviteSuccess = () => {
    toast({
      title: "Success",
      description: "Collaborator has been invited successfully.",
    });
    setIsPopoverOpen(false);
    setIsInviting(false);
  };

  const handleInviteError = (error: Error) => {
    toast({
      title: "Error",
      description: error.message || "Failed to invite collaborator. Please try again.",
      variant: "destructive",
    });
    setIsInviting(false);
  };

  // Show the button for editors, owners, and admins
  const shouldShowAddButton = canManageCollaborators || isAdmin;

  return (
    <div className="flex items-center gap-2">
      {shouldShowAddButton && (
        <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="gap-2"
              disabled={isInviting}
            >
              {isInviting ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <UserPlus className="w-4 h-4" />
              )}
              {isInviting ? 'Inviting...' : 'Add Collaborator'}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80 p-4">
            <div className="space-y-4">
              <h4 className="font-medium leading-none">Invite Collaborator</h4>
              <p className="text-sm text-muted-foreground">
                Send an invitation to collaborate on this thesis.
              </p>
              <CollaboratorInviteForm
                thesisId={thesisId}
                thesisTitle={thesisTitle}
                onInviteSuccess={handleInviteSuccess}
                onInviteError={handleInviteError}
                isAdmin={isAdmin}
                setIsInviting={setIsInviting}
              />
            </div>
          </PopoverContent>
        </Popover>
      )}
    </div>
  );
};

// File: src/components/thesis/toolbar/CollaboratorsList.tsx

import React from 'react';
import { Users } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CollaboratorWithProfile } from '@/types/collaborator';

interface CollaboratorsListProps {
  collaborators: CollaboratorWithProfile[];
  thesisId: string;
}

export const CollaboratorsList = ({ collaborators, thesisId }: CollaboratorsListProps) => {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="gap-2"
        >
          <Users className="w-4 h-4" />
          Collaborators ({collaborators.length})
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80">
        <ScrollArea className="h-[200px] pr-4">
          <div className="space-y-2">
            {collaborators.map((collaborator) => (
              <div
                key={collaborator.user_id}
                className="flex items-center justify-between p-2 bg-muted rounded-lg"
              >
                <div className="flex items-center gap-2">
                  <span className="text-sm">{collaborator.profiles?.email || collaborator.user_id}</span>
                  <Badge variant="secondary" className="text-xs">
                    {collaborator.role}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </PopoverContent>
    </Popover>
  );
};

// File: src/components/thesis/tracker/ThesisTracker.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Clock, BookOpen, CheckCircle, AlertCircle } from 'lucide-react';
import { motion } from 'framer-motion';
import { Thesis } from '@/types/thesis';

interface ThesisTrackerProps {
  thesis: Thesis;
}

export const ThesisTracker = ({ thesis }: ThesisTrackerProps) => {
  // Calculate overall progress
  const calculateProgress = () => {
    const allSections = [
      ...thesis.frontMatter,
      ...thesis.chapters.flatMap(chapter => chapter.sections),
      ...thesis.backMatter
    ];
    
    const completedSections = allSections.filter(section => 
      section.content && section.content.trim().length > 0
    ).length;
    
    return Math.round((completedSections / allSections.length) * 100);
  };

  // Get recent activity
  const getLastUpdateDate = () => {
    return new Date(thesis.updated_at).toLocaleDateString();
  };

  const progress = calculateProgress();

  return (
    <Card className="p-6 space-y-6 bg-white/50 backdrop-blur-sm border-2 border-primary/10 shadow-xl rounded-xl">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <BookOpen className="w-5 h-5 text-primary" />
          Thesis Progress Tracker
        </h3>
        
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Overall Progress</span>
            <span>{progress}%</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        <div className="grid grid-cols-2 gap-4 mt-4">
          <motion.div 
            whileHover={{ scale: 1.02 }}
            className="p-4 rounded-lg bg-white/30 space-y-2"
          >
            <div className="flex items-center gap-2 text-sm font-medium">
              <Clock className="w-4 h-4 text-primary" />
              Last Updated
            </div>
            <p className="text-sm text-muted-foreground">{getLastUpdateDate()}</p>
          </motion.div>

          <motion.div 
            whileHover={{ scale: 1.02 }}
            className="p-4 rounded-lg bg-white/30 space-y-2"
          >
            <div className="flex items-center gap-2 text-sm font-medium">
              <CheckCircle className="w-4 h-4 text-green-500" />
              Completed Sections
            </div>
            <p className="text-sm text-muted-foreground">
              {thesis.chapters.filter(chapter => 
                chapter.sections.every(section => section.content?.length > 0)
              ).length} / {thesis.chapters.length}
            </p>
          </motion.div>
        </div>

        <div className="mt-4">
          <h4 className="text-sm font-medium mb-2">Section Status</h4>
          <div className="space-y-2">
            {thesis.chapters.map((chapter, index) => (
              <div key={chapter.id} className="flex items-center justify-between text-sm">
                <span>{chapter.title}</span>
                <div className="flex items-center gap-2">
                  {chapter.sections.every(section => section.content?.length > 0) ? (
                    <CheckCircle className="w-4 h-4 text-green-500" />
                  ) : (
                    <AlertCircle className="w-4 h-4 text-yellow-500" />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </Card>
  );
};

// File: src/components/ui/LoadingButton.tsx

import React from 'react';
import { Button } from './button';
import { ButtonProps } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';

interface LoadingButtonProps extends ButtonProps {
  loading?: boolean;
}

export const LoadingButton: React.FC<LoadingButtonProps> = ({
  children,
  loading = false,
  disabled,
  ...props
}) => {
  return (
    <Button {...props} disabled={disabled || loading}>
      {loading ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Loading...
        </>
      ) : (
        children
      )}
    </Button>
  );
};

// File: src/components/ui/TaskInput.tsx

import React from 'react';
import { Input } from './input';
import { CheckCircle, Circle } from 'lucide-react';
import { Button } from './button';

interface TaskInputProps {
  id: string;
  description: string;
  status: 'pending' | 'in progress' | 'completed' | 'on hold';
  onChangeDescription: (newDescription: string) => void;
  onToggleStatus: (newStatus: 'pending' | 'in progress' | 'completed' | 'on hold') => void;
  dueDate?: string;
  priority?: 'high' | 'medium' | 'low';
}

export const TaskItem: React.FC<TaskInputProps> = ({
  id,
  description,
  status,
  onChangeDescription,
    onToggleStatus,
  dueDate,
    priority
}) => {

  const handleToggleStatus = () => {
    if(status === 'pending') return onToggleStatus('in progress')
    if(status === 'in progress') return onToggleStatus('completed')
    if(status === 'completed') return onToggleStatus('on hold')
     if(status === 'on hold') return onToggleStatus('pending')
  }

    const getStatusIcon = () => {
        switch(status){
            case 'completed':
                return <CheckCircle className="h-4 w-4 text-green-500" />;
            default:
                return <Circle className="h-4 w-4 text-muted-foreground" />;
        }
    }

  return (
    <div className="flex items-center gap-2 p-2 rounded-md group hover:bg-accent/10">
      <Button
        variant="ghost"
        size="sm"
        onClick={handleToggleStatus}
        className="h-8 w-8 p-0"
      >
        {getStatusIcon()}
      </Button>
      <Input
        value={description}
        onChange={(e) => onChangeDescription(e.target.value)}
        className="bg-transparent border-none flex-1 focus-visible:ring-0"
        placeholder="Add a new task"
      />
    </div>
  );
};

// File: src/components/ui/accordion.tsx

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// File: src/components/ui/alert-dialog.tsx

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// File: src/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


// File: src/components/ui/aspect-ratio.tsx

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


// File: src/components/ui/avatar.tsx

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// File: src/components/ui/badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


// File: src/components/ui/breadcrumb.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


// File: src/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// File: src/components/ui/calendar.tsx

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


// File: src/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


// File: src/components/ui/carousel.tsx

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


// File: src/components/ui/chart.tsx

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


// File: src/components/ui/checkbox.tsx

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


// File: src/components/ui/collapsible.tsx

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


// File: src/components/ui/command.tsx

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


// File: src/components/ui/context-menu.tsx

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


// File: src/components/ui/dialog.tsx

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


// File: src/components/ui/drawer.tsx

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// File: src/components/ui/dropdown-menu.tsx

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// File: src/components/ui/editor/editor-content.tsx

import React from 'react';
import { Editor, EditorContent as TipTapEditorContent } from '@tiptap/react';

interface EditorContentProps {
  editor: Editor | null;
}

export function EditorContent({ editor }: EditorContentProps) {
  if (!editor) {
    return null;
  }

  return (
    <div className="editor-content p-4">
      <TipTapEditorContent editor={editor} />
    </div>
  );
}

// File: src/components/ui/editor/editor-provider.tsx

import React from 'react';
import { Editor } from '@tiptap/react';
import { EditorContent } from '@tiptap/react';

interface EditorProviderProps {
  children: React.ReactNode;
  content: string;
  onUpdate?: (content: string) => void;
  editorRef?: React.MutableRefObject<Editor | null>;
}

export function EditorProvider({ children, content, onUpdate, editorRef }: EditorProviderProps) {
  const editor = editorRef?.current;

  React.useEffect(() => {
    if (editor && content !== editor.getHTML()) {
      editor.commands.setContent(content);
    }
  }, [content, editor]);

  return (
    <div className="editor-provider">
      {children}
      <EditorContent editor={editor} />
    </div>
  );
}

// File: src/components/ui/editor/toolbar.tsx

import React from 'react';
import { Editor } from '@tiptap/react';

interface ToolbarProps {
  editor: Editor | null;
  children: React.ReactNode;
}

export function Toolbar({ editor, children }: ToolbarProps) {
  if (!editor) {
    return null;
  }

  return (
    <div className="editor-toolbar flex flex-wrap gap-1 p-2 border-b">
      {children}
    </div>
  );
}

// File: src/components/ui/editor.tsx

import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Underline from '@tiptap/extension-underline';
import Link from '@tiptap/extension-link';
import Image from '@tiptap/extension-image';
import Table from '@tiptap/extension-table';
import TableRow from '@tiptap/extension-table-row';
import TableCell from '@tiptap/extension-table-cell';
import TableHeader from '@tiptap/extension-table-header';
import TextAlign from '@tiptap/extension-text-align';
import { Button } from './button';
import {
  Bold,
  Italic,
  Underline as UnderlineIcon,
  Link as LinkIcon,
  Image as ImageIcon,
  Table as TableIcon,
  AlignLeft,
  AlignCenter,
  AlignRight,
  List,
  ListOrdered,
} from 'lucide-react';

export function Editor() {
  const editor = useEditor({
    extensions: [
      StarterKit,
      Underline,
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'text-primary underline',
        },
      }),
      Image.configure({
        HTMLAttributes: {
          class: 'rounded-lg max-w-full',
        },
      }),
      Table.configure({
        resizable: true,
        HTMLAttributes: {
          class: 'border-collapse table-auto w-full',
        },
      }),
      TableRow,
      TableHeader,
      TableCell,
      TextAlign.configure({
        types: ['heading', 'paragraph'],
      }),
    ],
    content: '',
    editorProps: {
      attributes: {
        class: 'prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl focus:outline-none',
      },
    },
  });

  if (!editor) {
    return null;
  }

  const addImage = () => {
    const url = window.prompt('Enter image URL');
    if (url) {
      editor.chain().focus().setImage({ src: url }).run();
    }
  };

  const addLink = () => {
    const url = window.prompt('Enter URL');
    if (url) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  const addTable = () => {
    editor.chain().focus().insertTable({ rows: 3, cols: 3 }).run();
  };

  return (
    <div className="editor-container border rounded-lg overflow-hidden">
      <div className="editor-toolbar border-b p-2 flex flex-wrap gap-2 bg-background">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().toggleBold().run()}
          className={editor.isActive('bold') ? 'bg-muted' : ''}
        >
          <Bold className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().toggleItalic().run()}
          className={editor.isActive('italic') ? 'bg-muted' : ''}
        >
          <Italic className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().toggleUnderline().run()}
          className={editor.isActive('underline') ? 'bg-muted' : ''}
        >
          <UnderlineIcon className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={addLink}
          className={editor.isActive('link') ? 'bg-muted' : ''}
        >
          <LinkIcon className="w-4 h-4" />
        </Button>
        <Button variant="ghost" size="sm" onClick={addImage}>
          <ImageIcon className="w-4 h-4" />
        </Button>
        <Button variant="ghost" size="sm" onClick={addTable}>
          <TableIcon className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().setTextAlign('left').run()}
          className={editor.isActive({ textAlign: 'left' }) ? 'bg-muted' : ''}
        >
          <AlignLeft className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().setTextAlign('center').run()}
          className={editor.isActive({ textAlign: 'center' }) ? 'bg-muted' : ''}
        >
          <AlignCenter className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().setTextAlign('right').run()}
          className={editor.isActive({ textAlign: 'right' }) ? 'bg-muted' : ''}
        >
          <AlignRight className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().toggleBulletList().run()}
          className={editor.isActive('bulletList') ? 'bg-muted' : ''}
        >
          <List className="w-4 h-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().toggleOrderedList().run()}
          className={editor.isActive('orderedList') ? 'bg-muted' : ''}
        >
          <ListOrdered className="w-4 h-4" />
        </Button>
      </div>
      <EditorContent editor={editor} className="p-4" />
    </div>
  );
}

// File: src/components/ui/form.tsx

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


// File: src/components/ui/hover-card.tsx

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


// File: src/components/ui/input-otp.tsx

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


// File: src/components/ui/input.tsx

import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  leftIcon?: React.ReactNode;
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, leftIcon, ...props }, ref) => {
    return (
      <div className="relative">
        {leftIcon && (
          <div className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">
            {leftIcon}
          </div>
        )}
        <input
          type={type}
          className={cn(
            "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            leftIcon && "pl-10",
            className
          )}
          ref={ref}
          {...props}
        />
      </div>
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: src/components/ui/label.tsx

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// File: src/components/ui/menubar.tsx

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


// File: src/components/ui/navigation-menu.tsx

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


// File: src/components/ui/pagination.tsx

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


// File: src/components/ui/popover.tsx

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


// File: src/components/ui/progress.tsx

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// File: src/components/ui/radio-group.tsx

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


// File: src/components/ui/resizable.tsx

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


// File: src/components/ui/scroll-area.tsx

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


// File: src/components/ui/select.tsx

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


// File: src/components/ui/separator.tsx

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// File: src/components/ui/sheet.tsx

import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



// File: src/components/ui/sidebar.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


// File: src/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


// File: src/components/ui/slider.tsx

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


// File: src/components/ui/sonner.tsx

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


// File: src/components/ui/switch.tsx

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// File: src/components/ui/table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


// File: src/components/ui/tabs.tsx

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


// File: src/components/ui/tag-input.tsx

import React, { useState, KeyboardEvent } from 'react';
import { X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from './button';

interface TagInputProps {
  tags: string[];
  onChange: (tags: string[]) => void;
  placeholder?: string;
  className?: string;
}

export const TagInput = ({ tags, onChange, placeholder = 'Add tag...', className }: TagInputProps) => {
  const [input, setInput] = useState('');

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      if (input.trim()) {
        const newTag = input.trim();
        if (!tags.includes(newTag)) {
          onChange([...tags, newTag]);
        }
        setInput('');
      }
    } else if (e.key === 'Backspace' && !input && tags.length > 0) {
      onChange(tags.slice(0, -1));
    }
  };

  const removeTag = (tagToRemove: string) => {
    onChange(tags.filter(tag => tag !== tagToRemove));
  };

  return (
    <div className={cn("flex flex-wrap gap-2 p-2 border rounded-md bg-background", className)}>
      {tags.map((tag, index) => (
        <span
          key={`${tag}-${index}`}
          className="flex items-center gap-1 px-2 py-1 text-sm bg-muted rounded-md"
        >
          {tag}
          <Button
            type="button"
            variant="ghost"
            size="sm"
            className="h-4 w-4 p-0 hover:bg-transparent"
            onClick={() => removeTag(tag)}
          >
            <X className="h-3 w-3" />
          </Button>
        </span>
      ))}
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={handleKeyDown}
        placeholder={tags.length === 0 ? placeholder : ''}
        className="flex-1 min-w-[120px] bg-transparent outline-none placeholder:text-muted-foreground"
      />
    </div>
  );
};

// File: src/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


// File: src/components/ui/toast.tsx

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


// File: src/components/ui/toaster.tsx

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action && (
              <div className="mt-2">
                <button
                  onClick={action.onClick}
                  className="px-3 py-1 text-sm bg-primary text-white rounded-md hover:bg-primary/90"
                >
                  {action.label}
                </button>
              </div>
            )}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

// File: src/components/ui/toggle-group.tsx

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// File: src/components/ui/toggle.tsx

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// File: src/components/ui/tooltip.tsx

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// File: src/components/ui/use-toast.ts

export { useToast, toast } from "@/hooks/use-toast"

// File: src/components/version/VersionHistory.tsx

import React, { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { ThesisVersion } from '@/types/thesis';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { History, RotateCcw } from 'lucide-react';
import { format } from 'date-fns';

interface VersionHistoryProps {
  thesisId: string;
  onRestoreVersion: (version: ThesisVersion) => void;
}

export const VersionHistory = ({ thesisId, onRestoreVersion }: VersionHistoryProps) => {
  const [versions, setVersions] = useState<ThesisVersion[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    const fetchVersions = async () => {
      const { data, error } = await supabase
        .from('thesis_versions')
        .select(`
          *,
          profiles (
            email
          )
        `)
        .eq('thesis_id', thesisId)
        .order('version_number', { ascending: false });

      if (error) {
        console.error('Error fetching versions:', error);
        toast({
          title: 'Error',
          description: 'Failed to fetch version history',
          variant: 'destructive',
        });
        return;
      }

      setVersions(data);
    };

    fetchVersions();

    // Set up real-time subscription
    const channel = supabase
      .channel('thesis_versions')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'thesis_versions',
          filter: `thesis_id=eq.${thesisId}`,
        },
        (payload) => {
          console.log('Real-time update:', payload);
          fetchVersions();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [thesisId, toast]);

  const handleRestore = (version: ThesisVersion) => {
    onRestoreVersion(version);
    toast({
      title: 'Version Restored',
      description: `Restored to version ${version.version_number}`,
    });
  };

  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <History className="w-5 h-5" />
          Version History
        </CardTitle>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[400px] pr-4">
          <div className="space-y-4">
            {versions.map((version) => (
              <Card key={version.id} className="p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium">Version {version.version_number}</h4>
                    <p className="text-sm text-muted-foreground">
                      {format(new Date(version.created_at), 'PPpp')}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      By {(version as any).profiles?.email}
                    </p>
                    {version.description && (
                      <p className="mt-2 text-sm">{version.description}</p>
                    )}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleRestore(version)}
                    className="ml-4"
                  >
                    <RotateCcw className="w-4 h-4 mr-2" />
                    Restore
                  </Button>
                </div>
              </Card>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

// File: src/contexts/AuthContext.tsx

import React, { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Session, User } from '@supabase/supabase-js';

interface AuthContextType {
  isAuthenticated: boolean;
  loading: boolean;
  session: Session | null;
  user: User | null;
  handleLogout: () => Promise<void>;
  userId: string | null;
}

const AuthContext = createContext<AuthContextType>({
  isAuthenticated: false,
  loading: true,
  session: null,
  user: null,
  handleLogout: async () => {},
  userId: null,
});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      setSession(null);
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  const value = {
    isAuthenticated: !!session,
    loading,
    session,
    user: session?.user ?? null,
    handleLogout,
    userId: session?.user?.id ?? null,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// File: src/contexts/LanguageContext.tsx

import React, { createContext, useContext, useState } from 'react';

type Language = 'en' | 'fr' | 'ar';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  dir: 'ltr' | 'rtl';
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  console.log('üåç Language Provider rendering');
  const [language, setLanguage] = useState<Language>('en');

  const value = {
    language,
    setLanguage,
    dir: language === 'ar' ? 'rtl' as const : 'ltr' as const
  };

  return (
    <LanguageContext.Provider value={value}>
      <div dir={value.dir} lang={language}>
        {children}
      </div>
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    console.error('‚ùå useLanguage must be used within a LanguageProvider');
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}

// File: src/contexts/auth/useSession.ts

import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Session } from '@supabase/supabase-js';

export const useSession = () => {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('üîê Checking session...');
    
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false);
    });

    // Listen for changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      console.log('üîÑ Auth state changed:', _event);
      setSession(session);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  return {
    session,
    loading,
    isAuthenticated: !!session,
    user: session?.user ?? null,
  };
};

// File: src/contexts/auth/userRole.ts

export type UserRole = 'admin' | 'user' | 'guest';

export const getUserRole = (email: string | undefined): UserRole => {
  if (!email) return 'guest';
  // You can implement your role logic here
  return email.includes('admin') ? 'admin' : 'user';
};

// File: src/hooks/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


// File: src/hooks/use-toast.ts

import * as React from "react"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = {
  id: string
  title?: string
  description?: string
  action?: {
    label: string
    onClick: () => void
  }
  variant?: "default" | "destructive"
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
              }
            : t
        ),
      }
    }

    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      title: props.title,
      description: props.description,
      action: props.action,
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(() => memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

// File: src/hooks/useCitationManager.ts

// src/hooks/useCitationManager.ts

import { useState } from 'react';
import { Citation } from '@/types/thesis';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from './use-toast';
import { useQuery } from '@tanstack/react-query';

export const useCitationManager = (thesisId: string) => {
    const { toast } = useToast();
  const [selectedCitation, setSelectedCitation] = useState<Citation | null>(null);
  const [searchDialogOpen, setSearchDialogOpen] = useState(false);
  
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<'all' | Citation['type']>('all');
  const [sortField, setSortField] = useState<'year' | 'author' | 'text'>('year');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');

    const {
        data: citations,
        isLoading,
        error,
        refetch
    } = useQuery({
      queryKey: ['citations', thesisId],
        queryFn: async () => {
          if(!thesisId){
            throw new Error('Thesis ID is required to load citations');
          }

        const { data, error } = await supabase
            .from('citations')
            .select('*')
            .eq('thesis_id', thesisId)
            .order('created_at', { ascending: false });

          if (error) {
                console.error('Error fetching citations:', error);
                throw error;
            }

            return data as Citation[];
      },
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 1,
    });

    const addCitation = async (citation: Omit<Citation, 'thesis_id'>) => {
        try {
      const now = new Date().toISOString();
        const newCitation: Citation = {
        ...citation,
        thesis_id: thesisId,
          type: citation.type || 'article',
        created_at: now,
        updated_at: now
        };

        const { error } = await supabase
            .from('citations')
            .insert([newCitation]);

          if (error) throw error;

        toast({
          title: "Success",
          description: "Citation added successfully",
          });

            await refetch()
        } catch (error: any) {
          console.error('Error adding citation:', error);
            toast({
                title: "Error",
                description: "Failed to add citation",
                variant: "destructive",
            });
        }
    };


  const deleteCitation = async (id: string) => {
    try {
        const { error } = await supabase
        .from('citations')
        .delete()
            .eq('id', id);
            
      if (error) throw error;

        toast({
          title: "Success",
            description: "Citation deleted successfully",
        });

          await refetch();
        } catch (error) {
        console.error('Error deleting citation:', error);
          toast({
                title: "Error",
                description: "Failed to delete citation",
              variant: "destructive",
          });
    }
  };

  const handleAddCitation = () => {
    setSearchDialogOpen(true);
  };

  const handleSearchResult = (citation: Omit<Citation, 'thesis_id'>) => {
    addCitation(citation);
    setSearchDialogOpen(false);
  };

  const getFilteredAndSortedCitations = () => {
      if (!citations) return [];
    let filtered = [...citations];
    
    if (searchTerm) {
      filtered = filtered.filter(citation => 
        citation.text.toLowerCase().includes(searchTerm.toLowerCase()) ||
        citation.authors.some(author => 
          author.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

    if (filterType !== 'all') {
      filtered = filtered.filter(citation => citation.type === filterType);
    }

    filtered.sort((a, b) => {
      let comparison = 0;
      switch (sortField) {
        case 'year':
          comparison = a.year.localeCompare(b.year);
          break;
        case 'author':
          comparison = (a.authors[0] || '').localeCompare(b.authors[0] || '');
          break;
        case 'text':
          comparison = a.text.localeCompare(b.text);
          break;
      }
      return sortDirection === 'asc' ? comparison : -comparison;
    });

    return filtered;
  };

  return {
    citations: citations || [],
    isLoading,
    error,
    selectedCitation,
    setSelectedCitation,
    searchDialogOpen,
    setSearchDialogOpen,
    searchTerm,
    setSearchTerm,
    filterType,
    setFilterType,
    sortField,
    setSortField,
    sortDirection,
    setSortDirection,
    addCitation,
    deleteCitation,
    handleAddCitation,
    handleSearchResult,
      getFilteredAndSortedCitations,
      refetch
  };
};

// File: src/hooks/useCollaboratorPermissions.tsx

import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Profile } from '@/types/profile';
import { CollaboratorWithProfile } from '@/types/collaborator';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';

export const useCollaboratorPermissions = (thesisId: string) => {
  const [collaborators, setCollaborators] = useState<CollaboratorWithProfile[]>([]);
  const [canManageCollaborators, setCanManageCollaborators] = useState(false);
  const [currentUserRole, setCurrentUserRole] = useState<string | null>(null);
  const [userProfile, setUserProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { toast } = useToast();
  const navigate = useNavigate();

  const checkPermissions = async () => {
    try {
      setLoading(true);
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('No session found, redirecting to auth...');
        navigate('/auth');
        return;
      }

      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select(`
          *,
          roles (
            name
          )
        `)
        .eq('id', session.user.id)
        .single();

      if (profileError) {
        console.error('Error fetching profile:', profileError);
        setError(profileError);
        return;
      }

      if (profileData) {
        setUserProfile(profileData as Profile);
        console.log('User profile:', profileData);
      }

      const { data: collaboratorData, error: collaboratorError } = await supabase
        .from('thesis_collaborators')
        .select('role')
        .eq('thesis_id', thesisId)
        .eq('user_id', session.user.id)
        .single();

      if (collaboratorError && collaboratorError.code !== 'PGRST116') {
        console.error('Error checking permissions:', collaboratorError);
        setError(collaboratorError);
        return;
      }

      const role = collaboratorData?.role;
      setCurrentUserRole(role);
      setCanManageCollaborators(
        role === 'owner' ||
        role === 'admin' ||
        profileData?.roles?.name === 'admin'
      );
    } catch (error: any) {
      console.error('Error checking permissions:', error);
      setError(error);
    } finally {
      setLoading(false);
    }
  };

  const fetchCollaborators = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        navigate('/auth');
        return;
      }

      const { data, error } = await supabase
        .from('thesis_collaborators')
        .select(`
          user_id,
          role,
          created_at,
          profiles (
            id,
            email,
            role_id,
            roles (
              name
            )
          )
        `)
        .eq('thesis_id', thesisId);

      if (error) {
        console.error('Error fetching collaborators:', error);
        setError(error);
        return;
      }

      if (data) {
        setCollaborators(data as CollaboratorWithProfile[]);
      }
    } catch (error: any) {
      console.error('Error fetching collaborators:', error);
      setError(error);
    }
  };

  useEffect(() => {
    if (thesisId) {
      checkPermissions();
      fetchCollaborators();
    }
  }, [thesisId]);

  return {
    collaborators,
    canManageCollaborators,
    currentUserRole,
    userProfile,
    loading,
    error,
    fetchCollaborators
  };
};

// File: src/hooks/useDashboardData.tsx

import { useUserProfile } from './useUserProfile';
import { useThesisStats } from './useThesisStats';

export const useDashboardData = (userId: string | null) => {
  const { 
    data: userProfile, 
    isLoading: isProfileLoading, 
    error: profileError 
  } = useUserProfile(userId);

  const { 
    data: thesesStats, 
    isLoading: isStatsLoading, 
    error: statsError 
  } = useThesisStats(userId);

  return {
    userProfile,
    thesesStats,
    isLoading: isProfileLoading || isStatsLoading,
    error: profileError || statsError,
  };
};

// File: src/hooks/useForm.ts

import { useState, useCallback } from 'react';

interface FormState<T> {
  values: T;
  errors: Partial<Record<keyof T, string>>;
  isSubmitting: boolean;
}

interface UseFormOptions<T> {
  initialValues: T;
  validate?: (values: T) => Partial<Record<keyof T, string>>;
  onSubmit: (values: T) => Promise<void> | void
}

export const useForm = <T extends Record<string, any>>({
  initialValues,
  validate,
  onSubmit,
}: UseFormOptions<T>) => {
  const [formState, setFormState] = useState<FormState<T>>({
    values: initialValues,
    errors: {},
    isSubmitting: false,
  });

   const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
        setFormState(prev => ({
         ...prev,
        values: {
            ...prev.values,
            [name]: value
          },
          errors: {
            ...prev.errors,
              [name]: undefined
            }
        }));
      }, []);


    const setFieldValue = useCallback((field: keyof T, value: any) => {
     setFormState(prev => ({
        ...prev,
          values: {
            ...prev.values,
            [field]: value
          },
        errors: {
            ...prev.errors,
              [field]: undefined
            }
     }))
    }, []);

    const handleArrayChange = useCallback((field: keyof T, index: number, value: any) => {
      setFormState(prev => {
           const values = Array.isArray(prev.values[field]) ? [...(prev.values[field] as any[])] : []
          values[index] = value;
           return {
                ...prev,
                values: {
                    ...prev.values,
                    [field]: values
                 },
                 errors: {
                    ...prev.errors,
                      [field]: undefined
                   }
               }
       })
    }, []);


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validate) {
         const errors = validate(formState.values);
        setFormState(prev => ({
           ...prev,
            errors: errors
         }))
        if (Object.keys(errors).length > 0) return;
    }

    setFormState(prev => ({
        ...prev,
         isSubmitting: true,
        }))

    try {
      await onSubmit(formState.values);
    } finally {
        setFormState(prev => ({
         ...prev,
         isSubmitting: false,
        }))
    }
  };

  return {
    ...formState,
     setFieldValue,
    handleArrayChange,
    handleChange,
    handleSubmit,
  };
};

// File: src/hooks/useNotifications.ts

import { useState, useEffect, useRef, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Notification } from '../components/collaboration/types';

export const useNotifications = (thesisId: string) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const processedNotificationsRef = useRef<Set<string>>(new Set());
  const subscriptionRef = useRef<any>(null);
  const lastToastTime = useRef<number>(0);
  const TOAST_COOLDOWN = 5000; // 5 seconds between toasts

  const fetchNotifications = useCallback(async () => {
    try {
      console.log('üîÑ Fetching notifications for thesis:', thesisId);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('‚ùå No authenticated user found');
        return;
      }

      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('thesis_id', thesisId)
        .eq('user_id', userData.user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error fetching notifications:', error);
        throw error;
      }

      console.log('‚úÖ Fetched notifications:', data?.length);
      setNotifications(data || []);
      data?.forEach(notification => {
        processedNotificationsRef.current.add(notification.id);
      });
    } catch (error) {
      console.error('‚ùå Error in fetchNotifications:', error);
      toast({
        title: "Error",
        description: "Failed to load notifications",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [thesisId, toast]);

  const handleNewNotification = useCallback((payload: any) => {
    console.log('üì® New notification received:', payload);
    const notification = payload.new;
    
    if (processedNotificationsRef.current.has(notification.id)) {
      console.log('üîÑ Notification already processed, skipping:', notification.id);
      return;
    }

    console.log('‚ú® Processing new notification:', notification.id);
    processedNotificationsRef.current.add(notification.id);
    
    setNotifications(prev => {
      const exists = prev.some(n => n.id === notification.id);
      if (exists) {
        console.log('üîÑ Notification already in state, skipping:', notification.id);
        return prev;
      }
      console.log('‚ûï Adding new notification to state:', notification.id);
      return [notification, ...prev];
    });

    // Only show toast if enough time has passed since the last one
    const now = Date.now();
    if (now - lastToastTime.current >= TOAST_COOLDOWN) {
      lastToastTime.current = now;
      toast({
        title: "New Notification",
        description: notification.message,
      });
    }
  }, [toast]);

  const markAsRead = useCallback(async (notificationId: string) => {
    try {
      console.log('üìù Marking notification as read:', notificationId);
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId);

      if (error) {
        console.error('‚ùå Error marking notification as read:', error);
        throw error;
      }

      setNotifications(prev =>
        prev.map(n =>
          n.id === notificationId ? { ...n, read: true } : n
        )
      );
      console.log('‚úÖ Notification marked as read:', notificationId);
    } catch (error) {
      console.error('‚ùå Error in markAsRead:', error);
      toast({
        title: "Error",
        description: "Failed to mark notification as read",
        variant: "destructive",
      });
    }
  }, [toast]);

  useEffect(() => {
    console.log('üîÑ Setting up notifications subscription for thesis:', thesisId);
    
    fetchNotifications();

    const channel = supabase
      .channel('notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'notifications',
          filter: `thesis_id=eq.${thesisId}`,
        },
        handleNewNotification
      )
      .subscribe(status => {
        console.log('üì° Notification subscription status:', status);
      });

    subscriptionRef.current = channel;

    return () => {
      console.log('üßπ Cleaning up notifications subscription');
      if (subscriptionRef.current) {
        supabase.removeChannel(subscriptionRef.current);
      }
      processedNotificationsRef.current.clear();
    };
  }, [thesisId, fetchNotifications, handleNewNotification]);

  return {
    notifications,
    loading,
    markAsRead,
  };
};

// File: src/hooks/useReferenceManager.ts

// src/hooks/useReferenceManager.ts
import { useState } from 'react';
import { Reference } from '@/types/thesis';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';

export const useReferenceManager = (thesisId: string) => {
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<'all' | Reference['type']>('all');
  const [sortField, setSortField] = useState<'year' | 'author' | 'title'>('year');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const { toast } = useToast();

   const {
        data: references,
        isLoading,
        error,
        refetch
    } = useQuery({
        queryKey: ['references', thesisId],
      queryFn: async () => {
          if(!thesisId){
            throw new Error('Thesis ID is required to load references');
          }

          const { data, error } = await supabase
            .from('references')
              .select('*')
              .eq('thesis_id', thesisId)
          .order('created_at', { ascending: false });

          if (error) {
            console.error('Error fetching references:', error);
            throw error;
          }
            return data as Reference[];
      },
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 1,
    });

    const addReference = async (reference: Reference) => {
        try {
            setLoading(true);
            const now = new Date().toISOString();
        const newReference = {
          ...reference,
            thesis_id: thesisId,
            created_at: now,
              updated_at: now
        };

        const { error } = await supabase
            .from('references')
              .insert([newReference])

        if (error) throw error;
            toast({
                title: "Success",
                description: "Reference added successfully",
                });

            await refetch();

    } catch (error) {
      console.error('Error adding reference:', error);
        toast({
              title: "Error",
            description: "Failed to add reference",
              variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    const deleteReference = async (id: string) => {
      try {
        setLoading(true);
        const { error } = await supabase
          .from('references')
          .delete()
          .eq('id', id);

        if (error) throw error;
          toast({
            title: "Success",
              description: "Reference deleted successfully",
          });
          await refetch();
      } catch (error) {
        console.error('Error deleting reference:', error);
        toast({
            title: "Error",
            description: "Failed to delete reference",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };
  
    const getFilteredAndSortedReferences = () => {
        if(!references) return [];
        let filtered = [...references];
        
    if (searchTerm) {
      filtered = filtered.filter(reference => 
        reference.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        reference.authors.some(author => 
          author.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

        if (filterType !== 'all') {
          filtered = filtered.filter(reference => reference.type === filterType);
        }

    filtered.sort((a, b) => {
      let comparison = 0;
      switch (sortField) {
        case 'year':
          comparison = a.year.localeCompare(b.year);
          break;
        case 'author':
          comparison = (a.authors[0] || '').localeCompare(b.authors[0] || '');
          break;
          case 'title':
            comparison = a.title.localeCompare(b.title);
            break;
      }
      return sortDirection === 'asc' ? comparison : -comparison;
    });

    return filtered;
  };

  return {
    references: references || [],
      isLoading,
      error,
      searchTerm,
    setSearchTerm,
    filterType,
    setFilterType,
    sortField,
    setSortField,
    sortDirection,
      setSortDirection,
      addReference,
      deleteReference,
    getFilteredAndSortedReferences,
      refetch
  };
};

// File: src/hooks/useThesesList.ts

import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface ThesisListItem {
  id: string;
  title: string;
  thesis_collaborators?: {
    user_id: string;
    role: string;
  }[];
}

export const useThesesList = () => {
  const [thesisList, setThesisList] = useState<ThesisListItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const fetchTheses = async () => {
    try {
      console.log('üìö Fetching theses list...');
      setIsLoading(true);
      setError(null);

      const { data: session } = await supabase.auth.getSession();
      if (!session?.session?.user) {
        console.error('‚ùå No authenticated user found');
        setError('Please sign in to view your theses');
        toast({
          title: "Authentication Required",
          description: "Please sign in to view your theses",
          variant: "destructive",
        });
        return;
      }

      console.log('üîë User authenticated, fetching theses for user:', session.session.user.id);

      // First get all thesis IDs the user has access to
      const { data: collaborations, error: collabError } = await supabase
        .from('thesis_collaborators')
        .select('thesis_id')
        .eq('user_id', session.session.user.id);

      if (collabError) {
        console.error('‚ùå Error fetching collaborations:', collabError);
        throw collabError;
      }

      if (!collaborations || collaborations.length === 0) {
        console.log('‚ÑπÔ∏è No theses found for user');
        setThesisList([]);
        return;
      }

      const thesisIds = collaborations.map(c => c.thesis_id);
      console.log('üìã Found thesis IDs:', thesisIds);

      // Then fetch the actual theses
      const { data: thesesData, error: thesesError } = await supabase
        .from('theses')
        .select(`
          id,
          title,
          thesis_collaborators (
            user_id,
            role
          )
        `)
        .in('id', thesisIds);

      if (thesesError) {
        console.error('‚ùå Error fetching theses:', thesesError);
        throw thesesError;
      }

      console.log('‚úÖ Theses loaded successfully:', thesesData?.length || 0, 'theses');
      setThesisList(thesesData || []);

    } catch (error: any) {
      console.error('‚ùå Unexpected error:', error);
      setError(error.message);
      toast({
        title: "Error",
        description: "Failed to load your theses. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    thesisList,
    isLoading,
    error,
    fetchTheses
  };
};

// File: src/hooks/useThesis.ts

import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

export const useThesis = (thesisId: string) => {
  const [thesis, setThesis] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchThesis = async () => {
      try {
        const { data, error } = await supabase
          .from('theses')
          .select('*')
          .eq('id', thesisId)
          .single();

        if (error) throw error;
        setThesis(data);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (thesisId) {
      fetchThesis();
    }
  }, [thesisId]);

  return { thesis, loading, error };
};

// File: src/hooks/useThesisAutosave.ts

// src/hooks/useThesisAutosave.ts
import { useCallback, useEffect, useRef } from 'react';
import { debounce } from 'lodash';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from './use-toast';
import { Thesis } from '@/types/thesis';
import { Json } from '@/integrations/supabase/types';

export const useThesisAutosave = (thesis: Thesis | null) => {
  const { toast } = useToast();
  const lastSavedContent = useRef<string>(thesis ? JSON.stringify(thesis) : '');
  const lastToastTime = useRef<number>(0);
  const TOAST_COOLDOWN = 5000; // 5 seconds between toasts

  const saveThesis = useCallback(async (thesisData: Thesis) => {
      if (!thesisData) return;

      try {
        console.log('Auto-saving thesis:', thesisData.id);

        const serializedContent = JSON.stringify({
          metadata: thesisData.metadata,
          frontMatter: thesisData.frontMatter,
          chapters: thesisData.chapters,
          backMatter: thesisData.backMatter
        }) as unknown as Json;

        const { error, data } = await supabase
            .from('theses')
            .update({
              content: serializedContent,
              updated_at: new Date().toISOString()
            })
            .eq('id', thesisData.id)
            .select()
            .maybeSingle();

          if (error) throw error;

          if (!data) {
                console.log('Thesis was not found, skipping auto-save:', thesisData.id);
              return;
          }

        lastSavedContent.current = JSON.stringify(thesisData);
          console.log('Auto-save successful:', { id: thesisData.id, updateTime: data.updated_at });
          // Only show toast if enough time has passed since the last one
          const now = Date.now();
          if (now - lastToastTime.current >= TOAST_COOLDOWN) {
            lastToastTime.current = now;
            toast({
                title: "Auto-saved",
                description: "Your thesis has been automatically saved.",
            });
          }
      } catch (error) {
          console.error('Error auto-saving thesis:', error);
          toast({
              title: "Auto-save failed",
              description: "Failed to auto-save your thesis. Your changes will be saved on next successful attempt.",
              variant: "destructive",
          });
      }
  }, [toast]);


  const debouncedSave = useCallback(
    debounce((thesisData: Thesis) => {
      const currentContent = JSON.stringify(thesisData);
      if (currentContent !== lastSavedContent.current) {
        saveThesis(thesisData);
      }
    }, 2000),
    [saveThesis]
  );

  useEffect(() => {
    if (thesis) {
      debouncedSave(thesis);
    }
    return () => {
      debouncedSave.cancel();
    };
  }, [thesis, debouncedSave]);
};

// File: src/hooks/useThesisData.ts

// src/hooks/useThesisData.ts
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Thesis } from '@/types/thesis';
import { useToast } from '@/hooks/use-toast';
import { validate as validateUUID } from 'uuid';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { Json } from '@/integrations/supabase/types';

export const useThesisData = (thesisId: string | undefined) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const {
    data: thesis,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['thesis', thesisId],
    queryFn: async () => {
        if (!thesisId) {
        console.log('No thesis ID provided');
          return null;
      }

      if (!validateUUID(thesisId)) {
        console.error('Invalid thesis ID format:', thesisId);
        throw new Error('Invalid thesis ID format');
      }

      try {
          console.log('üîç Fetching thesis with ID:', thesisId);

           const { data: session } = await supabase.auth.getSession();
        if (!session?.session?.user) {
          console.error('‚ùå No authenticated user found');
          throw new Error('Authentication required');
        }

        console.log('üë§ User authenticated:', session.session.user.email);

           const { data: fetchedThesis, error: fetchError } = await supabase
          .from('theses')
          .select(`
            *,
            thesis_collaborators (
              user_id,
              role,
              profiles (
                email
              )
            )
          `)
          .eq('id', thesisId)
          .maybeSingle();

        if (fetchError) {
          console.error("‚ùå Error fetching thesis:", fetchError);
          throw new Error(fetchError.message);
        }

          if (!fetchedThesis) {
          console.log('‚ö†Ô∏è No thesis found with ID:', thesisId);
            return null;
        }

        console.log('‚úÖ Thesis data loaded:', {
          id: fetchedThesis.id,
          title: fetchedThesis.title,
          collaboratorsCount: fetchedThesis.thesis_collaborators?.length
        });

        const parsedContent = typeof fetchedThesis.content === 'string'
          ? JSON.parse(fetchedThesis.content)
            : fetchedThesis.content;

        const formattedThesis: Thesis = {
          id: fetchedThesis.id,
            title: fetchedThesis.title,
            content: fetchedThesis.content,
            user_id: fetchedThesis.user_id,
            created_at: fetchedThesis.created_at,
            updated_at: fetchedThesis.updated_at,
            metadata: parsedContent?.metadata || {},
          frontMatter: parsedContent?.frontMatter?.map((section: any) => ({
                ...section,
                tasks: section.tasks || [],
            })) || [],
            chapters: parsedContent?.chapters?.map((chapter: any) => ({
                ...chapter,
                tasks: chapter.tasks || [],
                sections: chapter.sections?.map((section: any) => ({
                  ...section,
                  tasks: section.tasks || []
                })) || []
            })) || [],
            backMatter: parsedContent?.backMatter || [],
        };

        return formattedThesis;
      } catch (err: any) {
        console.error("‚ùå Error in thesis data hook:", err);
        toast({
          title: "Error",
          description: err.message || "Failed to load thesis data. Please try again.",
          variant: "destructive",
        });
        throw err;
      }
    },
    staleTime: 1000 * 60 * 5,
    gcTime: 1000 * 60 * 30,
      retry: 2,
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  const setThesis = (newThesis: Thesis | ((prev: Thesis | null) => Thesis | null)) => {
        queryClient.setQueryData(['thesis', thesisId], newThesis);
  };

  return { thesis, setThesis, isLoading, error };
};

// File: src/hooks/useThesisInitialization.ts

import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Thesis } from '@/types/thesis';
import { Json } from '@/integrations/supabase/types';

export const useThesisInitialization = (thesis: Thesis | null) => {
  const { toast } = useToast();

  useEffect(() => {
    const initializeThesis = async () => {
      // Only proceed if thesis is not null
      if (!thesis) {
        return;
      }

      try {
        console.log('Initializing thesis in database:', thesis.id);
        
        // Get current user
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        
        if (userError) {
          console.error('Error getting current user:', userError);
          throw userError;
        }

        if (!user) {
          throw new Error('No authenticated user found');
        }

        console.log('Current user:', user.id);

        // First get user profile to ensure it exists
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .maybeSingle();

        if (profileError) {
          console.error('Error fetching profile:', profileError);
          throw profileError;
        }

        console.log('User profile:', profile);

        // Check if thesis already exists
        const { data: existingThesis, error: checkError } = await supabase
          .from('theses')
          .select('*')
          .eq('id', thesis.id)
          .maybeSingle();

        if (checkError) {
          console.error('Error checking thesis:', checkError);
          throw checkError;
        }

        if (!existingThesis) {
          console.log('Creating new thesis with user_id:', user.id);
          
          // Create the thesis with the content
          const thesisContent = {
            frontMatter: thesis.frontMatter.map(section => ({
              ...section,
              figures: section.figures || [],
              tables: section.tables || [],
              citations: section.citations || [],
              references: section.references || []
            })),
            chapters: thesis.chapters.map(chapter => ({
              ...chapter,
              sections: chapter.sections.map(section => ({
                ...section,
                figures: section.figures || [],
                tables: section.tables || [],
                citations: section.citations || [],
                references: section.references || []
              }))
            })),
            backMatter: thesis.backMatter.map(section => ({
              ...section,
              figures: section.figures || [],
              tables: section.tables || [],
              citations: section.citations || [],
              references: section.references || []
            }))
          } as unknown as Json;

          // Insert thesis
          const { error: thesisError } = await supabase
            .from('theses')
            .insert({
              id: thesis.id,
              title: 'Untitled Thesis',
              content: thesisContent,
              user_id: user.id
            });

          if (thesisError) {
            console.error('Error creating thesis:', thesisError);
            throw thesisError;
          }

          // Add current user as owner
          const { error: collaboratorError } = await supabase
            .from('thesis_collaborators')
            .insert({
              thesis_id: thesis.id,
              user_id: user.id,
              role: 'owner'
            });

          if (collaboratorError) {
            console.error('Error adding thesis owner:', collaboratorError);
            // If we fail to add collaborator, delete the thesis
            await supabase
              .from('theses')
              .delete()
              .eq('id', thesis.id);
            throw collaboratorError;
          }

          console.log('Added user as thesis owner');
        }
      } catch (error: any) {
        console.error('Error in thesis initialization:', error);
        toast({
          title: "Error",
          description: error.message || "Failed to initialize thesis. Please try again.",
          variant: "destructive",
        });
      }
    };

    initializeThesis();
  }, [thesis?.id, toast]);
};

// File: src/hooks/useThesisRealtime.ts

import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Thesis } from '@/types/thesis';
import { useToast } from './use-toast';
import { debounce } from 'lodash';

export const useThesisRealtime = (
  thesisId: string | undefined,
  currentThesis: Thesis | null,
  setThesis: (thesis: Thesis | ((prev: Thesis | null) => Thesis | null)) => void
) => {
  const { toast } = useToast();

  useEffect(() => {
    if (!thesisId || !currentThesis) return;

    console.log('Setting up realtime subscription for thesis:', thesisId);

    // Create a debounced version of the notification toast
    const showUpdateNotification = debounce(() => {
      toast({
        title: "Thesis Updated",
        description: "Changes from another collaborator have been applied",
      });
    }, 5000); // Show notification at most once every 5 seconds

    let lastUpdateTime = new Date().toISOString();
    let lastProcessedContent = JSON.stringify(currentThesis);

    const channel = supabase
      .channel('thesis_changes')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'theses',
          filter: `id=eq.${thesisId}`
        },
        (payload) => {
          console.log('Received thesis update:', payload);
          
          // Skip if we're the ones who made the change
          if (payload.new.updated_at === currentThesis.updated_at) {
            console.log('Skipping own update');
            return;
          }

          // Skip if this update is too close to the last one we processed
          if (payload.new.updated_at <= lastUpdateTime) {
            console.log('Skipping duplicate/old update');
            return;
          }

          // Skip if the content hasn't actually changed
          const newContentStr = JSON.stringify(payload.new.content);
          if (newContentStr === lastProcessedContent) {
            console.log('Content unchanged, skipping update');
            return;
          }

          lastUpdateTime = payload.new.updated_at;
          lastProcessedContent = newContentStr;
          const newContent = payload.new.content;
          
          if (!newContent) {
            console.log('Update contained no content, skipping');
            return;
          }

          setThesis({
            ...currentThesis,
            ...payload.new,
            metadata: newContent.metadata || currentThesis.metadata,
            frontMatter: newContent.frontMatter || currentThesis.frontMatter,
            chapters: newContent.chapters || currentThesis.chapters,
            backMatter: newContent.backMatter || currentThesis.backMatter,
          });

          // Show notification about the update
          showUpdateNotification();
        }
      )
      .subscribe();

    // Cleanup
    return () => {
      console.log('Cleaning up realtime subscription');
      showUpdateNotification.cancel(); // Cancel any pending notifications
      supabase.removeChannel(channel);
    };
  }, [thesisId, currentThesis?.id]);
};

// File: src/hooks/useThesisStats.tsx

import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';

interface ThesisStats {
  total: number;
  inProgress: number;
  completed: number;
}

export const useThesisStats = (userId: string | null) => {
  return useQuery({
    queryKey: ['thesis-stats', userId],
    queryFn: async (): Promise<ThesisStats> => {
      console.log('üìä Fetching thesis stats for user:', userId);
      
      if (!userId) {
        console.log('‚ùå No user ID available for fetching thesis stats');
        throw new Error('User ID is required');
      }

      const { data: theses, error } = await supabase
        .from('thesis_collaborators')
        .select('role')
        .eq('user_id', userId);

      if (error) {
        console.error('‚ùå Error fetching thesis stats:', error);
        throw error;
      }

      console.log('‚úÖ Thesis stats fetched:', theses);

      return {
        total: theses?.length || 0,
        inProgress: theses?.filter(t => t.role === 'editor').length || 0,
        completed: theses?.filter(t => t.role === 'owner').length || 0,
      };
    },
    retry: 1,
    staleTime: 30000,
    enabled: !!userId,
  });
};

// File: src/hooks/useTranslation.ts

import { useLanguage } from "@/contexts/LanguageContext";
import { translations } from "@/utils/translations";

export function useTranslation() {
  const { language } = useLanguage();
  
  function t(key: string) {
    const keys = key.split('.');
    let current: any = translations[language];
    
    for (const k of keys) {
      if (current[k] === undefined) {
        console.warn(`Translation key "${key}" not found for language "${language}"`);
        return key;
      }
      current = current[k];
    }
    
    return current;
  }

  return { t };
}

// File: src/hooks/useUser.tsx

import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';

export const useUser = () => {
  const [userEmail, setUserEmail] = useState<string>('');
  const [userRole, setUserRole] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    let mounted = true;
    
    const loadProfile = async () => {
      try {
        console.log('Loading user profile...');
        setIsLoading(true);
        
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          console.log('No active session found, redirecting to auth...');
          if (mounted) {
            setIsLoading(false);
            navigate('/auth');
          }
          return;
        }

        const { data: profile, error } = await supabase
          .from('profiles')
          .select(`
            email,
            roles (
              name
            )
          `)
          .eq('id', session.user.id)
          .maybeSingle();

        if (error) {
          console.error('Error loading profile:', error);
          if (mounted) {
            setIsLoading(false);
            if (error.code === 'PGRST116') {
              console.log('Profile not found, redirecting to auth...');
              await handleLogout();
            }
          }
          return;
        }

        if (profile && mounted) {
          console.log('Profile loaded:', profile);
          setUserEmail(profile.email);
          setUserRole(profile.roles?.name || '');
        }
      } catch (error) {
        console.error('Error in loadProfile:', error);
        if (mounted) {
          navigate('/auth');
        }
      } finally {
        if (mounted) {
          setIsLoading(false);
        }
      }
    };

    loadProfile();

    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('Auth state changed:', event, session?.user?.email);
      
      if (event === 'SIGNED_OUT') {
        if (mounted) {
          setUserEmail('');
          setUserRole('');
          setIsLoading(false);
          navigate('/auth');
        }
      } else if (event === 'SIGNED_IN' && session) {
        if (mounted) {
          await loadProfile();
        }
      }
    });

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, [navigate]);

  const handleLogout = async () => {
    try {
      setIsLoading(true);
      setUserEmail('');
      setUserRole('');
      
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('Error during sign out:', error);
        toast({
          title: "Error signing out",
          description: error.message,
          variant: "destructive",
        });
      }
      
      console.log('Navigating to auth page...');
      navigate('/auth');
      
    } catch (error: any) {
      console.error('Error during logout:', error);
      toast({
        title: "Error signing out",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
      navigate('/auth');
    } finally {
      setIsLoading(false);
    }
  };

  return { userEmail, userRole, isLoading, handleLogout };
};

// File: src/hooks/useUserProfile.tsx

import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Profile } from '@/types/profile';

export const useUserProfile = (userId: string | null) => {
  return useQuery({
    queryKey: ['user-profile', userId],
    queryFn: async (): Promise<Profile | null> => {
      console.log('üë§ Fetching user profile for:', userId);
      
      if (!userId) {
        console.log('‚ùå No user ID available for fetching profile');
        throw new Error('User ID is required');
      }

      const { data: profile, error } = await supabase
        .from('profiles')
        .select(`
          *,
          roles (
            name
          )
        `)
        .eq('id', userId)
        .maybeSingle();

      if (error) {
        console.error('‚ùå Error fetching profile:', error);
        throw error;
      }

      console.log('‚úÖ Profile fetched:', profile);
      return profile;
    },
    retry: 1,
    staleTime: 30000,
    enabled: !!userId,
  });
};

// File: src/integrations/supabase/client.ts

import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xkwdfddamvuhucorwttw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhrd2RmZGRhbXZ1aHVjb3J3dHR3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzUzNzcwMDQsImV4cCI6MjA1MDk1MzAwNH0.6Ml1JDiKKsjSnM1z82bD9bVoiT_ZQmTRZaqtpxTPF2g";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// File: src/integrations/supabase/types.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      active_sessions: {
        Row: {
          id: string
          last_seen: string | null
          session_id: string
          user_id: string
        }
        Insert: {
          id?: string
          last_seen?: string | null
          session_id: string
          user_id: string
        }
        Update: {
          id?: string
          last_seen?: string | null
          session_id?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "active_sessions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: true
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      app_issues: {
        Row: {
          browser_info: string | null
          component_name: string | null
          created_at: string
          error_message: string
          error_stack: string | null
          id: string
          route_path: string | null
          user_id: string | null
        }
        Insert: {
          browser_info?: string | null
          component_name?: string | null
          created_at?: string
          error_message: string
          error_stack?: string | null
          id?: string
          route_path?: string | null
          user_id?: string | null
        }
        Update: {
          browser_info?: string | null
          component_name?: string | null
          created_at?: string
          error_message?: string
          error_stack?: string | null
          id?: string
          route_path?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "app_issues_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      chat_messages: {
        Row: {
          content: string
          created_at: string
          id: string
          sender_id: string
          thesis_id: string
        }
        Insert: {
          content: string
          created_at?: string
          id?: string
          sender_id: string
          thesis_id: string
        }
        Update: {
          content?: string
          created_at?: string
          id?: string
          sender_id?: string
          thesis_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "chat_messages_sender_id_fkey"
            columns: ["sender_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "chat_messages_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "chat_messages_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      citations: {
        Row: {
          authors: string[]
          created_at: string
          doi: string | null
          id: string
          issue: string | null
          journal: string | null
          pages: string | null
          publisher: string | null
          source: string
          text: string
          thesis_id: string
          type: string
          updated_at: string
          url: string | null
          volume: string | null
          year: string
        }
        Insert: {
          authors?: string[]
          created_at?: string
          doi?: string | null
          id?: string
          issue?: string | null
          journal?: string | null
          pages?: string | null
          publisher?: string | null
          source: string
          text: string
          thesis_id: string
          type: string
          updated_at?: string
          url?: string | null
          volume?: string | null
          year: string
        }
        Update: {
          authors?: string[]
          created_at?: string
          doi?: string | null
          id?: string
          issue?: string | null
          journal?: string | null
          pages?: string | null
          publisher?: string | null
          source?: string
          text?: string
          thesis_id?: string
          type?: string
          updated_at?: string
          url?: string | null
          volume?: string | null
          year?: string
        }
        Relationships: [
          {
            foreignKeyName: "citations_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "citations_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      features: {
        Row: {
          created_at: string | null
          description: string | null
          health: string
          id: string
          is_sub_feature: boolean | null
          last_updated: string | null
          name: string
          parent_id: string | null
          pricing_tier: string | null
          status: string
          trial_days: number | null
          usage_data: Json | null
        }
        Insert: {
          created_at?: string | null
          description?: string | null
          health?: string
          id?: string
          is_sub_feature?: boolean | null
          last_updated?: string | null
          name: string
          parent_id?: string | null
          pricing_tier?: string | null
          status?: string
          trial_days?: number | null
          usage_data?: Json | null
        }
        Update: {
          created_at?: string | null
          description?: string | null
          health?: string
          id?: string
          is_sub_feature?: boolean | null
          last_updated?: string | null
          name?: string
          parent_id?: string | null
          pricing_tier?: string | null
          status?: string
          trial_days?: number | null
          usage_data?: Json | null
        }
        Relationships: [
          {
            foreignKeyName: "features_parent_id_fkey"
            columns: ["parent_id"]
            isOneToOne: false
            referencedRelation: "features"
            referencedColumns: ["id"]
          },
        ]
      }
      notifications: {
        Row: {
          created_at: string
          id: string
          message: string
          read: boolean | null
          thesis_id: string
          type: string
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          message: string
          read?: boolean | null
          thesis_id: string
          type: string
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          message?: string
          read?: boolean | null
          thesis_id?: string
          type?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "notifications_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "notifications_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "notifications_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          created_at: string
          email: string
          id: string
          role_id: string | null
        }
        Insert: {
          created_at?: string
          email: string
          id: string
          role_id?: string | null
        }
        Update: {
          created_at?: string
          email?: string
          id?: string
          role_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_role_id_fkey"
            columns: ["role_id"]
            isOneToOne: false
            referencedRelation: "roles"
            referencedColumns: ["id"]
          },
        ]
      }
      roles: {
        Row: {
          id: string
          name: string
        }
        Insert: {
          id?: string
          name: string
        }
        Update: {
          id?: string
          name?: string
        }
        Relationships: []
      }
      theses: {
        Row: {
          content: Json
          created_at: string
          id: string
          language: string
          supervisor_email: string | null
          supervisor_id: string | null
          title: string
          updated_at: string
          user_id: string
        }
        Insert: {
          content?: Json
          created_at?: string
          id?: string
          language?: string
          supervisor_email?: string | null
          supervisor_id?: string | null
          title: string
          updated_at?: string
          user_id: string
        }
        Update: {
          content?: Json
          created_at?: string
          id?: string
          language?: string
          supervisor_email?: string | null
          supervisor_id?: string | null
          title?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "theses_supervisor_id_fkey"
            columns: ["supervisor_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      thesis_annotations: {
        Row: {
          content: Json
          created_at: string
          id: string
          reviewer_id: string | null
          section_id: string
          thesis_id: string | null
          type: string
          updated_at: string
        }
        Insert: {
          content?: Json
          created_at?: string
          id?: string
          reviewer_id?: string | null
          section_id: string
          thesis_id?: string | null
          type: string
          updated_at?: string
        }
        Update: {
          content?: Json
          created_at?: string
          id?: string
          reviewer_id?: string | null
          section_id?: string
          thesis_id?: string | null
          type?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "thesis_annotations_reviewer_id_fkey"
            columns: ["reviewer_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_annotations_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_annotations_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      thesis_collaborators: {
        Row: {
          created_at: string
          id: string
          role: string
          thesis_id: string
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          role: string
          thesis_id: string
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          role?: string
          thesis_id?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "thesis_collaborators_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_collaborators_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_collaborators_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      thesis_references: {
        Row: {
          authors: string[]
          created_at: string
          doi: string | null
          id: string
          issue: string | null
          journal: string | null
          pages: string | null
          publisher: string | null
          source: string
          text: string
          thesis_id: string
          title: string
          type: string
          updated_at: string
          url: string | null
          volume: string | null
          year: string
        }
        Insert: {
          authors?: string[]
          created_at?: string
          doi?: string | null
          id?: string
          issue?: string | null
          journal?: string | null
          pages?: string | null
          publisher?: string | null
          source: string
          text: string
          thesis_id: string
          title: string
          type: string
          updated_at?: string
          url?: string | null
          volume?: string | null
          year: string
        }
        Update: {
          authors?: string[]
          created_at?: string
          doi?: string | null
          id?: string
          issue?: string | null
          journal?: string | null
          pages?: string | null
          publisher?: string | null
          source?: string
          text?: string
          thesis_id?: string
          title?: string
          type?: string
          updated_at?: string
          url?: string | null
          volume?: string | null
          year?: string
        }
        Relationships: [
          {
            foreignKeyName: "thesis_references_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_references_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      thesis_reviews: {
        Row: {
          content: Json
          created_at: string
          id: string
          parent_id: string | null
          reviewer_id: string
          section_id: string
          status: string
          thesis_id: string
          updated_at: string
        }
        Insert: {
          content?: Json
          created_at?: string
          id?: string
          parent_id?: string | null
          reviewer_id: string
          section_id: string
          status?: string
          thesis_id: string
          updated_at?: string
        }
        Update: {
          content?: Json
          created_at?: string
          id?: string
          parent_id?: string | null
          reviewer_id?: string
          section_id?: string
          status?: string
          thesis_id?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "thesis_reviews_parent_id_fkey"
            columns: ["parent_id"]
            isOneToOne: false
            referencedRelation: "thesis_reviews"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_reviews_reviewer_id_fkey"
            columns: ["reviewer_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_reviews_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_reviews_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      thesis_templates: {
        Row: {
          created_at: string
          description: string | null
          id: string
          language: string
          name: string
          structure: Json
          updated_at: string
        }
        Insert: {
          created_at?: string
          description?: string | null
          id?: string
          language?: string
          name: string
          structure: Json
          updated_at?: string
        }
        Update: {
          created_at?: string
          description?: string | null
          id?: string
          language?: string
          name?: string
          structure?: Json
          updated_at?: string
        }
        Relationships: []
      }
      thesis_versions: {
        Row: {
          content: Json
          created_at: string
          created_by: string
          description: string | null
          id: string
          language: string
          thesis_id: string
          version_number: number
        }
        Insert: {
          content?: Json
          created_at?: string
          created_by: string
          description?: string | null
          id?: string
          language?: string
          thesis_id: string
          version_number: number
        }
        Update: {
          content?: Json
          created_at?: string
          created_by?: string
          description?: string | null
          id?: string
          language?: string
          thesis_id?: string
          version_number?: number
        }
        Relationships: [
          {
            foreignKeyName: "thesis_versions_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_versions_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "supervisor_theses"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "thesis_versions_thesis_id_fkey"
            columns: ["thesis_id"]
            isOneToOne: false
            referencedRelation: "theses"
            referencedColumns: ["id"]
          },
        ]
      }
      trial_settings: {
        Row: {
          created_at: string
          id: string
          trial_days: number
          updated_at: string
        }
        Insert: {
          created_at?: string
          id?: string
          trial_days?: number
          updated_at?: string
        }
        Update: {
          created_at?: string
          id?: string
          trial_days?: number
          updated_at?: string
        }
        Relationships: []
      }
      user_features: {
        Row: {
          access_type: string
          created_at: string
          expires_at: string | null
          feature_id: string | null
          id: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          access_type: string
          created_at?: string
          expires_at?: string | null
          feature_id?: string | null
          id?: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          access_type?: string
          created_at?: string
          expires_at?: string | null
          feature_id?: string | null
          id?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_features_feature_id_fkey"
            columns: ["feature_id"]
            isOneToOne: false
            referencedRelation: "features"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_features_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      user_feedback: {
        Row: {
          created_at: string
          email: string
          id: string
          message: string
          rating: number | null
          user_id: string | null
        }
        Insert: {
          created_at?: string
          email: string
          id?: string
          message: string
          rating?: number | null
          user_id?: string | null
        }
        Update: {
          created_at?: string
          email?: string
          id?: string
          message?: string
          rating?: number | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_feedback_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      user_interactions: {
        Row: {
          created_at: string
          element_class: string | null
          element_id: string | null
          event_type: string
          id: string
          page_path: string | null
          scroll_depth: number | null
          user_id: string | null
          x_position: number | null
          y_position: number | null
        }
        Insert: {
          created_at?: string
          element_class?: string | null
          element_id?: string | null
          event_type: string
          id?: string
          page_path?: string | null
          scroll_depth?: number | null
          user_id?: string | null
          x_position?: number | null
          y_position?: number | null
        }
        Update: {
          created_at?: string
          element_class?: string | null
          element_id?: string | null
          event_type?: string
          id?: string
          page_path?: string | null
          scroll_depth?: number | null
          user_id?: string | null
          x_position?: number | null
          y_position?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "user_interactions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      supervisor_theses: {
        Row: {
          content: Json | null
          created_at: string | null
          id: string | null
          language: string | null
          student_email: string | null
          supervisor_email: string | null
          supervisor_id: string | null
          title: string | null
          updated_at: string | null
          user_id: string | null
        }
        Relationships: [
          {
            foreignKeyName: "theses_supervisor_id_fkey"
            columns: ["supervisor_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never


// File: src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// File: src/main.tsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

// File: src/pages/AdminPanel.tsx

import { AdminDashboard } from '@/components/admin/AdminDashboard';

const AdminPanel = () => {
  return <AdminDashboard />;
};

export default AdminPanel;

// File: src/pages/Auth.tsx

import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { EmailAuthForm } from '@/components/auth/EmailAuthForm';
import { SocialAuth } from '@/components/auth/SocialAuth';
import { AuthError } from '@supabase/supabase-js';
import { useToast } from '@/hooks/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const Auth = () => {
  const [mode, setMode] = useState<'signin' | 'signup'>('signin');
  const [loading, setLoading] = useState(false);
  const [userType, setUserType] = useState<'student' | 'supervisor'>('student');
  const { toast } = useToast();

  const handleError = (error: AuthError) => {
    toast({
      title: 'Authentication Error',
      description: error.message,
      variant: 'destructive',
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#1a1f2c] via-[#2d364d] to-[#1a1f2c] flex items-center justify-center p-4">
      <Card className="w-full max-w-md p-6 bg-white/5 backdrop-blur-lg border-white/10">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-white mb-2">Welcome</h1>
          <p className="text-gray-300">Please sign in or create an account</p>
        </div>

        {mode === 'signup' && (
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-300 mb-2">
              I am a:
            </label>
            <Select
              value={userType}
              onValueChange={(value: 'student' | 'supervisor') => setUserType(value)}
            >
              <SelectTrigger className="w-full bg-white/10 border-white/20 text-white">
                <SelectValue placeholder="Select user type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="student">Student</SelectItem>
                <SelectItem value="supervisor">Supervisor</SelectItem>
              </SelectContent>
            </Select>
          </div>
        )}

        <div className="space-y-6">
          <EmailAuthForm
            mode={mode}
            onModeChange={() => setMode(mode === 'signin' ? 'signup' : 'signin')}
            onError={handleError}
          />
          
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t border-gray-700" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-[#1a1f2c] px-2 text-gray-400">Or continue with</span>
            </div>
          </div>

          <SocialAuth
            isLoading={loading}
            setLoading={setLoading}
            onError={handleError}
            mode={mode}
            userType={userType}
          />
        </div>
      </Card>
    </div>
  );
};

export default Auth;

// File: src/pages/CreateThesis.tsx

// File: src/pages/CreateThesis.tsx
import { ThesisCreationForm } from "@/components/thesis/ThesisCreationForm";

const CreateThesis = () => {
  return <ThesisCreationForm />;
};

export default CreateThesis;

// File: src/pages/Index.tsx

import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Settings, Plus, LogOut } from 'lucide-react';
import { ThesisList } from '@/components/thesis/ThesisList';
import { GettingStartedWizard } from '@/components/onboarding/GettingStartedWizard';
import { StatsGrid } from '@/components/dashboard/StatsGrid';
import { ThesisProgressMap } from '@/components/dashboard/ThesisProgressMap';
import { UserProfile } from '@/components/dashboard/UserProfile';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { QuickTips } from '@/components/dashboard/QuickTips';
import { useAuth } from '@/contexts/AuthContext';
import { useDashboardData } from '@/hooks/useDashboardData';
import { motion } from 'framer-motion';

const Index = () => {
  console.log('üìä Dashboard page rendering');
  const navigate = useNavigate();
  const { toast } = useToast();
  const { handleLogout, userId } = useAuth();
  const { userProfile, thesesStats, isLoading, error } = useDashboardData(userId);

  const handleCreateThesis = () => {
    navigate('/create-thesis');
    toast({
      title: "Starting New Thesis",
      description: "You're being redirected to create a new thesis.",
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#1a1f2c] via-[#2d364d] to-[#1a1f2c] text-gray-100 flex items-center justify-center">
        <div className="animate-pulse">Loading dashboard data...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#1a1f2c] via-[#2d364d] to-[#1a1f2c] text-gray-100 flex items-center justify-center">
        <p>Error loading dashboard: {error.message}</p>
      </div>
    );
  }

  const isAdmin = userProfile?.roles?.name === 'admin';

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#1a1f2c] via-[#2d364d] to-[#1a1f2c] text-gray-100 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute w-full h-full">
          {[...Array(20)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute bg-white/5 rounded-full"
              style={{
                width: Math.random() * 300 + 50,
                height: Math.random() * 300 + 50,
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
              }}
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.1, 0.2, 0.1],
              }}
              transition={{
                duration: Math.random() * 5 + 5,
                repeat: Infinity,
                ease: "easeInOut",
              }}
            />
          ))}
        </div>
      </div>

      <div className="container mx-auto px-4 py-8 space-y-8 relative z-10">
        {/* Header Section */}
        <div className="flex justify-between items-center">
          <div className="space-y-1">
            <h1 className="text-4xl font-serif font-bold bg-clip-text text-transparent bg-gradient-to-r from-[#9b87f5] to-[#D6BCFA]">
              Dashboard
            </h1>
            <p className="text-[#D6BCFA]/80 font-sans">
              Manage your thesis projects and track progress
            </p>
          </div>
          <div className="flex items-center gap-4">
            <Button 
              onClick={handleLogout}
              variant="outline"
              className="bg-red-500/10 hover:bg-red-500/20 text-red-400 border-red-400/20 font-sans"
            >
              <LogOut className="w-4 h-4 mr-2" />
              Logout
            </Button>
            {isAdmin && (
              <Button 
                onClick={() => navigate('/admin')} 
                variant="outline"
                className="bg-[#7E69AB]/10 hover:bg-[#7E69AB]/20 text-[#D6BCFA] border-[#D6BCFA]/20 font-sans"
              >
                <Settings className="w-4 h-4 mr-2" />
                Admin Panel
              </Button>
            )}
          </div>
        </div>

        {/* User Profile Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="backdrop-blur-xl bg-white/5 rounded-xl border border-white/10 p-6 transition-all duration-200 hover:bg-white/10"
        >
          <UserProfile 
            email={userProfile?.email || 'Loading...'}
            role={userProfile?.roles?.name || 'user'}
          />
        </motion.div>
        
        {/* Stats Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <StatsGrid stats={thesesStats || { total: 0, inProgress: 0, completed: 0 }} />
        </motion.div>

        {/* Thesis Progress Map */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <ThesisProgressMap stats={thesesStats || { total: 0, inProgress: 0, completed: 0 }} />
        </motion.div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Thesis Management */}
          <motion.div 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.6 }}
            className="space-y-6"
          >
            <div className="backdrop-blur-xl bg-white/5 rounded-xl border border-white/10 p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-serif font-semibold text-[#D6BCFA]">
                  Thesis Management
                </h2>
                <Button
                  onClick={handleCreateThesis}
                  className="bg-[#9b87f5] hover:bg-[#7E69AB] text-white font-sans"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Create New Thesis
                </Button>
              </div>
              <Card className="bg-white/5 border-[#D6BCFA]/20">
                <ThesisList />
              </Card>
            </div>
          </motion.div>

          {/* Right Column - Quick Tips and Getting Started */}
          <motion.div 
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.8 }}
            className="space-y-6"
          >
            <div className="backdrop-blur-xl bg-white/5 rounded-xl border border-white/10 p-6">
              <QuickTips />
            </div>
            <div className="backdrop-blur-xl bg-white/5 rounded-xl border border-white/10 p-6">
              <GettingStartedWizard />
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default Index;

// File: src/pages/LandingPage.tsx

// LandingPage.tsx
import React from "react";
import { HeroSection } from "@/components/landing/HeroSection";
import { FeaturesSection } from "@/components/landing/FeaturesSection";
import { PricingSection } from "@/components/landing/PricingSection";
import { Footer } from "@/components/landing/Footer"; 
import EnhancedThesisViz from "@/components/landing/visualization/EnhancedThesisViz";
import { Navbar } from "@/components/shared/Navbar";
import { FeaturesComparison } from "@/components/landing/FeaturesComparison";
import { TestimonialCarousel } from "@/components/landing/TestimonialCarousel";
import { DemoPreview } from "@/components/landing/DemoPreview";
import { FeedbackForm } from "@/components/landing/FeedbackForm";

const LandingPage = () => {
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <Navbar />
      <div className="pt-16">
        <HeroSection />
        <div className="relative py-32 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-white via-gray-50 to-white opacity-50" />
          <div className="relative max-w-[1400px] mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-16">
              <h2 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
                Visualize Your Progress
              </h2>
              <p className="mt-4 text-lg leading-8 text-gray-600 max-w-2xl mx-auto">
                Track your thesis development with our _______________ visualization tool.
                Monitor progress, collaborate with team members, and stay on top of deadlines.
              </p>
            </div>
            <div className="bg-white/50 backdrop-blur-sm rounded-3xl shadow-xl p-8">
              <EnhancedThesisViz />
            </div>
          </div>
        </div>
        <FeaturesSection />
        <DemoPreview />
        <FeaturesComparison />
        <PricingSection />
        <TestimonialCarousel />
        <div className="max-w-2xl mx-auto px-4 py-20">
          <h2 className="text-3xl font-bold text-center mb-8">Share Your Feedback</h2>
          <FeedbackForm />
        </div>
        <Footer />
      </div>
    </div>
  );
};

export default LandingPage;

// File: src/types/chat.d.ts

export interface Message {
  id: string;
  content: string;
  sender_id: string;
  created_at: string;
  thesis_id: string;
}

export interface ChatMessage extends Message {
  sender?: {
    id: string;
    email: string;
  };
}

// File: src/types/collaborator.ts

import { Profile } from './profile';

export type CollaboratorRole = 'owner' | 'editor' | 'viewer' | 'admin';

export interface Collaborator {
  user_id: string;
  role: CollaboratorRole;
  created_at?: string;
  profiles: {
    email: string;
    role: string;
    roles?: {
      name: string;
    };
  };
}

export interface CollaboratorWithProfile extends Omit<Collaborator, 'profiles'> {
  profiles: Profile & {
    roles?: {
      name: string;
    };
  };
}

// File: src/types/common.ts

import { ReactNode } from 'react';

export interface BaseProps {
  children?: ReactNode;
  className?: string;
}

export interface WithId {
  id: string;
}

export interface WithTimestamps {
  created_at: string;
  updated_at?: string;
}

export interface WithUser {
  user_id: string;
}

export type Status = 'active' | 'inactive' | 'pending' | 'completed';

// File: src/types/components.ts

import { Section, Reference, Citation } from './thesis';

export interface SectionProps {
  section: Section;
  isActive: boolean;
  onContentChange: (id: string, content: string) => void;
  onTitleChange: (id: string, title: string) => void;
}

export interface EditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

export interface ReferenceManagerProps {
  items: Reference[];
  onAdd: (reference: Reference) => void;
  onRemove: (id: string) => void;
  onUpdate: (reference: Reference) => void;
}

export interface CitationManagerProps {
  citations: Citation[];
  onCitationCreate: (citation: Citation) => void;
  onCitationUpdate: (citation: Citation) => void;
  onCitationDelete: (citation: Citation) => void;
  thesisId: string;
}

export interface Message {
  id: string;
  content: string;
  sender_id: string;
  thesis_id: string;
  created_at: string;
}

export interface Notification {
  id: string;
  message: string;
  read: boolean;
  thesis_id: string;
  user_id: string;
  created_at: string;
}

export interface SectionContentProps {
  section: Section;
  isActive: boolean;
  onContentChange: (content: string) => void;
  onUpdateSectionData: (section: Section) => void;
}


// File: src/types/features.d.ts

export interface Feature {
  id: string;
  name: string;
  description?: string;
  status: 'Active' | 'Inactive';
  health: string;
  usage_data?: any;
  last_updated?: string;
  created_at?: string;
  parent_id?: string;
  is_sub_feature?: boolean;
  pricing_tier?: 'free' | 'paid' | 'trial';
  trial_days?: number;
}

// File: src/types/forms.ts

export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'number' | 'date' | 'textarea';
  placeholder?: string;
  required?: boolean;
  validation?: {
    required?: string;
    pattern?: {
      value: RegExp;
      message: string;
    };
    minLength?: {
      value: number;
      message: string;
    };
    maxLength?: {
      value: number;
      message: string;
    };
  };
}

export interface FormConfig {
  fields: FormField[];
  onSubmit: (data: any) => Promise<void>;
  submitText?: string;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface FormState {
  isSubmitting: boolean;
  errors: ValidationError[];
}

// File: src/types/hooks.ts

import { UseQueryResult } from '@tanstack/react-query';
import { Thesis, Chapter, Section } from './thesis';

export interface UseThesisResult {
  thesis: Thesis | null;
  isLoading: boolean;
  error: Error | null;
  setThesis: (thesis: Thesis | ((prev: Thesis | null) => Thesis | null)) => void;
}

export interface UseChapterResult {
  chapter: Chapter | null;
  isLoading: boolean;
  error: Error | null;
  updateChapter: (chapter: Chapter) => Promise<void>;
}

export interface UseSectionResult {
  section: Section | null;
  isLoading: boolean;
  error: Error | null;
  updateSection: (section: Section) => Promise<void>;
}

export type QueryResult<T> = UseQueryResult<T, Error>;

// File: src/types/profile.ts

export interface Profile {
  id: string;
  email: string;
  created_at?: string;
  role_id?: string;
  roles?: {
    name: string;
  };
}

// File: src/types/thesis.d.ts

export interface Citation {
  id: string;
  text: string;
  authors: string[];
  type: string;
  created_at: string;
  updated_at: string;
}

export interface CitationManagerProps {
  citations: Citation[];
  onCitationSelect?: (citation: Citation) => void;
  selectedCitation?: Citation | null;
  onCitationCreate?: (citation: Citation) => void;
  onCitationUpdate?: (citation: Citation) => void;
  onCitationDelete?: (citation: Citation) => void;
  thesisId: string;
}

export interface CitationListProps {
  citations: Citation[];
  onRemove: (id: string) => void;
  onUpdate: (citation: Citation) => void;
  onPreview: (citation: Citation) => void;
}

export interface CitationSearchProps {
  onCitationSelect: (citation: Citation) => void;
}

export interface CitationPreviewProps {
  citation: Citation;
  onClose: () => void;
  onEdit: (citation: Citation) => void;
  onDelete: (citation: Citation) => void;
}

export interface ThesisComment {
  id: string;
  thesis_id: string;
  section_id: string;
  reviewer_id: string;
  content: {
    text: string;
  };
  status: 'pending' | 'resolved';
  created_at: string;
  updated_at: string;
  parent_id?: string;
}

export interface CommentThread {
  id: string;
  content: string;
  author: {
    id: string;
    email: string;
  };
  created_at: string;
  replies: CommentThread[];
}

export interface ThesisMetadata {
  description: string;
  keywords: string[];
  createdAt: string;
  shortTitle?: string;
  institution?: string;
  author?: string;
  degree?: string;
  date?: string;
  universityName?: string;
  departmentName?: string;
  authorName?: string;
  thesisDate?: string;
  committeeMembers?: string[];
}


// File: src/types/thesis.ts

export interface Collaborator {
  id: string;
  name: string;
  email: string;
  permissions: string[];
}

export interface Task {
  id: string;
  description: string;
  status: 'pending' | 'in progress' | 'completed' | 'on hold';
  priority: 'low' | 'medium' | 'high';
}

export interface CommentThread {
  id: string;
  content: string;
  author: string;
  createdAt: string;
  replies: CommentThread[];
}

export type ThesisSectionType =
  | 'title'
  | 'preface'
  | 'acknowledgments'
  | 'abstract'
  | 'table-of-contents'
  | 'list-of-figures'
  | 'list-of-tables'
  | 'abbreviations'
  | 'glossary'
  | 'introduction'
  | 'theoretical-framework'
  | 'methodology'
  | 'empirical-study'
  | 'results'
  | 'discussion'
  | 'conclusion'
  | 'recommendations'
  | 'postface'
  | 'references'
  | 'appendix'
  | 'advice'
  | 'custom';

export interface ThesisMetadata {
  description: string;
  keywords: string[];
  createdAt: string;
  shortTitle?: string;
  institution?: string;
  author?: string;
  degree?: string;
  date?: string;
  universityName?: string;
  departmentName?: string;
  authorName?: string;
  thesisDate?: string;
  committeeMembers?: string[];
}

export interface Thesis {
  id: string;
  title: string;
  content: any;
  metadata: ThesisMetadata;
  frontMatter: Section[];
  chapters: Chapter[];
  backMatter: Section[];
  createdAt: Date;
  updatedAt: Date;
  user_id: string;
  language?: string;
  supervisor_email?: string;
  supervisor_id?: string;
}

export interface Chapter {
  id: string;
  title: string;
  content: string;
  order: number;
  sections: Section[];
  figures: Figure[];
}

export interface Section {
  id: string;
  title: string;
  content: string;
  order: number;
  type: ThesisSectionType;
  required?: boolean;
  figures: Figure[];
  tables: Table[];
  citations: Citation[];
  references?: Reference[];
  tasks: Task[];
}

export interface Figure {
  id: string;
  imageUrl: string;
  title: string;
  caption: string;
  altText: string;
  number: number;
  dimensions: {
    width: number;
    height: number;
  };
  position: 'left' | 'center' | 'right';
  border?: {
    style: 'single' | 'double' | 'thick' | 'none';
    size: number;
    color: string;
  };
}

export interface Table {
  id: string;
  title: string;
  caption: string;
  content: string[][];
  number: number;
}

export interface Citation {
  id: string;
  text: string;
  source: string;
  authors: string[];
  year: string;
  type: 'article' | 'book' | 'conference' | 'website' | 'other';
  doi?: string;
  url?: string;
  journal?: string;
  volume?: string;
  issue?: string;
  pages?: string;
  publisher?: string;
  thesis_id: string;
  created_at: string;
  updated_at: string;
}

export interface Reference {
  id: string;
  text: string;
  title: string;
  source: string;
  authors: string[];
  year: string;
  type: 'article' | 'book' | 'conference' | 'thesis' | 'website' | 'other';
  doi?: string;
  url?: string;
  journal?: string;
  volume?: string;
  issue?: string;
  pages?: string;
  publisher?: string;
}

export interface ThesisVersion {
  id: string;
  thesis_id: string;
  content: any;
  version_number: number;
  description?: string;
  created_at: string;
  created_by: string;
}

export interface ThesisComment {
  id: string;
  content: string;
  author: string;
  createdAt: string;
  replies: ThesisComment[];
}


// File: src/utils/commentTransforms.ts

import { ThesisComment } from '@/types/thesis';
import { Json } from '@/integrations/supabase/types';

export const transformComment = (rawComment: any): ThesisComment => {
  return {
    id: rawComment.id,
    thesis_id: rawComment.thesis_id,
    section_id: rawComment.section_id,
    reviewer_id: rawComment.reviewer_id,
    content: { 
      text: typeof rawComment.content === 'string' 
        ? rawComment.content 
        : typeof rawComment.content === 'object' && rawComment.content !== null
          ? String(rawComment.content.text || '')
          : ''
    },
    parent_id: rawComment.parent_id,
    status: (rawComment.status === 'pending' || rawComment.status === 'resolved') 
      ? rawComment.status 
      : 'pending',
    created_at: rawComment.created_at,
    updated_at: rawComment.updated_at
  };
};

// File: src/utils/docx/contentGenerators.ts

import { HeadingLevel, IParagraphOptions, IRunOptions, convertInchesToTwip, AlignmentType, Paragraph, TextRun } from 'docx';

export const createHeading = (text: string, level: keyof typeof HeadingLevel, chapterNumber?: number): IParagraphOptions => ({
  text: chapterNumber ? `CHAPTER ${chapterNumber}\n${text}` : text,
  heading: HeadingLevel[level],
  spacing: {
    before: 480,
    after: 240
  },
  alignment: AlignmentType.CENTER
});

export const createParagraph = (text: string, options?: Partial<IParagraphOptions>): IParagraphOptions => ({
  ...options,
  children: [
    new TextRun({
      text,
      size: 24, // 12pt
      font: "Times New Roman"
    })
  ],
  spacing: {
    line: 360, // 1.5 spacing
    before: 0,
    after: 0,
    ...options?.spacing
  },
  indent: {
    firstLine: convertInchesToTwip(0.5),
    ...options?.indent
  }
});

export const createBlockQuote = (text: string): IParagraphOptions => ({
  children: [
    new TextRun({
      text,
      size: 24,
      font: "Times New Roman"
    })
  ],
  spacing: {
    line: 240, // single spacing
    before: 240,
    after: 240
  },
  indent: {
    left: convertInchesToTwip(0.5),
    right: convertInchesToTwip(0.5)
  }
});

export const createCaption = (text: string, type: 'figure' | 'table', number: string): IParagraphOptions => ({
  children: [
    new TextRun({
      text: `${type === 'figure' ? 'Figure' : 'Table'} ${number}: ${text}`,
      size: 20, // 10pt
      font: "Times New Roman"
    })
  ],
  spacing: {
    line: 240, // single spacing
    before: 120,
    after: 120
  },
  alignment: AlignmentType.CENTER
});

// File: src/utils/docx/documentStyles.ts

import { 
  IStylesOptions, 
  AlignmentType,
  convertInchesToTwip,
} from 'docx';

export const documentStyles: IStylesOptions = {
  default: {
    heading1: {
      run: {
        size: 28,
        bold: true,
        font: 'Times New Roman',
      },
      paragraph: {
        spacing: {
          after: 120,
        },
        alignment: AlignmentType.CENTER,
      },
    },
    heading2: {
      run: {
        size: 26,
        bold: true,
        font: 'Times New Roman',
      },
      paragraph: {
        spacing: {
          after: 120,
        },
      },
    },
    document: {
      run: {
        size: 24,
        font: 'Times New Roman',
      },
      paragraph: {
        spacing: {
          line: 360,
          after: 200,
        },
      },
    },
  },
};

export const pageSettings = {
  page: {
    margin: {
      top: convertInchesToTwip(1),
      right: convertInchesToTwip(1),
      bottom: convertInchesToTwip(1),
      left: convertInchesToTwip(1),
    },
  },
};

// File: src/utils/docx/imageUtils.ts

import { IImageOptions, BorderStyle } from 'docx';

interface ImageDimensions {
  width: number;
  height: number;
}

interface ImageBorder {
  style: typeof BorderStyle;
  size: number;
  color: string;
}

export const createImageRun = (
  data: Buffer | Uint8Array,
  dimensions: ImageDimensions,
  border?: ImageBorder
): IImageOptions => ({
  data,
  transformation: {
    width: dimensions.width,
    height: dimensions.height,
  },
  type: 'png',
  fallback: {
    width: dimensions.width,
    height: dimensions.height,
  }
});

// File: src/utils/docx/pageNumbering.ts

import { Paragraph, TextRun, AlignmentType } from 'docx';

export const createPageNumberParagraph = (): Paragraph => {
  return new Paragraph({
    children: [
      new TextRun("Page "),
      new TextRun({
        children: ["PAGE"],
      }),
      new TextRun(" of "),
      new TextRun({
        children: ["NUMPAGES"],
      }),
    ],
    alignment: AlignmentType.CENTER,
  });
};

// File: src/utils/docx/sectionGenerators.ts

import { 
  Document, 
  Paragraph, 
  TextRun, 
  PageBreak, 
  AlignmentType,
  HeadingLevel,
  TabStopPosition,
  TabStopType,
  convertInchesToTwip,
  LevelFormat,
  NumberFormat,
  TableRow,
  TableCell,
  Table,
  WidthType,
  BorderStyle,
  ImageRun
} from 'docx';
import { Buffer } from 'buffer';
import { TitlePageOptions } from './types';
import { createImageRun } from './imageUtils';

export const generateTitlePage = (options: TitlePageOptions): Paragraph[] => [
  new Paragraph({
    children: [
      new TextRun({
        text: options.title.toUpperCase(),
        bold: true,
        size: 32,
        font: "Times New Roman"
      }),
    ],
    alignment: AlignmentType.LEFT,
  }),
  new Paragraph({
    children: [
      new TextRun({
        text: 'By',
        size: 28,
        break: 1
      }),
      new TextRun({
        text: options.author,
        size: 28,
        break: 2
      }),
    ],
    alignment: AlignmentType.LEFT,
  }),
  new Paragraph({
    style: 'Subtitle',
    children: [
      new TextRun({
        text: options.university || '',
        size: 28,
        break: 2
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { 
      before: convertInchesToTwip(1),
      line: 360
    },
  }),
  new Paragraph({
    style: 'Subtitle',
    children: [
      new TextRun({
        text: options.department || '',
        size: 28,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { 
      before: convertInchesToTwip(0.5),
      line: 360
    },
  }),
  new Paragraph({
    style: 'Subtitle',
    children: [
      new TextRun({
        text: 'A thesis submitted in partial fulfillment',
        size: 24,
        break: 2
      }),
      new TextRun({
        text: 'of the requirements for the degree of',
        size: 24,
        break: 1
      }),
      new TextRun({
        text: options.degree || '',
        size: 24,
        break: 2,
        bold: true
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { 
      before: convertInchesToTwip(1),
      line: 360
    },
  }),
  new Paragraph({
    style: 'Subtitle',
    children: [
      new TextRun({
        text: options.date,
        size: 24,
        break: 2
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { 
      before: convertInchesToTwip(1),
      line: 360
    },
  }),
  new Paragraph({ 
    children: [new PageBreak()],
    spacing: { before: convertInchesToTwip(2) }
  }),
];

export const generateChapterContent = (
  chapterNumber: number,
  title: string,
  content: string,
  figures: any[]
): Paragraph[] => {
  const paragraphs: Paragraph[] = [
    new Paragraph({
      children: [
        new TextRun({
          text: `CHAPTER ${chapterNumber}`,
          bold: true,
          size: 32
        }),
      ],
      pageBreakBefore: true,
      alignment: AlignmentType.LEFT,
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: title.toUpperCase(),
          bold: true,
          size: 32
        }),
      ],
      alignment: AlignmentType.LEFT,
    }),
  ];

  // Add content paragraphs
  if (typeof content === 'string') {
    content.split('\n\n').forEach(paragraph => {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: paragraph.trim(),
              size: 24
            }),
          ],
          alignment: AlignmentType.LEFT,
        })
      );
    });
  }

  // Add figures
  if (figures && figures.length > 0) {
    figures.forEach(figure => {
      if (figure.imageUrl) {
        try {
          // Extract base64 data from data URL
          const base64Data = figure.imageUrl.split(',')[1];
          if (!base64Data) {
            console.warn('Invalid image URL format:', figure.imageUrl);
            return;
          }

          const imageBuffer = Buffer.from(base64Data, 'base64');
          
          const imageRun = new ImageRun({
            data: imageBuffer,
            transformation: {
              width: figure.dimensions?.width || 400,
              height: figure.dimensions?.height || 300
            }
          });

          paragraphs.push(
            new Paragraph({
              children: [imageRun],
              alignment: figure.position === 'left' ? AlignmentType.LEFT : 
                        figure.position === 'right' ? AlignmentType.RIGHT : 
                        AlignmentType.CENTER
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Figure ${figure.number}: ${figure.caption || ''}`,
                  italics: true,
                  size: 20
                })
              ],
              alignment: AlignmentType.CENTER
            })
          );
        } catch (error) {
          console.error('Error processing figure:', error);
        }
      }
    });
  }

  return paragraphs;
};

export const generateTableOfContents = (sections: { title: string; page: number }[]): Paragraph[] => {
  const tabStops = [
    {
      type: TabStopType.RIGHT,
      position: TabStopPosition.MAX,
      leader: TabStopType.DECIMAL
    }
  ];

  return [
    new Paragraph({
      children: [
        new TextRun({
          text: 'TABLE OF CONTENTS',
          bold: true,
          size: 32
        }),
      ],
      alignment: AlignmentType.LEFT,
    }),
    ...sections.map(section => 
      new Paragraph({
        tabStops,
        children: [
          new TextRun({
            text: section.title,
            size: 24
          }),
          new TextRun({
            text: '\t',
          }),
          new TextRun({
            text: section.page.toString(),
            size: 24
          }),
        ],
        alignment: AlignmentType.LEFT,
      })
    ),
    new Paragraph({ children: [new PageBreak()] }),
  ];
};


// File: src/utils/docx/styleConfig.ts

import { IStylesOptions, BorderStyle } from 'docx';

export const styleConfig: IStylesOptions = {
  paragraphStyles: [
    {
      id: "Normal",
      name: "Normal",
      run: {
        font: "Times New Roman",
        size: 24
      }
    },
    {
      id: "Heading1",
      name: "Heading 1",
      basedOn: "Normal",
      next: "Normal",
      run: {
        bold: true,
        size: 32
      },
      paragraph: {
        spacing: {
          before: 240,
          after: 120
        }
      }
    },
    {
      id: "Heading2",
      name: "Heading 2",
      basedOn: "Normal",
      next: "Normal",
      run: {
        bold: true,
        size: 28
      },
      paragraph: {
        spacing: {
          before: 240,
          after: 120
        }
      }
    }
  ]
};

// File: src/utils/docx/titlePageGenerator.ts

import { 
  IStylesOptions, 
  BorderStyle, 
  HeadingLevel, 
  AlignmentType,
  LineRuleType,
  UnderlineType,
  convertInchesToTwip
} from 'docx';

export const styleConfig: IStylesOptions = {
  default: {
    document: {
      run: {
        font: "Times New Roman",
        size: 24,
        language: {
          value: "en-US"
        }
      },
      paragraph: {
        spacing: {
          line: 360,
          lineRule: LineRuleType.AUTO
        }
      }
    }
  },
  paragraphStyles: [
    {
      id: "Normal",
      name: "Normal",
      quickFormat: true,
      run: {
        font: "Times New Roman",
        size: 24,
        color: "000000"
      },
      paragraph: {
        spacing: {
          line: 360,
          before: 0,
          after: 0
        },
        indent: {
          firstLine: convertInchesToTwip(0.5)
        }
      }
    },
    {
      id: "Heading1",
      name: "Heading 1",
      basedOn: "Normal",
      next: "Normal",
      quickFormat: true,
      run: {
        bold: true,
        size: 32,
        allCaps: true
      },
      paragraph: {
        spacing: {
          before: 480,
          after: 240,
          line: 360
        },
        keepNext: true,
        keepLines: true,
        outlineLevel: 0,
        alignment: AlignmentType.CENTER
      }
    },
    {
      id: "Heading2",
      name: "Heading 2",
      basedOn: "Normal",
      next: "Normal",
      quickFormat: true,
      run: {
        bold: true,
        size: 28
      },
      paragraph: {
        spacing: {
          before: 360,
          after: 180,
          line: 360
        },
        keepNext: true,
        keepLines: true,
        outlineLevel: 1
      }
    },
    {
      id: "Heading3",
      name: "Heading 3",
      basedOn: "Normal",
      next: "Normal",
      quickFormat: true,
      run: {
        bold: true,
        italics: true,
        size: 26
      },
      paragraph: {
        spacing: {
          before: 280,
          after: 140,
          line: 360
        },
        keepNext: true,
        outlineLevel: 2
      }
    },
    {
      id: "BlockQuote",
      name: "Block Quote",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        italics: true,
        size: 24
      },
      paragraph: {
        spacing: {
          before: 240,
          after: 240,
          line: 300
        },
        indent: {
          left: convertInchesToTwip(0.5),
          right: convertInchesToTwip(0.5)
        },
        alignment: AlignmentType.JUSTIFY
      }
    },
    {
      id: "Caption",
      name: "Caption",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        italics: true,
        size: 20
      },
      paragraph: {
        spacing: {
          before: 120,
          after: 240,
          line: 240
        },
        alignment: AlignmentType.CENTER
      }
    },
    {
      id: "TableHeader",
      name: "Table Header",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        bold: true,
        size: 24
      },
      paragraph: {
        spacing: {
          before: 120,
          after: 120,
          line: 240
        },
        alignment: AlignmentType.CENTER
      }
    },
    {
      id: "TableBody",
      name: "Table Body",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        size: 24
      },
      paragraph: {
        spacing: {
          before: 60,
          after: 60,
          line: 240
        }
      }
    },
    {
      id: "FootnoteText",
      name: "Footnote Text",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        size: 20
      },
      paragraph: {
        spacing: {
          before: 0,
          after: 0,
          line: 240
        },
        indent: {
          firstLine: convertInchesToTwip(0.25)
        }
      }
    },
    {
      id: "Bibliography",
      name: "Bibliography",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        size: 24
      },
      paragraph: {
        spacing: {
          before: 0,
          after: 120,
          line: 360
        },
        indent: {
          left: convertInchesToTwip(0.5),
          hanging: convertInchesToTwip(0.5)
        }
      }
    },
    {
      id: "TOCHeading",
      name: "TOC Heading",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        bold: true,
        size: 28
      },
      paragraph: {
        spacing: {
          before: 480,
          after: 240,
          line: 360
        },
        alignment: AlignmentType.CENTER
      }
    },
    {
      id: "TOCEntry1",
      name: "TOC Entry 1",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        size: 24
      },
      paragraph: {
        spacing: {
          line: 360
        },
        indent: {
          left: 0
        }
      }
    },
    {
      id: "TOCEntry2",
      name: "TOC Entry 2",
      basedOn: "Normal",
      quickFormat: true,
      run: {
        size: 24
      },
      paragraph: {
        spacing: {
          line: 360
        },
        indent: {
          left: convertInchesToTwip(0.25)
        }
      }
    }
  ]
};

// File: src/utils/docx/types.ts

import { IStylesOptions, BorderStyle, INumberingOptions, convertInchesToTwip } from 'docx';

export interface DocxGenerationOptions {
  font: string;
  fontSize: number;
  margins?: {
    top: number;
    right: number;
    bottom: number;
    left: number;
  };
  pageNumberFormat?: 'decimal' | 'lowerRoman' | 'upperRoman';
}

export interface ImageOptions {
  data: Buffer | Uint8Array;
  width: number;
  height: number;
  type?: string;
  fallback?: string;
}

export interface TitlePageOptions {
  title: string;
  author: string;
  date: string;
  university?: string;
  department?: string;
  degree?: string;
}

export interface TableOptions {
  headers: string[];
  rows: string[][];
  style?: string;
  caption?: string;
  label?: string;
}

export interface SectionNumbering {
  format: 'decimal' | 'lowerRoman' | 'upperRoman';
  start: number;
}

export interface ThesisMetadata {
  title: string;
  author: string;
  date: string;
  university: string;
  department: string;
  degree: string;
}

// File: src/utils/docxExport.ts

import {
  Document,
  Paragraph,
  TextRun,
  PageBreak,
  AlignmentType,
} from 'docx';
import { documentStyles, pageSettings } from './docx/documentStyles';
import { generateTitlePage, generateChapterContent, generateTableOfContents } from './docx/sectionGenerators';
import { Thesis } from '@/types/thesis';

export const generateThesisDocx = (thesis: Thesis): Document => {
  const doc = new Document({
    sections: [
      {
        ...pageSettings.page,
        children: [
          ...generateTitlePage({
            title: thesis.title,
            author: thesis.metadata?.authorName || '',
            date: thesis.metadata?.thesisDate || '',
            university: thesis.metadata?.universityName || '',
            department: thesis.metadata?.departmentName || '',
            degree: thesis.metadata?.degree || '',
          }),
          new Paragraph({ children: [new PageBreak()] }),
          ...generateTableOfContents(thesis.chapters?.map((chapter, index) => ({
            title: chapter.title,
            page: index + 3
          })) || []),
          new Paragraph({ children: [new PageBreak()] }),
          ...(thesis.chapters?.flatMap(chapter => 
            generateChapterContent(
              chapter.order + 1, 
              chapter.title, 
              chapter.content,
              chapter.figures || []
            )
          ) || []),
        ],
      },
    ],
    styles: documentStyles,
  });

  return doc;
};

// File: src/utils/markdownToDocx.ts

import { Paragraph, TextRun, IParagraphOptions, AlignmentType, HeadingLevel } from 'docx';

export class MarkdownToDocx {
  convert(markdownText: string, font: string, fontSize: number): Paragraph[] {
    const paragraphs: Paragraph[] = [];
    const lines = markdownText.split(/\r?\n/);

    let inList = false;
    let listLevel = 0;
    let listType: 'unordered' | 'ordered' | null = null;
    let listItemCount = 0;

    for (let line of lines) {
      if (line.startsWith('# ')) {
        paragraphs.push(new Paragraph({
          text: line.substring(2),
          heading: HeadingLevel.HEADING_1,
          children: [
            new TextRun({
              text: line.substring(2),
              bold: true,
              font: font,
              size: fontSize + 2,
            })
          ]
        }));
      } else if (line.startsWith('- ') || line.startsWith('* ')) {
        if (!inList) {
          inList = true;
          listType = 'unordered';
          listItemCount = 1;
          listLevel = 1;
        }
        paragraphs.push(this.createListItem(line.substring(2), listType, listLevel, font, fontSize));
      } else if (line.match(/^[\d]+\.\s/)) {
        if (!inList) {
          inList = true;
          listType = 'ordered';
          listItemCount = 1;
          listLevel = 1;
        }
        paragraphs.push(this.createListItem(line.substring(line.indexOf('.') + 2), listType, listLevel, font, fontSize, listItemCount));
        listItemCount++;
      } else {
        if (inList) {
          inList = false;
          listType = null;
          listItemCount = 0;
          listLevel = 0;
        }
        paragraphs.push(new Paragraph({
          children: [
            new TextRun({
              text: line,
              font: font,
              size: fontSize
            })
          ]
        }));
      }
    }

    return paragraphs;
  }

  private createListItem(text: string, listType: 'unordered' | 'ordered' | null, level: number, font: string, fontSize: number, itemNumber?: number): Paragraph {
    const baseOptions: IParagraphOptions = {
      children: [
        new TextRun({
          text: text,
          font: font,
          size: fontSize
        })
      ],
    };

    if (listType === 'unordered') {
      return new Paragraph({
        ...baseOptions,
        bullet: {
          level: level - 1,
        }
      });
    }

    if (listType === 'ordered' && itemNumber) {
      return new Paragraph({
        ...baseOptions,
        numbering: {
          reference: "heading1",
          level: 0,
        },
        indent: { left: 200 * level }
      });
    }

    return new Paragraph({
      ...baseOptions
    });
  }
}

// File: src/utils/thesisStructure.ts

export const frenchThesisSections = {
  frontMatter: [
    { type: 'title', title: 'Page de garde', required: true },
    { type: 'preface', title: 'Avant-propos', required: false },
    { type: 'preface', title: 'Pr√©face', required: false },
    { type: 'acknowledgments', title: 'Remerciements', required: false },
    { type: 'abstract', title: 'R√©sum√©', required: true },
    { type: 'table-of-contents', title: 'Sommaire', required: true },
    { type: 'list-of-figures', title: 'Liste des tableaux et figures', required: true },
    { type: 'abbreviations', title: 'Liste des abr√©viations', required: false },
    { type: 'glossary', title: 'Glossaire', required: false }
  ],
  mainMatter: [
    { type: 'introduction', title: 'Introduction', required: true },
    { type: 'theoretical-framework', title: 'Cadre th√©orique', required: true },
    { type: 'empirical-study', title: 'Partie empirique', required: true },
    { type: 'results', title: 'R√©sultats de recherche', required: true },
    { type: 'conclusion', title: 'Conclusion', required: true },
    { type: 'recommendations', title: 'Recommandations', required: false }
  ],
  backMatter: [
    { type: 'postface', title: 'Postface', required: false },
    { type: 'references', title: 'Bibliographie', required: true },
    { type: 'appendix', title: 'Annexes', required: false },
    { type: 'advice', title: 'Conseils', required: false }
  ]
};

export const arabicThesisSections = {
  frontMatter: [
    { type: 'title', title: 'ÿµŸÅÿ≠ÿ© ÿßŸÑÿπŸÜŸàÿßŸÜ', required: true },
    { type: 'abstract', title: 'ŸÖŸÑÿÆÿµ', required: true },
    { type: 'acknowledgments', title: 'ÿ¥ŸÉÿ± Ÿàÿ™ŸÇÿØŸäÿ±', required: false },
    { type: 'table-of-contents', title: 'ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™', required: true },
    { type: 'list-of-figures', title: 'ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ¥ŸÉÿßŸÑ', required: true },
    { type: 'list-of-tables', title: 'ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ¨ÿØÿßŸàŸÑ', required: true },
    { type: 'abbreviations', title: 'ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿßÿÆÿ™ÿµÿßÿ±ÿßÿ™', required: false }
  ],
  mainMatter: [
    { type: 'introduction', title: 'ÿßŸÑŸÖŸÇÿØŸÖÿ©', required: true },
    { type: 'theoretical-framework', title: 'ÿßŸÑÿ•ÿ∑ÿßÿ± ÿßŸÑŸÜÿ∏ÿ±Ÿä', required: true },
    { type: 'methodology', title: 'ŸÖŸÜŸáÿ¨Ÿäÿ© ÿßŸÑÿ®ÿ≠ÿ´', required: true },
    { type: 'results', title: 'ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨', required: true },
    { type: 'discussion', title: 'ÿßŸÑŸÖŸÜÿßŸÇÿ¥ÿ©', required: true },
    { type: 'conclusion', title: 'ÿßŸÑÿÆÿßÿ™ŸÖÿ©', required: true },
    { type: 'recommendations', title: 'ÿßŸÑÿ™ŸàÿµŸäÿßÿ™', required: false }
  ],
  backMatter: [
    { type: 'references', title: 'ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ', required: true },
    { type: 'appendix', title: 'ÿßŸÑŸÖŸÑÿßÿ≠ŸÇ', required: false }
  ]
};

export type ThesisSectionType = 
  | 'title'
  | 'preface'
  | 'acknowledgments'
  | 'abstract'
  | 'table-of-contents'
  | 'list-of-figures'
  | 'list-of-tables'
  | 'abbreviations'
  | 'glossary'
  | 'introduction'
  | 'theoretical-framework'
  | 'methodology'
  | 'empirical-study'
  | 'results'
  | 'discussion'
  | 'conclusion'
  | 'recommendations'
  | 'postface'
  | 'references'
  | 'appendix'
  | 'advice'
  | 'custom';

// File: src/utils/translations.ts

export const translations = {
  en: {
    common: {
      login: "Login",
      signup: "Sign Up",
      features: "Features",
      about: "About",
      getStarted: "Get Started",
      home: "Home"
    },
    landing: {
      hero: {
        title: "Write Your Thesis with Confidence",
        subtitle: "A powerful platform for academic writing and collaboration",
        cta: "Start Writing Now",
        learnMore: "Learn More"
      },
      features: {
        title: "Powerful Features for Academic Success",
        subtitle: "Everything you need to write a professional thesis",
        smartEditor: {
          title: "Smart Editor",
          description: "Write and format your thesis with our intelligent editor"
        },
        collaboration: {
          title: "Real-time Collaboration",
          description: "Work together with advisors and peers seamlessly"
        },
        versionControl: {
          title: "Version Control",
          description: "Track changes and manage different versions effortlessly"
        },
        aiPowered: {
          title: "AI-Powered",
          description: "Get intelligent suggestions and formatting assistance"
        }
      },
      pricing: {
        title: "Choose Your Plan",
        subtitle: "Select the perfect plan for your academic journey",
        basic: {
          title: "Basic",
          price: "0 DZD",
          duration: "one thesis"
        },
        standard: {
          title: "Standard",
          price: "3,900 DZD",
          duration: "per thesis"
        },
        research: {
          title: "Research",
          price: "13,900 DZD",
          duration: "yearly"
        }
      }
    }
  },
  fr: {
    common: {
      login: "Connexion",
      signup: "S'inscrire",
      features: "Fonctionnalit√©s",
      about: "√Ä propos",
      getStarted: "Commencer",
      home: "Accueil"
    },
    landing: {
      hero: {
        title: "R√©digez votre th√®se en toute confiance",
        subtitle: "Une plateforme puissante pour la r√©daction acad√©mique et la collaboration",
        cta: "Commencer √† √©crire",
        learnMore: "En savoir plus"
      },
      features: {
        title: "Des fonctionnalit√©s puissantes pour la r√©ussite acad√©mique",
        subtitle: "Tout ce dont vous avez besoin pour r√©diger une th√®se professionnelle",
        smartEditor: {
          title: "√âditeur intelligent",
          description: "R√©digez et formatez votre th√®se avec notre √©diteur intelligent"
        },
        collaboration: {
          title: "Collaboration en temps r√©el",
          description: "Travaillez ensemble avec vos directeurs et pairs de mani√®re transparente"
        },
        versionControl: {
          title: "Contr√¥le de version",
          description: "Suivez les modifications et g√©rez diff√©rentes versions sans effort"
        },
        aiPowered: {
          title: "Propuls√© par l'IA",
          description: "Obtenez des suggestions intelligentes et une assistance au formatage"
        }
      },
      pricing: {
        title: "Choisissez votre forfait",
        subtitle: "S√©lectionnez le forfait parfait pour votre parcours acad√©mique",
        basic: {
          title: "Basique",
          price: "0 DZD",
          duration: "une th√®se"
        },
        standard: {
          title: "Standard",
          price: "3 900 DZD",
          duration: "par th√®se"
        },
        research: {
          title: "Recherche",
          price: "13 900 DZD",
          duration: "par an"
        }
      }
    }
  },
  ar: {
    common: {
      login: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ",
      signup: "ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®",
      features: "ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™",
      about: "ÿ≠ŸàŸÑ",
      getStarted: "ÿßÿ®ÿØÿ£ ÿßŸÑÿ¢ŸÜ",
      home: "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"
    },
    landing: {
      hero: {
        title: "ÿßŸÉÿ™ÿ® ÿ£ÿ∑ÿ±Ÿàÿ≠ÿ™ŸÉ ÿ®ÿ´ŸÇÿ©",
        subtitle: "ŸÖŸÜÿµÿ© ŸÇŸàŸäÿ© ŸÑŸÑŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ŸàÿßŸÑÿ™ÿπÿßŸàŸÜ",
        cta: "ÿßÿ®ÿØÿ£ ÿßŸÑŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¢ŸÜ",
        learnMore: "ÿßÿπÿ±ŸÅ ÿßŸÑŸÖÿ≤ŸäÿØ"
      },
      features: {
        title: "ŸÖŸäÿ≤ÿßÿ™ ŸÇŸàŸäÿ© ŸÑŸÑŸÜÿ¨ÿßÿ≠ ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸä",
        subtitle: "ŸÉŸÑ ŸÖÿß ÿ™ÿ≠ÿ™ÿßÿ¨Ÿá ŸÑŸÉÿ™ÿßÿ®ÿ© ÿ£ÿ∑ÿ±Ÿàÿ≠ÿ© ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©",
        smartEditor: {
          title: "ŸÖÿ≠ÿ±ÿ± ÿ∞ŸÉŸä",
          description: "ÿßŸÉÿ™ÿ® ŸàŸÜÿ≥ŸÇ ÿ£ÿ∑ÿ±Ÿàÿ≠ÿ™ŸÉ ŸÖÿπ ŸÖÿ≠ÿ±ÿ±ŸÜÿß ÿßŸÑÿ∞ŸÉŸä"
        },
        collaboration: {
          title: "ÿ™ÿπÿßŸàŸÜ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÅÿπŸÑŸä",
          description: "ÿßÿπŸÖŸÑ ŸÖÿπ ÿßŸÑŸÖÿ¥ÿ±ŸÅŸäŸÜ ŸàÿßŸÑÿ≤ŸÖŸÑÿßÿ° ÿ®ÿ≥ŸÑÿßÿ≥ÿ©"
        },
        versionControl: {
          title: "ÿßŸÑÿ™ÿ≠ŸÉŸÖ ŸÅŸä ÿßŸÑÿ•ÿµÿØÿßÿ±ÿßÿ™",
          description: "ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±ÿßÿ™ Ÿàÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿµÿØÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ© ÿ®ÿ≥ŸáŸàŸÑÿ©"
        },
        aiPowered: {
          title: "ŸÖÿØÿπŸàŸÖ ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä",
          description: "ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ÿßŸÇÿ™ÿ±ÿßÿ≠ÿßÿ™ ÿ∞ŸÉŸäÿ© ŸàŸÖÿ≥ÿßÿπÿØÿ© ŸÅŸä ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ"
        }
      },
      pricing: {
        title: "ÿßÿÆÿ™ÿ± ÿÆÿ∑ÿ™ŸÉ",
        subtitle: "ÿßÿÆÿ™ÿ± ÿßŸÑÿÆÿ∑ÿ© ÿßŸÑŸÖÿ´ÿßŸÑŸäÿ© ŸÑÿ±ÿ≠ŸÑÿ™ŸÉ ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸäÿ©",
        basic: {
          title: "ÿ£ÿ≥ÿßÿ≥Ÿä",
          price: "0 ÿØÿ¨",
          duration: "ÿ£ÿ∑ÿ±Ÿàÿ≠ÿ© Ÿàÿßÿ≠ÿØÿ©"
        },
        standard: {
          title: "ŸÇŸäÿßÿ≥Ÿä",
          price: "3,900 ÿØÿ¨",
          duration: "ŸÑŸÉŸÑ ÿ£ÿ∑ÿ±Ÿàÿ≠ÿ©"
        },
        research: {
          title: "ÿ®ÿ≠ÿ´",
          price: "13,900 ÿØÿ¨",
          duration: "ÿ≥ŸÜŸàŸäÿß"
        }
      }
    }
  }
} as const;

export type Language = keyof typeof translations;

// File: src/vite-env.d.ts

/// <reference types="vite/client" />