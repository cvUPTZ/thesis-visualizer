import React from 'react';
import { Section } from '@/types/thesis';
import { Button } from '@/components/ui/button';
import { Plus, FileText, Award, BookOpen, List, Image, Table, FileTerminal, Lock } from 'lucide-react';
import { cn } from '@/lib/utils';
import { SectionTypes } from '@/types/thesis';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface FrontMatterProps {
  sections: Section[];
  onSectionSelect: (id: string) => void;
  activeSection: string;
  onAddSection?: (type: string) => void;
}

export const FrontMatterSections: React.FC<FrontMatterProps> = ({
  sections,
  onSectionSelect,
  activeSection,
  onAddSection
}) => {
  const autoGeneratedTypes = [
    { type: SectionTypes.title, label: 'Title Page', icon: FileText },
    { type: SectionTypes['table-of-contents'], label: 'Table of Contents', icon: List },
    { type: SectionTypes['list-of-figures'], label: 'List of Figures', icon: Image },
    { type: SectionTypes['list-of-tables'], label: 'List of Tables', icon: Table }
  ];

  const userCreatedTypes = [
    { type: SectionTypes.acknowledgments, label: 'Acknowledgments', icon: Award },
    { type: SectionTypes.abstract, label: 'Abstract', icon: BookOpen },
    { type: SectionTypes['list-of-abbreviations'], label: 'List of Abbreviations', icon: FileTerminal }
  ];

  const renderSection = (section: Section, isAutoGenerated: boolean) => {
    const typeInfo = [...autoGeneratedTypes, ...userCreatedTypes].find(t => t.type === section.type);
    const Icon = typeInfo?.icon || FileText;
    
    return (
      <TooltipProvider key={section.id}>
        <Tooltip>
          <TooltipTrigger asChild>
            <button
              onClick={() => onSectionSelect(section.id)}
              className={cn(
                "flex w-full items-center gap-2 rounded-md px-3 py-1.5 text-sm transition-colors",
                "hover:bg-primary/5",
                activeSection === section.id && "bg-primary/10 text-primary font-medium"
              )}
            >
              <div className="flex items-center gap-2 flex-1">
                <Icon className="h-4 w-4 opacity-70" />
                <span>{section.title}</span>
              </div>
              {isAutoGenerated && (
                <Lock className="h-3 w-3 text-muted-foreground" />
              )}
            </button>
          </TooltipTrigger>
          <TooltipContent>
            {isAutoGenerated ? 
              "Auto-generated section" : 
              "User-created section"}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };

  const renderAddButton = (type: string, label: string, Icon: React.ElementType) => {
    if (sections.some(s => s.type === type)) return null;
    
    return (
      <Button
        key={`add-${type}`}
        variant="ghost"
        size="sm"
        className="w-full justify-start text-muted-foreground hover:text-foreground hover:bg-primary/5 gap-2"
        onClick={() => onAddSection?.(type)}
      >
        <Plus className="h-4 w-4" />
        <Icon className="h-4 w-4" />
        <span>Add {label}</span>
      </Button>
    );
  };

  const autoGeneratedSections = sections.filter(s => 
    autoGeneratedTypes.some(t => t.type === s.type)
  );

  const userCreatedSections = sections.filter(s => 
    userCreatedTypes.some(t => t.type === s.type)
  );

  return (
    <div className="space-y-6">
      <div className="px-3">
        <h3 className="text-sm font-semibold text-primary mb-4">Front Matter</h3>
        
        {autoGeneratedSections.length > 0 && (
          <div className="mb-6">
            <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground mb-2">
              <Lock className="h-3 w-3" />
              Auto-generated Sections
            </div>
            <div className="space-y-1">
              {autoGeneratedSections.map(section => renderSection(section, true))}
            </div>
          </div>
        )}
        
        <div className="space-y-4">
          <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground mb-2">
            User Sections
          </div>
          
          {userCreatedSections.map(section => renderSection(section, false))}
          
          <div className="space-y-2 pt-2">
            {userCreatedTypes.map(({ type, label, icon: Icon }) => 
              renderAddButton(type, label, Icon)
            )}
          </div>
        </div>
      </div>
    </div>
  );
};